{
  "components": {
    "schemas": {
      "Origin": {
        "description": "Where is this transaction coming from",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "sequence": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "originId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}$",
            "type": "string",
            "maxLength": 66
          },
          "smartContract": {
            "$ref": "#/components/schemas/SmartContract"
          }
        }
      },
      "AddressMonitoringRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "callBackURL": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "addressId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "ResourceMonitoringAddressDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addressId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResourceMonitoringDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "resourceMonitoringId": {
            "format": "uuid",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "SmartContractReadFunctionSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "functionId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "inputParameters": {
            "minItems": 0,
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractInputParameterSchema"
            }
          },
          "outputParameters": {
            "minItems": 0,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractInputParameterSchema"
            }
          }
        }
      },
      "StatusUpdateSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "value": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CreateSubscriptionResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "scubscriptionDetails": {
            "$ref": "#/components/schemas/SubscriptionDetailsSchema"
          },
          "subscriptionId": {
            "minLength": 0,
            "pattern": "^[a-z0-9-]{1,24}$",
            "type": "string",
            "maxLength": 24
          }
        }
      },
      "DestinationPaymentSchema": {
        "description": "The Destination of this transaction",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/PaymentSchema"
          },
          "destinationId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}",
            "description": "The unique identifiers of the destination",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "OriginPaymentSchema": {
        "description": "Where is this transaction coming from",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "originId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}$",
            "description": "Unique Identifier of the originator",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "DeleteResourceMonitoringAddressSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addressMonitoringDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringAddressDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          }
        }
      },
      "SmartContractOutputParameterSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,30}$",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "SmartContractRequestDetailsOrigin": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "originId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}$",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "SubscriptionDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "Vout": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "scriptPubKey": {
            "$ref": "#/components/schemas/ScriptPubKey"
          },
          "value": {
            "type": "number"
          },
          "n": {
            "type": "number"
          }
        }
      },
      "ExecuteSmartContractReadResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContract": {
            "$ref": "#/components/schemas/SmartContractReadSchema"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "TransferSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "tokenId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "tokenName": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "SubscriptionUpdateResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "subscriptionDetails": {
            "$ref": "#/components/schemas/SubscriptionDetails"
          },
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "subscriptionId": {
            "minLength": 0,
            "pattern": "^[a-z0-9-]{1,24}$",
            "type": "string",
            "maxLength": 24
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CreateSmartContractMonitoringSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "subscriptionDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringSubscriptionDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          },
          "subscription": {
            "$ref": "#/components/schemas/ResourceMonitoringSubscription"
          }
        }
      },
      "PrepareTransactionSmartContractInvokeRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "urgency": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          },
          "requestDetails": {
            "$ref": "#/components/schemas/SmartContractInvokeRequestDetailsSchema"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "MonitorSmartContractEventParam": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "selectedIntegerLength": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,30}$",
            "type": "string",
            "maxLength": 30
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z]{1,30}$",
            "type": "string",
            "maxLength": 30
          },
          "value": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_ ]{1,150}$",
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "PrepareTransferTransactionRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "urgency": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          },
          "requestDetails": {
            "$ref": "#/components/schemas/TransferRequestDetailsSchema"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "Status": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "code": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_0-9 ]{1,30}\"",
            "description": "The code of an object",
            "type": "string",
            "maxLength": 30
          },
          "description": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_0-9.,\\-() ]{1,400}",
            "description": "The description of an object",
            "type": "string",
            "maxLength": 400
          },
          "message": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_0-9.,\\-() ]{1,400}",
            "description": "The message of an object",
            "type": "string",
            "maxLength": 400
          },
          "value": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "description": "The value of an object",
            "type": "string",
            "maxLength": 50
          },
          "timestamp": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_0-9.,:\\- ]{1,50}",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "UTXOTimestampSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "nano": {
            "type": "string"
          },
          "epochSecond": {
            "type": "string"
          }
        }
      },
      "LinkedBlocks": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "parent": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,150}$",
            "type": "string",
            "maxLength": 150
          },
          "child": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,150}$",
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "SmartContractPaymentSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "amount": {
            "minLength": 0,
            "pattern": "^[0-9. ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "unit": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_ ]{1,10}$",
            "type": "string",
            "maxLength": 10
          }
        }
      },
      "InternalServerErrorSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "path": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "error": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AddressMonitoringResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "subscriptionDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringSubscriptionDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          },
          "subscription": {
            "$ref": "#/components/schemas/ResourceMonitoringSubscription"
          }
        }
      },
      "SmartContractMonitoringSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContractEventMonitoringDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringSmartContractEventDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          }
        }
      },
      "ResourceMonitoredAddressDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addressId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "PrepareSearchSmartContractRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "requestDetails": {
            "$ref": "#/components/schemas/SmartContractSearchRequestDetails"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "ScriptPubKey": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asm": {
            "type": "string"
          },
          "hex": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "reqSigs": {
            "type": "string"
          }
        }
      },
      "SmartContractDestinationSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContract": {
            "$ref": "#/components/schemas/SmartContractSchema"
          },
          "payment": {
            "$ref": "#/components/schemas/SmartContractPaymentSchema"
          },
          "destinationId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}$",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "ListSubscriptionResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "subscriptionDetails": {
            "$ref": "#/components/schemas/SubscriptionDetailsSchema"
          },
          "subscribedTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastUpdatedTime": {
            "format": "date-time",
            "type": "string"
          },
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "subscriptionId": {
            "minLength": 0,
            "pattern": "^[a-z0-9-]{1,24}$",
            "type": "string",
            "maxLength": 24
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 24
          }
        }
      },
      "AddressMonitoringDetailsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "addressDetails": {
            "$ref": "#/components/schemas/ResourceMonitoredAddressDetails"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "UpdateSubscriptionRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "statusUpdate": {
            "$ref": "#/components/schemas/StatusUpdateSchema"
          },
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          }
        }
      },
      "SmartContractFunctionSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "inputParameters": {
            "minItems": 0,
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractInputParameterSchema"
            }
          }
        }
      },
      "ExecuteSearchBalanceResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "balances": {
            "minItems": 0,
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBalanceResponse"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "UpdateAddressMonitoringSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addressMonitoringDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringAddressDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          }
        }
      },
      "TransferRequestDetailsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "overledgerSigningType": {
            "minLength": 0,
            "pattern": "^[A-Za-z- ]{1,30}",
            "type": "string",
            "maxLength": 30
          },
          "origin": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OriginTransferSchema"
            }
          },
          "destination": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DestinationTransferSchema"
            }
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,150}$",
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "PrepareNativeTransactionRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "description": "The type of the object",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "Payment": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "amount": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9. ]{1,100}",
            "description": "The amount of a currency",
            "type": "string",
            "maxLength": 100
          },
          "unit": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9 ]{1,5}",
            "description": "The unit of this currency/token",
            "type": "string",
            "maxLength": 5
          },
          "issuer": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9 ]{1,20}",
            "type": "string",
            "maxLength": 20
          }
        }
      },
      "ExecuteSearchSequenceResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "sequence": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "addressId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ErrorList": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "errorCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Transaction": {
        "description": "Smallest unit of a work process related to interactions with distributed ledgers",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "signature": {
            "minItems": 0,
            "maxItems": 20000,
            "description": "The signatures of this transaction",
            "type": "array",
            "items": {
              "description": "The signatures of this transaction",
              "type": "string"
            }
          },
          "origin": {
            "minItems": 0,
            "maxItems": 20000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Origin"
            }
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "destination": {
            "minItems": 0,
            "maxItems": 13107,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "signed": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,400}$",
            "type": "string",
            "maxLength": 400
          },
          "totalPaymentAmount": {
            "minItems": 0,
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,150}$",
            "description": "Any text-based element of the data payload",
            "type": "string",
            "maxLength": 150
          },
          "transactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "description": "The unique identifier of the transaction on this DLN",
            "type": "string",
            "maxLength": 100
          },
          "encoded": {
            "minItems": 0,
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nativeData": {
            "type": "object"
          },
          "extraFields": {
            "type": "object"
          }
        }
      },
      "Transfer": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "tokenId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9 ]{1,15}",
            "type": "string",
            "maxLength": 15
          },
          "tokenName": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9 ]{1,15}",
            "type": "string",
            "maxLength": 15
          }
        }
      },
      "SmartContractInvokeRequestDetailsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "origin": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractRequestDetailsOrigin"
            }
          },
          "destination": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractDestinationSchema"
            }
          }
        }
      },
      "Block": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "blockId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,150}$",
            "type": "string",
            "maxLength": 150
          },
          "number": {
            "type": "integer"
          },
          "transactionIds": {
            "minItems": 0,
            "maxItems": 10000,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "size": {
            "minItems": 0,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockSize"
            }
          },
          "hashes": {
            "minItems": 0,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockHash"
            }
          },
          "linkedBlocks": {
            "$ref": "#/components/schemas/LinkedBlocks"
          },
          "numberOfTransactions": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,150}$",
            "type": "string",
            "maxLength": 150
          },
          "timestamp": {
            "type": "integer"
          },
          "nativeData": {
            "type": "object"
          }
        }
      },
      "SmartContractSearchDestinationSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContract": {
            "$ref": "#/components/schemas/SmartContractSearchSchema"
          }
        }
      },
      "ResourceMonitoringSubscriptionDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "ExecuteTransactionRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "requestId",
          "signed"
        ],
        "properties": {
          "requestId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,36}$",
            "description": "The ID assigned to a preparation request in Overledger",
            "type": "string",
            "maxLength": 36
          },
          "signed": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,400}$",
            "description": "The raw data after transaction signing",
            "type": "string",
            "maxLength": 400
          }
        }
      },
      "SmartContractMonitoringDetailsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContractEventHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractEventHistory"
            }
          },
          "smartContractEventDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringSmartContractEventDetails"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ExecuteTransactionResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "urgency": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "requestId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,36}$",
            "description": "The ID assigned to a preparation request in Overledger",
            "type": "string",
            "maxLength": 36
          },
          "overledgerTransactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-]{1,36}$",
            "type": "string",
            "maxLength": 36
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "description": "The type of the transaction executed",
            "type": "string",
            "maxLength": 50
          },
          "transactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "description": "The ID assigned by Overledger to a transaction submitted to a DLT via Overledger",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "ExecuteSearchUTXOResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "destination": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UTXODestination"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "timestamp": {
            "$ref": "#/components/schemas/UTXOTimestampSchema"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "nativeData": {
            "$ref": "#/components/schemas/UTXONativeData"
          }
        }
      },
      "ExecuteSearchBlockResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "UTXONativeData": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "vout": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vout"
            }
          }
        }
      },
      "Destination": {
        "description": "The Destination of this transaction",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          },
          "smartContract": {
            "$ref": "#/components/schemas/SmartContract"
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "destinationId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}",
            "description": "The unique identifiers of the destination",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "OverledgerTransactionResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,40}$",
            "type": "string",
            "maxLength": 40
          },
          "requestId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,36}$",
            "type": "string",
            "maxLength": 36
          },
          "overledgerTransactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-]{1,36}$",
            "type": "string",
            "maxLength": 36
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "transactionHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "transactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "ResourceMonitoringSmartContractEventDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "eventName": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "eventParameters": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "smartContractId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ExtraFields": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "requiredSignatures": {
            "type": "number"
          }
        }
      },
      "ErrorDetails": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "code": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_ ]{1,30}$",
            "type": "string",
            "maxLength": 30
          },
          "description": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "category": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "SmartContractSearchFunctionSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,20}$",
            "type": "string",
            "maxLength": 20
          },
          "inputParameters": {
            "minItems": 0,
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractInputParameterSchema"
            }
          },
          "outputParameters": {
            "minItems": 0,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractOutputParameterSchema"
            }
          }
        }
      },
      "PreparePaymentTransactionRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "urgency": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          },
          "requestDetails": {
            "$ref": "#/components/schemas/PaymentRequestDetailsSchema"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "StatusUpdateMonitoringRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "statusUpdate": {
            "$ref": "#/components/schemas/StatusUpdateSchema"
          }
        }
      },
      "Function": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "functionId": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,30}$",
            "type": "string",
            "maxLength": 30
          },
          "code": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,30}$",
            "type": "string",
            "maxLength": 30
          },
          "name": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "inputParameters": {
            "minItems": 0,
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          },
          "outputParameters": {
            "minItems": 0,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          }
        }
      },
      "MonitorSmartContractRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "callBackURL": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "eventParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitorSmartContractEventParam"
            }
          },
          "eventName": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "smartContractId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "SmartContractEventHistory": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "eventId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,200}$",
            "type": "string",
            "maxLength": 200
          },
          "eventName": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "eventParameters": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9,_ ]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "transactionId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ExecuteSearchTransactionResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "description": "The type of the transaction object returned",
            "type": "string",
            "maxLength": 50
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "timestamp": {
            "format": "date-time",
            "description": "The unix time to read the object from",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "extraFields": {
            "type": "object"
          }
        }
      },
      "AddressBalanceResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "unit": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_ ]{1,10}$",
            "type": "string",
            "maxLength": 10
          },
          "value": {
            "type": "number"
          },
          "addressId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "PrepareSearchSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "SmartContract": {
        "description": "Computer program storage in a DLT system where the outcome is recorded on the distributed ledger",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/Function"
          },
          "detail": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,20}$",
            "type": "string",
            "maxLength": 20
          },
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,20}$",
            "description": "Information on the object type",
            "type": "string",
            "maxLength": 20
          },
          "smartContractId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,44}$",
            "type": "string",
            "maxLength": 44
          },
          "extraFields": {
            "type": "object"
          }
        }
      },
      "CreateSubscriptionRequestSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "ids": {
            "minItems": 0,
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "PrepareSearchResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "gatewayFee": {
            "$ref": "#/components/schemas/Fee"
          },
          "requestId": {
            "description": "The ID assigned to a preparation request in Overledger",
            "type": "string"
          }
        }
      },
      "SubscriptionDeletionResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "subscriptionDetails": {
            "$ref": "#/components/schemas/SubscriptionDetails"
          },
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "subscriptionId": {
            "minLength": 0,
            "pattern": "^[a-z0-9-]{1,24}$",
            "type": "string",
            "maxLength": 24
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "PaymentSchema": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9. ]{1,100}",
            "description": "The amount of a currency",
            "type": "string",
            "maxLength": 100
          },
          "unit": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9 ]{1,5}",
            "description": "The unit of this currency/token",
            "type": "string",
            "maxLength": 5
          }
        }
      },
      "OriginTransferSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "originId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9:]{1,66}$",
            "type": "string",
            "maxLength": 66
          }
        }
      },
      "SmartContractInputParameterSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SmartContractSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/SmartContractFunctionSchema"
          }
        }
      },
      "Fee": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "minLength": 0,
            "pattern": "^[0-9. ]{1,100}$",
            "description": "The amount of a currency",
            "type": "string",
            "maxLength": 100
          },
          "unit": {
            "minLength": 0,
            "pattern": "^[a-zA-Z_ ]{1,10}$",
            "description": "The unit of this currency/token",
            "type": "string",
            "maxLength": 10
          }
        }
      },
      "SmartContractSearchRequestDetails": {
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "destination": {
            "minItems": 0,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartContractSearchDestinationSchema"
            }
          }
        }
      },
      "ResourceMonitoringSubscription": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "callbackUrl": {
            "minLength": 0,
            "pattern": "^http[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "subscriptionId": {
            "minLength": 0,
            "pattern": "^[a-z0-9-]{1,24}$",
            "type": "string",
            "maxLength": 24
          },
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9-_ ]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "PaymentRequestDetailsSchema": {
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "overledgerSigningType": {
            "minLength": 0,
            "pattern": "^[A-Za-z- ]{1,30}",
            "type": "string",
            "maxLength": 30
          },
          "origin": {
            "minItems": 0,
            "maxItems": 100,
            "description": "Where is this transaction coming from",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OriginPaymentSchema"
            }
          },
          "destination": {
            "minItems": 0,
            "maxItems": 100,
            "description": "The Destination of this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DestinationPaymentSchema"
            }
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,150}$",
            "description": "Any text-based element of the data payload",
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "UTXOSmartContract": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "extraFields": {
            "$ref": "#/components/schemas/ExtraFields"
          }
        }
      },
      "Error": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "maximum": 30,
            "type": "integer",
            "minimum": 0
          },
          "service": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "message": {
            "minLength": 0,
            "pattern": "^[\\S\\s]{1,300}$",
            "type": "string",
            "maxLength": 300
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ResourceMonitoringAddressSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "addressMonitoringDetails": {
            "$ref": "#/components/schemas/ResourceMonitoringAddressDetails"
          },
          "resourceMonitoring": {
            "$ref": "#/components/schemas/ResourceMonitoringDetails"
          }
        }
      },
      "SmartContractReadSchema": {
        "description": "Computer program storage in a DLT system where the outcome is recorded on the distributed ledger",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/SmartContractReadFunctionSchema"
          },
          "smartContractId": {
            "type": "string"
          }
        }
      },
      "SubscriptionDetailsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "PrepareTransactionResponse": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "gatewayFee": {
            "$ref": "#/components/schemas/Fee"
          },
          "requestId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]{1,36}$",
            "description": "The ID assigned to a preparation request in Overledger",
            "type": "string",
            "maxLength": 36
          },
          "dltFee": {
            "$ref": "#/components/schemas/Fee"
          },
          "nativeData": {
            "type": "object"
          }
        }
      },
      "DestinationTransferSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/TransferSchema"
          },
          "destinationId": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,100}$",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "UTXODestination": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "smartContract": {
            "$ref": "#/components/schemas/UTXOSmartContract"
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "destinationId": {
            "type": "string"
          }
        }
      },
      "BlockHash": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "value": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9]{1,150}$",
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "SmartContractSearchSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/SmartContractSearchFunctionSchema"
          },
          "smartContractId": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,44}$",
            "type": "string",
            "maxLength": 44
          }
        }
      },
      "Parameter": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,20}$",
            "type": "string",
            "maxLength": 20
          },
          "value": {
            "type": "object"
          },
          "key": {
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]{1,20}$",
            "type": "string",
            "maxLength": 20
          }
        }
      },
      "BlockSize": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "value": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_]{1,50}$",
            "type": "string",
            "maxLength": 50
          },
          "key": {
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9_]{1,50}$",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "Location": {
        "description": "Unique reference to the ledger on a particular ledger network (optionally accessed from a particular node)",
        "additionalProperties": true,
        "type": "object",
        "required": [
          "network",
          "technology"
        ],
        "properties": {
          "technology": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "description": "The technology used by the desired network",
            "type": "string",
            "maxLength": 30
          },
          "network": {
            "minLength": 0,
            "pattern": "^[A-Za-z ]{1,30}",
            "description": "The network that the ledger resides on",
            "type": "string",
            "maxLength": 30
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2_Security_Scheme": {
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.sandbox.overledger.io/",
            "scopes": {
              "aws.cognito.signin.user.admin": "Grants access to all the User Pool APIs that can be accessed using access tokens alone.",
              "phone": "Grants returning the phone claim, which contains the user's phone number, and phone_number_verified.",
              "openid": "Grants an application to use OIDC to verify the user's identity.",
              "profile": "Grants returning basic profile information.",
              "overledger/read.scope": "Grants read access to Overledger.",
              "email": "Grants returning the email claim, which contains the user's email address, and email_verified."
            }
          }
        },
        "description": "This API uses OAuth 2 with the Client Credential grant flow.",
        "type": "oauth2"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.overledger.io/"
    }
  ],
  "openapi": "3.0.1",
  "paths": {
    "/v2/preparation/search/smartcontract": {
      "post": {
        "summary": "Prepare a read of a smart contract on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSmartContractRequestSchema"
              },
              "examples": {
                "Smart Contract Search": {
                  "summary": "Smart Contract Search",
                  "description": "Smart Contract Search",
                  "value": {
                    "requestDetails": {
                      "destination": [
                        {
                          "smartContract": {
                            "function": {
                              "name": "balanceOf",
                              "inputParameters": [
                                {
                                  "type": "address",
                                  "value": "0x8917cf2A57DF39D311a96c53FCCA76dAFB25392B"
                                }
                              ],
                              "outputParameters": [
                                {
                                  "type": "uint256"
                                }
                              ]
                            },
                            "smartContractId": "0xF9cd6C86992Fce1481dBc4bDB7E1b101c1e8cEE2"
                          }
                        }
                      ]
                    },
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Returns a request ID for executing a smart contract read on Ethereum.",
        "operationId": "prepareSmartContractQueryRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Smart Contract Search"
        ]
      }
    },
    "/v2/execution/search/address/balance": {
      "post": {
        "summary": "Execute a search for an address balance on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs",
        "operationId": "executePreparedSearchRequestAddressBalance",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSearchBalanceResponse"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "balances": [
                        {
                          "unit": "ETH",
                          "value": 4.9971911695538545,
                          "addressId": "0x650A87cfB9165C9F4Ccc7B971D971f50f753e761"
                        }
                      ],
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "Address Search"
        ]
      }
    },
    "/v2/execution/search/smartcontract": {
      "post": {
        "summary": "Execute a read of a smart contract on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID and reads the smart contract on Ethereum based on the parameters specified in the prepare request.",
        "operationId": "executePreparedSearchRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSmartContractReadResponseSchema"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "smartContract": {
                        "function": {
                          "functionId": "0x70a08231",
                          "name": "balanceOf",
                          "inputParameters": [
                            {
                              "type": "address",
                              "value": "0x8917cf2A57DF39D311a96c53FCCA76dAFB25392B"
                            }
                          ],
                          "outputParameters": [
                            {
                              "type": "uint256",
                              "value": "141999998900488372232"
                            }
                          ]
                        },
                        "smartContractId": "0xF9cd6C86992Fce1481dBc4bDB7E1b101c1e8cEE2"
                      },
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "Smart Contract Search"
        ]
      }
    },
    "/v2/execution/search/address/sequence": {
      "post": {
        "summary": "Execute a search for an address sequence on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s",
        "operationId": "executePreparedSearchRequestAddressSequence",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSearchSequenceResponse"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "sequence": "1848",
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "addressId": "0x650A87cfB9165C9F4Ccc7B971D971f50f753e761"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "Address Search"
        ]
      }
    },
    "/v2/execution/search/transaction": {
      "post": {
        "summary": "Execute a search for a transaction on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID and searches for the transaction on the requested DLT",
        "operationId": "executePreparedSearchRequestTransaction",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSearchTransactionResponse"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "type": "PAYMENT",
                      "transaction": {
                        "signature": [
                          "0xb04ffb9b699a1cf1c9d63d07b16a250ba7d682b07556a4267296a09a0e112cd2",
                          "0x76352abdb2eca00e0390ba70ec822dd6cf081dff302645da04cc5c60c9ccc685",
                          "42"
                        ],
                        "origin": [
                          {
                            "sequence": "1143",
                            "originId": "0x650a87cfb9165c9f4ccc7b971d971f50f753e761"
                          }
                        ],
                        "destination": [
                          {
                            "destinationId": "0xb3ea4d180f31b4000f2fbcc58a085ef2ffd5a763"
                          }
                        ],
                        "totalPaymentAmount": [
                          {
                            "amount": "0",
                            "unit": "ETH"
                          }
                        ],
                        "message": "OVL SDK Test",
                        "transactionId": "0x124b79341eac1dbe05ad66508d0865ef2b64a2af05087457ea015af1e8b34737",
                        "nativeData": {
                          "gasRaw": "0x13880",
                          "blockHash": "0xf4291d3de8b16499523eea3b164d69918d157a4d2d3a5e6995d7d9e4baf4702c",
                          "transactionIndexRaw": "0x2",
                          "valueRaw": "0x0",
                          "transactionIndex": 2,
                          "nonce": 1143,
                          "input": "0x4f564c2053444b2054657374",
                          "gasPriceRaw": "0x1dcd65000",
                          "r": "0xb04ffb9b699a1cf1c9d63d07b16a250ba7d682b07556a4267296a09a0e112cd2",
                          "s": "0x76352abdb2eca00e0390ba70ec822dd6cf081dff302645da04cc5c60c9ccc685",
                          "blockNumberRaw": "0x99bff5",
                          "nonceRaw": "0x477",
                          "chainId": 3,
                          "v": 42,
                          "blockNumber": 10076149,
                          "gas": 80000,
                          "from": "0x650a87cfb9165c9f4ccc7b971d971f50f753e761",
                          "to": "0xb3ea4d180f31b4000f2fbcc58a085ef2ffd5a763",
                          "value": 0,
                          "hash": "0x124b79341eac1dbe05ad66508d0865ef2b64a2af05087457ea015af1e8b34737",
                          "gasPrice": 8000000000
                        }
                      },
                      "timestamp": {
                        "nano": 807000000,
                        "epochSecond": 1618910
                      },
                      "status": {
                        "code": "TXN1003",
                        "description": "Transaction successful",
                        "message": "Transaction successful",
                        "value": "SUCCESSFUL",
                        "timestamp": "2021-04-20T09:28:28Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "400",
                      "description": "java.lang.IllegalArgumentException: Invalid UUID string: 1",
                      "category": "Constraint Violations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "Transaction Search"
        ]
      }
    },
    "/v2/resourcemonitoring/smartcontractevents": {
      "get": {
        "summary": "Retrieve a list of smart contracts being monitored",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID",
        "operationId": "getListOfSmartContractEvents",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmartContractMonitoringSchema"
                  }
                },
                "examples": {
                  "List Resource Monitoring": {
                    "description": "List Resource Monitoring",
                    "value": [
                      {
                        "resourceMonitoring": {
                          "resourceMonitoringId": "808697d9-9383-4841-9d2c-e7880850116a",
                          "location": {
                            "technology": "Ethereum",
                            "network": "Ropsten"
                          },
                          "type": "Address",
                          "timestamp": "2021-06-09T14:59:15.509Z",
                          "status": {
                            "code": "MON1001",
                            "description": "Resource Monitoring Inactive",
                            "message": "MON1001 - Resource Monitoring is currently paused.",
                            "value": "INACTIVE",
                            "timestamp": "2021-06-09T14:59:15.509Z"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      }
    },
    "/v2/preparation/search/utxo/{utxoId}": {
      "post": {
        "summary": "Prepare Search for a UTXO State.",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSchema"
              },
              "examples": {
                "UTXO Transaction Search": {
                  "summary": "UTXO Transaction Search",
                  "description": "UTXO Transaction Search",
                  "value": {
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Returns a request ID for executing a search for the status ofa UTXO on UTXO based DLT’s",
        "operationId": "prepareSearchUTXOState",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-: ]{1,100}$",
              "type": "string",
              "maxLength": 100
            },
            "in": "path",
            "name": "utxoId",
            "required": true
          }
        ],
        "tags": [
          "UTXO Status Search"
        ]
      }
    },
    "/v2/execution/search/block": {
      "post": {
        "summary": "Execute a search for a block on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID and searches for the block on the requested DLT based on the parameters specified in the prepare request",
        "operationId": "executePreparedSearchRequestBlock",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSearchBlockResponse"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "block": {
                        "blockId": "0xb67dd34c0182e3da1db437914dcac38349a4565177ed1fabf2bf430a10a51002",
                        "number": 10463066,
                        "transactionIds": [
                          "0x23f735f928b965338b6106d3a5498d1c917636356cde5eff387be9057a89600a",
                          "0x5be54c39aa333c179780835e71d0aa53ace947e87cbe773f78e01d3ec1d3c2f5",
                          "0xa1d2ffb6fce00c2a88d3ce6009ba2a0292be0833b1a5b44dff29f4f45bf8eb55",
                          "0x24772822aafbecdc13d8b7beb47409c4aedd51d2085f613285c5170b452589b4",
                          "0xe6cbe261766fd39b97a804010ce0ab4a41343435669d0034bfbe4ca148a37a53",
                          "0xf3858d514aecba7269053073f8d8c0c60e28caf5d57862283284e65000d97402",
                          "0x411c05394cc2945dc5db398caa99f1fb298d9e00f169aa951c95df44cf2faec5",
                          "0x035be53f62cf734f9d5b5e24865bdb887972c0eb4fb969a07ddc73548cfd073f",
                          "0x8e652054607f55fb37662e92131f89a4cfe47a434c35dc1773be7617d490e3a0",
                          "0xc522af58fe60a117f253885e25002623e914691ae3ea690a0d001508cb12c27b",
                          "0x4bf99363f2b761178841dfd81d5b0a8685fc93ba79971f04b3985e182207a0dc",
                          "0x84aede3ee9d86ed657af280ed50f81869e93ea5f506460f2b20014cd8b31dc87",
                          "0x7a2553921c527b764e10ded79f0776f982ba655f5a95a8249579a5fe1dd06454",
                          "0x43b7b1e933a7f96bb6071d572b42d2383638a77a4880873d11e4b714cf985242",
                          "0x855e6186a26e5e135de3749379e10e5801174bb5bf731545b468f50c98368b8f",
                          "0x1610909fc0115cfd5f529f7203046897c5efd4edafac704c0fe82ab05a4d546e",
                          "0x4694fbd19645f7f33d9ec20ff3cf94bbc65faaf6af7bcb1661e19055497ba77e",
                          "0xfac3052e8325e6e28b09a787fc10c9f6eba025aa264b9cb3162c269878053bd2",
                          "0x640b80e30e5d52672a7da74ccc3e93ee415e227829d85745b602642ba2361b2e",
                          "0xe9ac6eefeb5e114e11c83a1e8efa014166078514ce80d331f2702ad2473e6a6d"
                        ],
                        "size": [
                          {
                            "type": "MEMORY",
                            "value": "51701"
                          },
                          {
                            "type": "COMPUTATION",
                            "value": "5283861"
                          }
                        ],
                        "hashes": [
                          {
                            "type": "PARENT_HASH",
                            "value": "0xc8638744e19f70f5cb3f04b5972ba7a66ba1070ec4fe3ccf7bb82976b1d69407"
                          },
                          {
                            "type": "BLOCK_HASH",
                            "value": "0xb67dd34c0182e3da1db437914dcac38349a4565177ed1fabf2bf430a10a51002"
                          },
                          {
                            "type": "TRANSACTIONS_MERKLE_ROOT",
                            "value": "0xd4ab2a26720b544f65e48aaf7fb8c8a334c9b02c6d8ecb6d205907733d399ff1"
                          },
                          {
                            "type": "STATE_MERKLE_ROOT",
                            "value": "0xb442598a07d4c208757d270d73bb2e61c1885039a6c8e8b06a12a6796dac68b4"
                          },
                          {
                            "type": "TRANSACTION_RECEIPTS_MERKLE_ROOT",
                            "value": "0x8c5000c1da750dc69a4fca3c785d1346224982bfef3b3142cb04f2289fce83bb"
                          }
                        ],
                        "linkedBlocks": {
                          "parent": "0xc8638744e19f70f5cb3f04b5972ba7a66ba1070ec4fe3ccf7bb82976b1d69407",
                          "child": "0x64040d7cf80d6f77dd01537bfb765423908fd2e0d7933a0ef5f10a113cf5b89e"
                        },
                        "numberOfTransactions": 20,
                        "message": "0xdb830302068c4f70656e457468657265756d86312e35312e30826c69",
                        "timestamp": 1624007506,
                        "nativeData": {
                          "logsBloom": "0x01280000010400000000000080004082000000444020400008010100000800100000820000001480000000000000000000000000104200200c0080014820040004060000000840000000000800044060080001084018002000c000008000000802a0800802001082510080000440280800000a0000000000010000120020408000800300030800800044000000410400000004212320802c88008040000060808000000001a000020010000000000000000020022208005000001005000000000000000200c000000400001004805040040000214880001000002200080030002000220800010101020a00000010000004602000000000400021202800080408",
                          "totalDifficulty": 33823156854004820,
                          "receiptsRoot": "0x8c5000c1da750dc69a4fca3c785d1346224982bfef3b3142cb04f2289fce83bb",
                          "extraData": "0xdb830302068c4f70656e457468657265756d86312e35312e30826c69",
                          "transactions": [
                            "0x23f735f928b965338b6106d3a5498d1c917636356cde5eff387be9057a89600a",
                            "0x5be54c39aa333c179780835e71d0aa53ace947e87cbe773f78e01d3ec1d3c2f5",
                            "0xa1d2ffb6fce00c2a88d3ce6009ba2a0292be0833b1a5b44dff29f4f45bf8eb55",
                            "0x24772822aafbecdc13d8b7beb47409c4aedd51d2085f613285c5170b452589b4",
                            "0xe6cbe261766fd39b97a804010ce0ab4a41343435669d0034bfbe4ca148a37a53",
                            "0xf3858d514aecba7269053073f8d8c0c60e28caf5d57862283284e65000d97402",
                            "0x411c05394cc2945dc5db398caa99f1fb298d9e00f169aa951c95df44cf2faec5",
                            "0x035be53f62cf734f9d5b5e24865bdb887972c0eb4fb969a07ddc73548cfd073f",
                            "0x8e652054607f55fb37662e92131f89a4cfe47a434c35dc1773be7617d490e3a0",
                            "0xc522af58fe60a117f253885e25002623e914691ae3ea690a0d001508cb12c27b",
                            "0x4bf99363f2b761178841dfd81d5b0a8685fc93ba79971f04b3985e182207a0dc",
                            "0x84aede3ee9d86ed657af280ed50f81869e93ea5f506460f2b20014cd8b31dc87",
                            "0x7a2553921c527b764e10ded79f0776f982ba655f5a95a8249579a5fe1dd06454",
                            "0x43b7b1e933a7f96bb6071d572b42d2383638a77a4880873d11e4b714cf985242",
                            "0x855e6186a26e5e135de3749379e10e5801174bb5bf731545b468f50c98368b8f",
                            "0x1610909fc0115cfd5f529f7203046897c5efd4edafac704c0fe82ab05a4d546e",
                            "0x4694fbd19645f7f33d9ec20ff3cf94bbc65faaf6af7bcb1661e19055497ba77e",
                            "0xfac3052e8325e6e28b09a787fc10c9f6eba025aa264b9cb3162c269878053bd2",
                            "0x640b80e30e5d52672a7da74ccc3e93ee415e227829d85745b602642ba2361b2e",
                            "0xe9ac6eefeb5e114e11c83a1e8efa014166078514ce80d331f2702ad2473e6a6d"
                          ],
                          "nonce": "13962578926352311470",
                          "miner": "0x635b4764d1939dfacd3a8014726159abc277becc",
                          "difficulty": 1997831755,
                          "number": 10463066,
                          "gasLimit": 8000029,
                          "gasUsed": 5283861,
                          "uncles": [],
                          "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                          "size": 51701,
                          "transactionsRoot": "0xd4ab2a26720b544f65e48aaf7fb8c8a334c9b02c6d8ecb6d205907733d399ff1",
                          "stateRoot": "0xb442598a07d4c208757d270d73bb2e61c1885039a6c8e8b06a12a6796dac68b4",
                          "mixHash": "0xfbbb4da4c5f2bc6c53a220e41a6576e824b6042eca78087b1f32a38edfb244c5",
                          "parentHash": "0xc8638744e19f70f5cb3f04b5972ba7a66ba1070ec4fe3ccf7bb82976b1d69407",
                          "hash": "0xb67dd34c0182e3da1db437914dcac38349a4565177ed1fabf2bf430a10a51002",
                          "timestamp": 1624007506
                        }
                      },
                      "status": {
                        "code": "BLK1003",
                        "description": "Block is confirmed in the blockchain",
                        "message": "Block is successful.",
                        "value": "SUCCESSFUL",
                        "timestamp": "2021-06-18T09:12:47Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "Block Search"
        ]
      }
    },
    "/v2/mdapptransactions": {
      "get": {
        "summary": "Retrieve a list of transactions created by your application in Overledger",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns a list of transactions and the corresponding Overledger Transaction ID your application has created in Overledger. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT",
        "operationId": "getOvlTransactionsByClientId",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OverledgerTransactionResponseSchema"
                  }
                },
                "examples": {
                  "List Overledger Transactions": {
                    "description": "List Overledger Transactions",
                    "value": [
                      {
                        "requestId": "f5023411-20b6-456d-9966-b01dd5fddb32",
                        "overledgerTransactionId": "c73135fb-7264-4183-93e8-b067f03ecda1",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ropsten Testnet"
                        },
                        "transactionId": "0xa9b1529e1f2ebaed7c865b1e24e283f905e0b9cc2a2cbe6ba80b987deb6780db",
                        "status": {
                          "code": "TXN1003",
                          "description": "Transaction successful",
                          "message": "Transaction successful",
                          "value": "SUCCESSFUL",
                          "timestamp": "2021-08-06T16:45:53.496463Z"
                        },
                        "timestamp": "2021-08-06T16:42:18.220242Z"
                      },
                      {
                        "requestId": "a3a091d3-6718-4e77-afb5-0cd3ffc266bf",
                        "overledgerTransactionId": "c849b101-dd64-4100-a809-7812cf64dbcb",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ropsten Testnet"
                        },
                        "transactionId": "0x401ab7fafc12b97d63ec825de6557b8f13b077373e1bb4ded62b4b263c0a2e23",
                        "status": {
                          "code": "TXN1003",
                          "description": "Transaction successful",
                          "message": "Transaction successful",
                          "value": "SUCCESSFUL",
                          "timestamp": "2021-08-06T16:46:23.482390Z"
                        },
                        "timestamp": "2021-08-06T16:43:02.644028Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/mdapptransaction/c849b101-dd64-4100-a809-7812cf64dbcb",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "required": false
          },
          {
            "schema": {
              "default": 25,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "length",
            "required": false
          }
        ],
        "tags": [
          "mDapp Transaction Query"
        ]
      }
    },
    "/v2/execution/transaction": {
      "post": {
        "summary": "Execute a transaction on the DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteTransactionRequest"
              },
              "examples": {
                "Execute Transaction": {
                  "summary": "Execute Transaction",
                  "description": "Execute Transaction",
                  "value": {
                    "requestId": "79763168-a4f9-42bf-9f10-2e08491136a7",
                    "signed": "0xf8a9398501ef4f86e682a0c294f9cd6c86992fce1481dbc4bdb7e1b101c1e8cee280b844a9059cbb000000000000000000000000d8b31b65878a6b1a6caf9f4819c1a42d68a7a11600000000000000000000000000000000000000000000000000038d7ea4c6800029a088680bffd2eb74053e968ac8bcd1f76beaa61b353d8616a8cc559e57685080bea07a77b7591f09290fbb9cda5263471e8a9ca46f4c7b30d6a4885e583771d809f5"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Takes a request ID and submits a signed transaction to the requested DLT.",
        "operationId": "executePreparedRequestTransaction",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteTransactionResponse"
                },
                "examples": {
                  "Bitcoin": {
                    "description": "Bitcoin",
                    "value": {
                      "urgency": "normal",
                      "requestId": "5d4935ae-d395-4cc7-a7e6-3777127cfd09",
                      "overledgerTransactionId": "ac71c2f4-ab67-434f-b83a-4514ce10847a",
                      "location": {
                        "technology": "Bitcoin",
                        "network": "Testnet"
                      },
                      "type": "payment",
                      "transactionId": "320034aa1ea43541fcdcfa65ef7e127c19935b532bc59f92ad227370011d9cef",
                      "status": {
                        "code": "TXN1002",
                        "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                        "message": "Transaction is pending.",
                        "value": "PENDING",
                        "timestamp": "2021-09-16T11:50:15.862784Z"
                      }
                    }
                  },
                  "Ethereum": {
                    "description": "Ethereum",
                    "value": {
                      "urgency": "normal",
                      "requestId": "012c6f4e-926e-47b8-b3f0-acfa056cd017",
                      "overledgerTransactionId": "1f50d3ce-6ede-4540-8f49-1718d9e4a96a",
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "type": "PAYMENT",
                      "transactionId": "0x6c497169f22fa420bfb96669960c15ab53caf4d9162f2c0d0a3ff29121773597",
                      "status": {
                        "code": "TXN1002",
                        "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                        "message": "Transaction is pending.",
                        "value": "PENDING",
                        "timestamp": "2021-09-16T11:43:24.128633Z"
                      }
                    }
                  },
                  "Smart Contract Invoke": {
                    "description": "Smart Contract Invoke",
                    "value": {
                      "urgency": "normal",
                      "requestId": "609e2199-db0c-4528-baf3-7392f026dae2",
                      "overledgerTransactionId": "b5c62bda-58cb-47c6-9b21-971f55030881",
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "type": "Contract Invoke",
                      "transactionId": "0x5a9b7f8d44ad0bdddf58705cf886b501d6a5a017729d2ca96765a3421e9e84db",
                      "status": {
                        "code": "TXN1002",
                        "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                        "message": "Transaction is pending.",
                        "value": "PENDING",
                        "timestamp": "2021-09-16T10:23:45.043376Z"
                      }
                    }
                  },
                  "XRP Ledger": {
                    "description": "XRP Ledger",
                    "value": {
                      "urgency": "normal",
                      "requestId": "df84a5d4-23ea-4390-96a6-965053e1ce04",
                      "overledgerTransactionId": "9c7cfa58-e07f-4843-ac75-1b356063da9f",
                      "location": {
                        "technology": "XRP Ledger",
                        "network": "Testnet"
                      },
                      "type": "payment",
                      "transactionId": "8FA814AB243AC4ABB170C4ED3069F4364CA3B0E092C6767192A9D1C8BDE2B67C",
                      "status": {
                        "code": "TXN1002",
                        "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                        "message": "The transaction was applied. Only final in a validated ledger.",
                        "value": "PENDING",
                        "timestamp": "2021-09-16T11:46:57Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Create Transaction"
        ]
      }
    },
    "/v2/webhook/subscription/{subscriptionId}": {
      "patch": {
        "summary": "Update a specific subscription created by your application",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequestSchema"
              },
              "examples": {
                "Update Subscription": {
                  "summary": "Update Subscription",
                  "description": "Update Subscription",
                  "value": {
                    "statusUpdate": {
                      "value": "ACTIVE"
                    },
                    "callbackUrl": "https://newcallbackUrl/endpoint"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL",
        "operationId": "updateSubscription",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionUpdateResponse"
                },
                "examples": {
                  "200 Update Success": {
                    "description": "200 Update Success",
                    "value": {
                      "subscriptionDetails": {
                        "ids": [
                          "73bdc298-525e-4848-9510-5f12a6b43224"
                        ],
                        "status": {
                          "code": "SUB1001",
                          "description": "SUB1001",
                          "message": "Subscription existed but is not currently active. Currently only monitoring is in place.",
                          "value": "TRACK ONLY",
                          "timestamp": "2021-09-14T08:49:38.741488Z"
                        }
                      },
                      "callbackUrl": "https://test-post.free.beeceptor.com/comments",
                      "subscriptionId": "61406222b65cf749ea893c1a",
                      "type": "resourceMonitoringId"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "You do not currently have any subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "404 Not Found": {
                    "description": "404 Not Found",
                    "value": {
                      "code": "SUB2403",
                      "description": "SUB2403 - Subscription 61406222b65cf749ea893c1 does not exist.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "405 Method is not allowed": {
                    "description": "405 Method is not allowed",
                    "value": {
                      "code": "SUB2404",
                      "description": " SUB2404 - Status cannot be changed from ACTIVE to INACTIVE.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/webhook/subscription/61406222b65cf749ea893c1a",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T10:40:57.801+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-z0-9-]{1,24}$",
              "type": "string",
              "maxLength": 24
            },
            "in": "path",
            "name": "subscriptionId",
            "required": true
          }
        ],
        "tags": [
          "Manage Subscription"
        ]
      },
      "delete": {
        "summary": "Remove a subscription created by your application",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL",
        "operationId": "deleteSubscription",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDeletionResponse"
                },
                "examples": {
                  "200 Delete Successful": {
                    "description": "200 Delete Successful",
                    "value": {
                      "subscriptionDetails": {
                        "ids": [
                          "3606e1a2-ae85-4676-8fb3-40917cb63bd4"
                        ],
                        "status": {
                          "code": "SUB1002",
                          "description": "Subscription Deleted.",
                          "message": "Subscription has been deleted and will no longer send updates to the relevant callback URL",
                          "value": "DELETED",
                          "timestamp": "2021-09-15T09:15:40.530993Z"
                        }
                      },
                      "callbackUrl": "https://test-post.free.beeceptor.com/comments",
                      "subscriptionId": "6141b9bcb65cf749ea893c45",
                      "type": "resourceMonitoringId"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "You do not currently have any subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "404 Not Found": {
                    "description": "404 Not Found",
                    "value": {
                      "code": "SUB2403",
                      "description": "SUB2403 - Subscription 6141b9bcb65cf749ea893c45 does not exist.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/webhook/subscription/61406222b65cf749ea893c1a",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T10:40:57.801+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-z0-9-]{1,24}$",
              "type": "string",
              "maxLength": 24
            },
            "in": "path",
            "name": "subscriptionId",
            "required": true
          }
        ],
        "tags": [
          "Manage Subscription"
        ]
      }
    },
    "/v2/preparation/search/address/sequence/{addressId}": {
      "post": {
        "summary": "Prepare Search for an Address Sequence.",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSchema"
              },
              "examples": {
                "Address Sequence Search": {
                  "summary": "Address Sequence Search",
                  "description": "Address Sequence Search",
                  "value": {
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Perform an address sequence search on the requested DLT.Returns a request ID to execute",
        "operationId": "prepareAddressSequenceSearchRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9]{1,100}$",
              "type": "string",
              "maxLength": 100
            },
            "in": "path",
            "name": "addressId",
            "required": true
          }
        ],
        "tags": [
          "Address Search"
        ]
      }
    },
    "/v2/preparation/transaction": {
      "post": {
        "summary": "Prepare a DLT transaction for signing",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreparePaymentTransactionRequestSchema"
              },
              "examples": {
                "ERC20 Payment": {
                  "summary": "ERC20 Payment",
                  "description": "ERC20 Payment",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "overledgerSigningType": "overledger-javascript-library",
                      "origin": [
                        {
                          "originId": "0x08f0C8451eC8283638F35D863DfFD8c1e1b3E39d"
                        }
                      ],
                      "destination": [
                        {
                          "payment": {
                            "amount": "0.001",
                            "unit": "QNT"
                          },
                          "destinationId": "0xd8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                        }
                      ],
                      "message": "Example message here"
                    },
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    },
                    "type": "PAYMENT"
                  }
                },
                "ERC721 Transfer": {
                  "summary": "ERC721 Transfer",
                  "description": "ERC721 Transfer",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "overledgerSigningType": "overledger-javascript-library",
                      "origin": [
                        {
                          "originId": "0x08f0C8451eC8283638F35D863DfFD8c1e1b3E39d"
                        }
                      ],
                      "destination": [
                        {
                          "transfer": {
                            "tokenId": "6",
                            "tokenName": "QNTNFT"
                          },
                          "destinationId": "0x8917cf2A57DF39D311a96c53FCCA76dAFB25392B"
                        }
                      ],
                      "message": "Example message here"
                    },
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    },
                    "type": "Transfer"
                  }
                },
                "Bitcoin": {
                  "summary": "Bitcoin Payment",
                  "description": "Bitcoin",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "overledgerSigningType": "overledger-javascript-library",
                      "origin": [
                        {
                          "originId": "3d6e8f9904f53b29fd0791b89ed0cb460485f359808f25f65b35beb8de15a47e:0"
                        }
                      ],
                      "destination": [
                        {
                          "payment": {
                            "amount": "0.01718383",
                            "unit": "BTC"
                          },
                          "destinationId": "miArbiuPSMbyZZbetikbkauxDu8Y7ZDhX1"
                        }
                      ],
                      "message": "sample Message"
                    },
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    },
                    "type": "payment"
                  }
                },
                "Ethereum": {
                  "summary": "Ethereum Payment",
                  "description": "Ethereum",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "overledgerSigningType": "overledger-javascript-library",
                      "origin": [
                        {
                          "originId": "0x03B651d2251eA03cf3ceD600E3B4948303A94BE6"
                        }
                      ],
                      "destination": [
                        {
                          "payment": {
                            "amount": "0.00001",
                            "unit": "ETH"
                          },
                          "destinationId": "0xfD218E9A20400535ffaa8FAe54D07d375B3A3827"
                        }
                      ],
                      "message": "sample Message"
                    },
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    },
                    "type": "PAYMENT"
                  }
                },
                "Smart Contract Invoke": {
                  "summary": "Smart Contract Invoke",
                  "description": "Smart Contract Invoke",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "origin": [
                        {
                          "originId": "0x08f0C8451eC8283638F35D863DfFD8c1e1b3E39d"
                        }
                      ],
                      "destination": [
                        {
                          "smartContract": {
                            "function": {
                              "name": "transfer",
                              "inputParameters": [
                                {
                                  "type": "address",
                                  "value": "0xd8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                                },
                                {
                                  "type": "uint256",
                                  "value": "1000000000000000"
                                }
                              ]
                            }
                          },
                          "payment": {
                            "amount": "0.00",
                            "unit": "ETH"
                          },
                          "destinationId": "0xF9cd6C86992Fce1481dBc4bDB7E1b101c1e8cEE2"
                        }
                      ]
                    },
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    },
                    "type": "Contract Invoke"
                  }
                },
                "XRP Ledger": {
                  "summary": "XRP Ledger Payment",
                  "description": "XRP Ledger",
                  "value": {
                    "urgency": "normal",
                    "requestDetails": {
                      "overledgerSigningType": "overledger-javascript-library",
                      "origin": [
                        {
                          "originId": "rhTa8RGotyJQAW8sS2tFVVfvcHYXaps9hC"
                        }
                      ],
                      "destination": [
                        {
                          "payment": {
                            "amount": "1",
                            "unit": "XRP"
                          },
                          "destinationId": "rKoGTTkPefCuQR31UHsfk9jKnrQHz6LtKe"
                        }
                      ],
                      "message": "sample Message"
                    },
                    "location": {
                      "technology": "XRP Ledger",
                      "network": "Testnet"
                    },
                    "type": "payment"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Transforms a transaction request into a payload ready for signing for the requested DLT and returns a request ID for executing. Supported transaction types in this release are “Payment” (to send payments) and “Smart Contract Invoke” (to invoke arbitrary smart contract functions)",
        "operationId": "prepareTransactionRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareTransactionResponse"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "e566fab4-141d-445e-8c3c-e936c553cc99",
                      "dltFee": {
                        "amount": "0.000061839000453486",
                        "unit": "ETH"
                      },
                      "nativeData": {
                        "data": "0xa9059cbb000000000000000000000000d8b31b65878a6b1a6caf9f4819c1a42d68a7a11600000000000000000000000000000000000000000000000000038d7ea4c68000",
                        "chainId": 3,
                        "gas": "41226",
                        "to": "0xF9cd6C86992Fce1481dBc4bDB7E1b101c1e8cEE2",
                        "nonce": 122,
                        "value": "0",
                        "gasPrice": "1500000011"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04036",
                      "description": "Technology data object is required and must be either Ethereum, XRP Ledger or Bitcoin.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Create Transaction"
        ]
      }
    },
    "/v2/resourcemonitoring/address": {
      "post": {
        "summary": "Monitor an address for incoming and outgoing transactions",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressMonitoringRequestSchema"
              },
              "examples": {
                "Monitor Address": {
                  "summary": "Monitor Address",
                  "description": "Monitor Address",
                  "value": {
                    "callBackURL": "https://callbackurl/endpoint",
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten"
                    },
                    "addressId": "0xd8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Overledger creates a tracking record for the given address and records information each time the given address receives or sends transactions on the DLT",
        "operationId": "resourceMonitoringAddress",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressMonitoringResponseSchema"
                },
                "examples": {
                  "Create Resource Monitoring": {
                    "description": "Create Resource Monitoring",
                    "value": {
                      "subscriptionDetails": {
                        "ids": [
                          "42c2452b-6af9-4238-aacf-4669864cd879"
                        ],
                        "status": {
                          "code": "SUB1000",
                          "description": "Subscription Successful.",
                          "message": "Subscription has been set up successfully and updates will be sent to the relevant callback URL.",
                          "value": "ACTIVE",
                          "timestamp": "2021-09-22T11:24:47.082521Z"
                        }
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "42c2452b-6af9-4238-aacf-4669864cd879",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ropsten"
                        },
                        "type": "Address",
                        "timestamp": "2021-09-22T11:24:46.530619Z",
                        "status": {
                          "code": "MON1000",
                          "description": "Resource Monitoring Successful",
                          "message": "MON1000 - Resource Monitoring has been set up successfully.",
                          "value": "ACTIVE",
                          "timestamp": "2021-09-22T11:24:47.176055Z"
                        }
                      },
                      "subscription": {
                        "callbackUrl": "https://test-post.free.beeceptor.com/comments",
                        "subscriptionId": "614b127f60a15b6def675af3",
                        "type": "resourceMonitoringId"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Monitor a Resource"
        ]
      }
    },
    "/v2/preparation/nativetransaction": {
      "post": {
        "summary": "Prepare a DLT native transaction",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareNativeTransactionRequestSchema"
              },
              "examples": {
                "Native Transaction": {
                  "summary": "Native Transaction",
                  "description": "Native Transaction",
                  "value": {
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ropsten Testnet"
                    },
                    "type": "Native Transaction"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Allows advanced developers to submit their own DLT native transactions via Overledger. Returns a request ID for executing a DLT native transaction on the requested DLT",
        "operationId": "prepareNativeTransaction",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Create Transaction"
        ]
      }
    },
    "/v2/preparation/search/address/balance/{addressId}": {
      "post": {
        "summary": "Prepare Search for an Address Balance.",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSchema"
              },
              "examples": {
                "Address Balance Search": {
                  "summary": "Address Balance Search",
                  "description": "Address Balance Search",
                  "value": {
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Perform an address balance search on the requested DLT. Returns a request ID to execute",
        "operationId": "prepareAddressBalanceSearchRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9]{1,100}$",
              "type": "string",
              "maxLength": 100
            },
            "in": "path",
            "name": "addressId",
            "required": true
          }
        ],
        "tags": [
          "Address Search"
        ]
      }
    },
    "/v2/resourcemonitoring": {
      "get": {
        "summary": "Retrieve a list of all resources being monitored",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID",
        "operationId": "getListOfResources",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmartContractMonitoringSchema"
                  }
                },
                "examples": {
                  "List Resource Monitoring": {
                    "description": "List Resource Monitoring",
                    "value": [
                      {
                        "resourceMonitoring": {
                          "resourceMonitoringId": "808697d9-9383-4841-9d2c-e7880850116a",
                          "location": {
                            "technology": "Ethereum",
                            "network": "Ropsten"
                          },
                          "type": "Address",
                          "timestamp": "2021-06-09T14:59:15.509Z",
                          "status": {
                            "code": "MON1001",
                            "description": "Resource Monitoring Inactive",
                            "message": "MON1001 - Resource Monitoring is currently paused.",
                            "value": "INACTIVE",
                            "timestamp": "2021-06-09T14:59:15.509Z"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      }
    },
    "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}": {
      "patch": {
        "summary": "Update the monitoring status of a smart contract",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateMonitoringRequestSchema"
              },
              "examples": {
                "Update Monitoring": {
                  "summary": "Update Monitoring",
                  "description": "Update Monitoring",
                  "value": {
                    "statusUpdate": {
                      "value": "INACTIVE"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract",
        "operationId": "updateEventMonitoring",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContractMonitoringSchema"
                },
                "examples": {
                  "Update Monitoring": {
                    "description": "Update Monitoring",
                    "value": {
                      "smartContractEventMonitoringDetails": {
                        "eventName": "mul",
                        "eventParameters": "0xc8a4ac9cf5aac391a07a9bdc2c522f2e824978425be99588f97394814d127214",
                        "smartContractId": "0x8681d54E454377451D9c6928538DB544Caa65CDf"
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "27a9dba9-bd0d-4d97-8aa2-373d9c5313c8",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ethereum Ropsten Testnet"
                        },
                        "type": "Smart Contract Event",
                        "timestamp": "2021-09-22T12:36:40.050Z",
                        "status": {
                          "code": "MON1001",
                          "description": "Resource Monitoring Inactive.",
                          "message": "MON1001 - Resource Monitoring is currently paused.",
                          "value": "INACTIVE",
                          "timestamp": "2021-09-22T12:40:11.910117Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      },
      "get": {
        "summary": "Retrieve recorded updates for a specific monitored smart contract",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID",
        "operationId": "getMonitoredSmartContractEventDetails",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContractMonitoringDetailsSchema"
                },
                "examples": {
                  "Get Resource Monitoring Details": {
                    "description": "Get Resource Monitoring Details",
                    "value": {
                      "smartContractEventHistory": [],
                      "smartContractEventDetails": {
                        "eventName": "mul",
                        "eventParameters": "0xc8a4ac9cf5aac391a07a9bdc2c522f2e824978425be99588f97394814d127214",
                        "smartContractId": "0x8781d54e454377451D9C6928538Db544Caa65CDf"
                      },
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ethereum Ropsten Testnet"
                      },
                      "type": "Smart Contract Event",
                      "status": {
                        "code": "MON1000",
                        "description": "Resource Monitoring Successful",
                        "message": "MON1000 - Resource Monitoring has been set up successfully.",
                        "value": "ACTIVE",
                        "timestamp": "2021-09-15T15:09:24.279Z"
                      },
                      "timestamp": "2021-09-22T12:46:19.810922Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      },
      "delete": {
        "summary": "Stop monitoring a smart contract",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID",
        "operationId": "deleteEventMonitoring",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartContractMonitoringSchema"
                },
                "examples": {
                  "Update Monitoring": {
                    "description": "Update Monitoring",
                    "value": {
                      "smartContractEventMonitoringDetails": {
                        "eventName": "mul",
                        "eventParameters": "0xc8a4ac9cf5aac391a07a9bdc2c522f2e824978425be99588f97394814d127214",
                        "smartContractId": "0x8681d54E454377451D9c6928538DB544Caa65CDf"
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "27a9dba9-bd0d-4d97-8aa2-373d9c5313c8",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ethereum Ropsten Testnet"
                        },
                        "type": "Smart Contract Event",
                        "timestamp": "2021-09-22T12:36:40.050Z",
                        "status": {
                          "code": "MON1001",
                          "description": "Resource Monitoring Inactive.",
                          "message": "MON1001 - Resource Monitoring is currently paused.",
                          "value": "INACTIVE",
                          "timestamp": "2021-09-22T12:40:11.910117Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      }
    },
    "/v2/preparation/search/block/{blockId}": {
      "post": {
        "summary": "Prepare Search Block by Block Id.",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSchema"
              },
              "examples": {
                "Block Search": {
                  "summary": "Block Search",
                  "description": "Block Search",
                  "value": {
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Returns a request ID for executing a block search on the requested DLT. Block searches can be prepared based on the Block ID, Block Number or for the latest block at the time",
        "operationId": "prepareSearchBlockByBlockId",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Latest Block": {
                "description": "Search latest block",
                "value": "latest"
              },
              "Number": {
                "description": "Search block by Block ID",
                "value": 54678
              },
              "Block Hash": {
                "description": "Search block by Block Hash",
                "value": "0x1032d0f10fad4a5ada02960f552063e862e952d7d808ecf43b25a4f26d640a56"
              }
            },
            "in": "path",
            "name": "blockId",
            "required": true
          }
        ],
        "tags": [
          "Block Search"
        ]
      }
    },
    "/v2/mdapptransaction/{overledgertransactionid}": {
      "get": {
        "summary": "Retrieve information about a specific transaction created by your application in Overledger",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns information for a specific transaction based on a given Overledger Transaction ID. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT",
        "operationId": "getOvlTransactionByTxId",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverledgerTransactionResponseSchema"
                },
                "examples": {
                  "Overledger Transaction": {
                    "description": "Overledger Transaction",
                    "value": {
                      "clientId": "66vioicl7k3kh99thp3g4vgsl7",
                      "requestId": "a3a091d3-6718-4e77-afb5-0cd3ffc266bf",
                      "overledgerTransactionId": "c849b101-dd64-4100-a809-7812cf64dbcb",
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "transactionHistory": [
                        {
                          "code": "TXN1001",
                          "description": "Transaction created",
                          "message": "The transaction was created. It will be updated to Pending if it is handled succesfully by a connector.",
                          "value": "CREATED",
                          "timestamp": "2021-08-06T16:43:02.644028Z"
                        },
                        {
                          "code": "TXN1002",
                          "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                          "message": "Transaction is pending.",
                          "value": "PENDING",
                          "timestamp": "2021-08-06T16:43:03.106891Z"
                        },
                        {
                          "code": "TXN1003",
                          "description": "Transaction successful",
                          "message": "Transaction successful",
                          "value": "SUCCESSFUL",
                          "timestamp": "2021-08-06T16:46:23.482390Z"
                        }
                      ],
                      "type": "Contract Invoke",
                      "transactionId": "0x401ab7fafc12b97d63ec825de6557b8f13b077373e1bb4ded62b4b263c0a2e23",
                      "status": {
                        "code": "TXN1003",
                        "description": "Transaction successful",
                        "message": "Transaction successful",
                        "value": "SUCCESSFUL",
                        "timestamp": "2021-08-06T16:46:23.482390Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "404 Not Found": {
                    "description": "404 Not Found",
                    "value": {
                      "code": "OTX04001",
                      "description": "Overledger Transaction c849b101-dd64-4100-a809-7812cf64dbcc does not exist.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/mdapptransaction/c849b101-dd64-4100-a809-7812cf64dbcb",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "overledgertransactionid",
            "required": true
          }
        ],
        "tags": [
          "mDapp Transaction Query"
        ]
      }
    },
    "/v2/resourcemonitoring/address/{resourceMonitoringId}": {
      "patch": {
        "summary": "Update the monitoring status of an address",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateMonitoringRequestSchema"
              },
              "examples": {
                "Update Monitoring": {
                  "summary": "Update Monitoring",
                  "description": "Update Monitoring",
                  "value": {
                    "statusUpdate": {
                      "value": "INACTIVE"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address",
        "operationId": "updateResourceMonitoringAddress",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAddressMonitoringSchema"
                },
                "examples": {
                  "Update Resource Monitoring": {
                    "description": "Update Resource Monitoring",
                    "value": {
                      "addressMonitoringDetails": {
                        "addressId": "0xb8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "42c2452b-6af9-4238-aacf-4669864cd879",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ropsten"
                        },
                        "type": "Address",
                        "timestamp": "2021-09-22T11:24:46.530Z",
                        "status": {
                          "code": "MON3001",
                          "description": "Resource Monitoring Inactive.",
                          "message": "MON3001 - Resource Monitoring is currently paused.",
                          "value": "INACTIVE",
                          "timestamp": "2021-09-22T12:15:13.860192Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      },
      "get": {
        "summary": "Retrieve recorded updates for a specific monitored address",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID",
        "operationId": "getMonitoredAddress",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressMonitoringDetailsSchema"
                },
                "examples": {
                  "Get Resource Monitoring": {
                    "description": "Get Resource Monitoring",
                    "value": {
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten"
                      },
                      "addressDetails": {
                        "addressId": "0xb8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                      },
                      "type": "Address",
                      "timestamp": "2021-09-22T12:26:02.671Z",
                      "status": {
                        "code": "MON1000",
                        "description": "Resource Monitoring Successful",
                        "message": "MON1000 - Resource Monitoring has been set up successfully.",
                        "value": "ACTIVE",
                        "timestamp": "2021-09-22T12:26:02.671Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      },
      "delete": {
        "summary": "Stop monitoring an address",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID",
        "operationId": "deleteResourceMonitoringAddress",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResourceMonitoringAddressSchema"
                },
                "examples": {
                  "Delete Resource Monitoring": {
                    "description": "Delete Resource Monitoring",
                    "value": {
                      "addressMonitoringDetails": {
                        "addressId": "0xb8b31B65878a6B1a6cAf9f4819C1A42d68a7A116"
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "42c2452b-6af9-4238-aacf-4669864cd879",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ropsten"
                        },
                        "type": "Address",
                        "timestamp": "2021-09-22T11:24:46.530Z",
                        "status": {
                          "code": "MON3002",
                          "description": "Resource Monitoring Deleted.",
                          "message": "MON3002 - Resource Monitoring has been deleted.",
                          "value": "DELETED",
                          "timestamp": "2021-09-22T12:18:55.175118Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "path",
            "name": "resourceMonitoringId",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      }
    },
    "/v2/resourcemonitoring/addresses": {
      "get": {
        "summary": "Retrieve a list of addresses being monitored",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID",
        "operationId": "getListOfAddresses",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceMonitoringAddressSchema"
                  }
                },
                "examples": {
                  "List Resource Monitoring": {
                    "description": "List Resource Monitoring",
                    "value": [
                      {
                        "resourceMonitoring": {
                          "resourceMonitoringId": "808697d9-9383-4841-9d2c-e7880850116a",
                          "location": {
                            "technology": "Ethereum",
                            "network": "Ropsten"
                          },
                          "type": "Address",
                          "timestamp": "2021-06-09T14:59:15.509Z",
                          "status": {
                            "code": "MON1001",
                            "description": "Resource Monitoring Inactive",
                            "message": "MON1001 - Resource Monitoring is currently paused.",
                            "value": "INACTIVE",
                            "timestamp": "2021-06-09T14:59:15.509Z"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Manage Monitored Resources"
        ]
      }
    },
    "/v2/resourcemonitoring/smartcontractevent": {
      "post": {
        "summary": "Monitor a smart contract for an event",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonitorSmartContractRequestSchema"
              },
              "examples": {
                "Monitor Smart Contract": {
                  "summary": "Monitor Smart Contract",
                  "description": "Monitor Smart Contract",
                  "value": {
                    "callBackURL": "https://test-post.free.beeceptor.com/comments",
                    "eventParams": [
                      {
                        "selectedIntegerLength": "B256",
                        "type": "UINT",
                        "value": "3"
                      },
                      {
                        "selectedIntegerLength": "B256",
                        "type": "UINT",
                        "value": "2"
                      }
                    ],
                    "eventName": "mul",
                    "location": {
                      "technology": "Ethereum",
                      "network": "Ethereum Ropsten Testnet"
                    },
                    "smartContractId": "0x8781d54e454377451D9C6928538Db544Caa65CDf"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Overledger creates a tracking record for the given smart contract and records information each time a transaction on the DLT triggers a specific event",
        "operationId": "trackAndSubscribeEvent",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSmartContractMonitoringSchema"
                },
                "examples": {
                  "Create Smart Contract Monitoring": {
                    "description": "Create Smart Contract Monitoring",
                    "value": {
                      "subscriptionDetails": {
                        "ids": [
                          "27a9dba9-bd0d-4d97-8aa2-373d9c5313c8"
                        ],
                        "status": {
                          "code": "SUB1000",
                          "description": "Subscription Successful.",
                          "message": "Subscription has been set up successfully and updates will be sent to the relevant callback URL.",
                          "value": "ACTIVE",
                          "timestamp": "2021-09-22T12:36:40.652175Z"
                        }
                      },
                      "resourceMonitoring": {
                        "resourceMonitoringId": "27a9dba9-bd0d-4d97-8aa2-373d9c5313c8",
                        "location": {
                          "technology": "Ethereum",
                          "network": "Ethereum Ropsten Testnet"
                        },
                        "status": {
                          "code": "MON1000",
                          "description": "Resource Monitoring Successful",
                          "message": "MON1000 - Resource Monitoring has been set up successfully.",
                          "value": "ACTIVE",
                          "timestamp": "2021-09-22T12:36:40.050260Z"
                        }
                      },
                      "subscription": {
                        "callbackUrl": "https://test-post.free.beeceptor.com/comments",
                        "subscriptionId": "614b235860a15b6def675af8",
                        "type": "resourceMonitoringId"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Monitor a Resource"
        ]
      }
    },
    "/v2/execution/search/utxo": {
      "post": {
        "summary": "Execute a search for UTXO state on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Takes a request ID, searches for the UTXO state and retrieves the details on the requested DLT. This API is only applicable for Bitcoin.",
        "operationId": "executeUTXOPreparedSearchRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteSearchUTXOResponseSchema"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "destination": [
                        {
                          "smartContract": {
                            "detail": "OP_DUP OP_HASH160 1d1b4dca757c6f55eec913b636a8bd377e09e937 OP_EQUALVERIFY OP_CHECKSIG",
                            "type": "pubkeyhash",
                            "extraFields": {
                              "requiredSignatures": 1
                            }
                          },
                          "payment": {
                            "amount": "0.01718653",
                            "unit": "BTC"
                          },
                          "destinationId": "miArbiuPSMbyZZbetikbkauxDu8Y7ZDhX1"
                        }
                      ],
                      "location": {
                        "technology": "Bitcoin",
                        "network": "Bitcoin Testnet"
                      },
                      "timestamp": {
                        "nano": 0,
                        "epochSecond": 1620210761
                      },
                      "status": {
                        "code": "SPENT",
                        "description": "The UTXO has been spent in a transaction that is either in pending or successful status.",
                        "message": "UTXO has been spent.",
                        "value": "UTX1002",
                        "timestamp": "2021-05-05T12:17:02Z"
                      },
                      "nativeData": {
                        "vout": [
                          {
                            "scriptPubKey": {
                              "addresses": [
                                "miArbiuPSMbyZZbetikbkauxDu8Y7ZDhX1"
                              ],
                              "asm": "OP_DUP OP_HASH160 1d1b4dca757c6f55eec913b636a8bd377e09e937 OP_EQUALVERIFY OP_CHECKSIG",
                              "hex": "76a9141d1b4dca757c6f55eec913b636a8bd377e09e93788ac",
                              "type": "pubkeyhash",
                              "reqSigs": 1
                            },
                            "value": 0.01718653,
                            "n": 0
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[A-Za-z0-9-]{1,36}$",
              "type": "string",
              "maxLength": 36
            },
            "in": "query",
            "name": "requestId",
            "required": true
          }
        ],
        "tags": [
          "UTXO Status Search"
        ]
      }
    },
    "/v2/execution/nativetransaction": {
      "post": {
        "summary": "Execute a native transaction on the DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteTransactionRequest"
              },
              "examples": {
                "Execute Native Transaction": {
                  "summary": "Execute Native Transaction",
                  "description": "Execute Native Transaction",
                  "value": {
                    "requestId": "79763168-a4f9-42bf-9f10-2e08491136a7",
                    "signed": "0xf8a9398501ef4f86e682a0c294f9cd6c86992fce1481dbc4bdb7e1b101c1e8cee280b844a9059cbb000000000000000000000000d8b31b65878a6b1a6caf9f4819c1a42d68a7a11600000000000000000000000000000000000000000000000000038d7ea4c6800029a088680bffd2eb74053e968ac8bcd1f76beaa61b353d8616a8cc559e57685080bea07a77b7591f09290fbb9cda5263471e8a9ca46f4c7b30d6a4885e583771d809f5"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Takes a request ID and submits a signed native transaction to the requested DLT",
        "operationId": "executePreparedRequestNativeTransaction",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteTransactionResponse"
                },
                "examples": {
                  "Execute Response": {
                    "description": "Execute Response",
                    "value": {
                      "requestId": "242284e2-e53e-4c28-b74c-e5b2c5fa7399",
                      "overledgerTransactionId": "dded55c2-a0fb-4e7b-8f95-771332c32507",
                      "location": {
                        "technology": "Ethereum",
                        "network": "Ropsten Testnet"
                      },
                      "type": "Native Transaction",
                      "transactionId": "0x05b4b5cf07013acfed5a2ffbfc51c4d16e920cfbcc86d68ed71a3a418b9a110e",
                      "status": {
                        "code": "TXN1002",
                        "description": "The transaction has been successfully broadcasted to the network. The status will next be updated after a sufficient block number has been reached. At this point we can be confident that the transaction will be successful or will have failed.",
                        "message": "Transaction is pending.",
                        "value": "PENDING",
                        "timestamp": "2021-09-16T11:19:57.495855Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "code": "TXN04002",
                      "description": "Request ID 609e2199-db0c-4528-baf3-7392f026dae2 has already been executed.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Create Transaction"
        ]
      }
    },
    "/v2/webhook/subscriptions": {
      "get": {
        "summary": "Retrieve a list of subscriptions created by your application",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "description": "Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application",
        "operationId": "listSubscriptions",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSubscriptionResponseSchema"
                  }
                },
                "examples": {
                  "200 List Subscriptions": {
                    "description": "200 List Subscriptions",
                    "value": [
                      {
                        "subscriptionDetails": {
                          "ids": [
                            "1567837c-cf78-4887-bbbb-ecba6e3ae2d7"
                          ],
                          "status": {
                            "code": "SUB1002",
                            "description": "Subscription Deleted.",
                            "message": "Subscription has been deleted and will no longer send updates to the relevant callback URL",
                            "value": "DELETED",
                            "timestamp": "2021-06-09T15:01:37.782699Z"
                          }
                        },
                        "subscribedTime": "2021-06-09T15:01:37.782Z",
                        "callbackUrl": "https://test-post.free.beeceptor.com/comments",
                        "subscriptionId": "60c0d7d122dcc42f3b485821",
                        "type": "resourceMonitoringId"
                      },
                      {
                        "subscriptionDetails": {
                          "ids": [
                            "ca5b4e1c-55ec-4a3f-9004-d4fb90a2c591"
                          ],
                          "status": {
                            "code": "SUB1002",
                            "description": "Subscription Deleted.",
                            "message": "Subscription has been deleted and will no longer send updates to the relevant callback URL",
                            "value": "DELETED",
                            "timestamp": "2021-07-27T17:06:06.491626Z"
                          }
                        },
                        "subscribedTime": "2021-07-27T17:06:06.491Z",
                        "callbackUrl": "https://fd5c2ca009a99c3542d9d4502a18cb6e.m.pipedream.net",
                        "subscriptionId": "61003cfeb213e26e61a44dc5",
                        "type": "overledgerTransactionId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "204": {
            "description": "You do not currently have any subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "204 No Content": {
                    "description": "204 No Content",
                    "value": "No Content"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/webhook/subscription/61406222b65cf749ea893c1a",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T10:40:57.801+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Manage Subscription"
        ]
      }
    },
    "/v2/preparation/search/transaction": {
      "post": {
        "summary": "Prepare a search for a transaction on a DLT",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSearchSchema"
              },
              "examples": {
                "Transaction Search": {
                  "summary": "Transaction Search",
                  "description": "Transaction Search",
                  "value": {
                    "location": {
                      "technology": "Bitcoin",
                      "network": "Testnet"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Searches for and returns data on transactions on a particular DLT. Returns a request ID for executing a transaction search on the requested DLT",
        "operationId": "prepareSearchRequest",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSearchResponseSchema"
                },
                "examples": {
                  "Prepare Response": {
                    "description": "Prepare Response",
                    "value": {
                      "gatewayFee": {
                        "amount": "0",
                        "unit": "QNT"
                      },
                      "requestId": "13765b06-eaf3-4f02-acb4-b7e9da8b0380"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/preparation/transaction",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T11:26:19.935+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9]{1,100}$",
              "type": "string",
              "maxLength": 100
            },
            "in": "query",
            "name": "transactionId",
            "required": true
          }
        ],
        "tags": [
          "Transaction Search"
        ]
      }
    },
    "/v2/webhook/subscription": {
      "post": {
        "summary": "Create a subscription for a transaction or monitored resource ",
        "security": [
          {
            "OAuth2_Security_Scheme": [
              "overledger/read.scope"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequestSchema"
              },
              "examples": {
                "Create Subscription": {
                  "summary": "Create Subscription",
                  "description": "Create Subscription",
                  "value": {
                    "ids": [
                      "71633eb9-dcda-4a7d-a176-12ac0d0bb076"
                    ],
                    "callbackUrl": "https://callbackurl/endpoint",
                    "type": "resourceMonitoringId"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Creates a subscription to receive status updates for a transaction created in Overledger, or to receive updates each time a transaction happens on the requested DLT for a resource (e.g. address) being monitored, to the requested callback URL.  Subscriptions are created using an Overledger Transaction ID or Resource Monitoring ID",
        "operationId": "subscription",
        "responses": {
          "200": {
            "description": "All good!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSubscriptionResponseSchema"
                  }
                },
                "examples": {
                  "Create Subscription": {
                    "description": "Create Subscription",
                    "value": [
                      {
                        "subscriptionDetails": {
                          "ids": [
                            "3606e1a2-ae85-4676-8fb3-40917cb63bd4"
                          ],
                          "status": {
                            "code": "SUB1000",
                            "description": "Subscription Successful.",
                            "message": "Subscription has been set up successfully and updates will be sent to the relevant callback URL.",
                            "value": "ACTIVE",
                            "timestamp": "2021-09-15T09:15:40.530993Z"
                          }
                        },
                        "subscriptionId": "6141b9bcb65cf749ea893c45"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Something went wrong on your side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "400 Bad Request": {
                    "description": "400 Bad Request",
                    "value": {
                      "code": "SUB04004",
                      "description": "The 'type' field is mandatory and must be either overledgerTransactionId or resourceMonitoringId.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "Not Authorized": {
                    "description": "Not Authorized",
                    "value": {
                      "errors": [
                        {
                          "code": 401,
                          "message": "Not authorised for the access to the endpoint!"
                        }
                      ],
                      "errorCount": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "{id} does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "examples": {
                  "404 Not Found": {
                    "description": "404 Not Found",
                    "value": {
                      "code": "SUB04008",
                      "description": "Monitored Item 3606e1a2-ae85-4676-8fb3-40917cb63bd3 does not exist or has been deleted.",
                      "category": "Validation Error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on our side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorSchema"
                },
                "examples": {
                  "500 Something went wrong on our side": {
                    "description": "500 Something went wrong on our side",
                    "value": {
                      "path": "/v2/webhook/subscription/61406222b65cf749ea893c1a",
                      "error": "Internal Server Error",
                      "message": "No message available",
                      "timestamp": "2021-09-15T10:40:57.801+0000",
                      "status": 500
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "minLength": 0,
              "pattern": "^Bearer [A-Za-z0-9\\-_. ]{1,4096}$",
              "type": "string",
              "maxLength": 4096
            },
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Create Subscription"
        ]
      }
    }
  },
  "info": {
    "x-logo": {
      "url": "https://developer.quant.network/images/quant_logo_white.png"
    },
    "description": "Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "title": "Quant Overledger API",
    "version": "2.0"
  },
  "tags": [
    {
      "name": "Create Transaction",
      "description": ""
    },
    {
      "name": "Transaction Search",
      "description": ""
    },
    {
      "name": "mDapp Transaction Query",
      "description": ""
    },
    {
      "name": "Monitor a Resource",
      "description": ""
    },
    {
      "name": "Manage Monitored Resources",
      "description": ""
    },
    {
      "name": "Create Subscription",
      "description": ""
    },
    {
      "name": "Manage Subscription",
      "description": ""
    }
  ]
}
