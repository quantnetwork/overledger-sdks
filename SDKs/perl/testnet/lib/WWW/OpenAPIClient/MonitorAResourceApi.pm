=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MonitorAResourceApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# resource_monitoring_address
#
# Monitor an address for incoming and outgoing transactions
#
# @param string $authorization  (required)
# @param AddressMonitoringRequestSchema $address_monitoring_request_schema  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'address_monitoring_request_schema' => {
        data_type => 'AddressMonitoringRequestSchema',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'resource_monitoring_address' } = {
        summary => 'Monitor an address for incoming and outgoing transactions',
        params => $params,
        returns => 'AddressMonitoringResponseSchema',
        };
}
# @return AddressMonitoringResponseSchema
#
sub resource_monitoring_address {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling resource_monitoring_address");
    }

    # verify the required parameter 'address_monitoring_request_schema' is set
    unless (exists $args{'address_monitoring_request_schema'}) {
      croak("Missing the required parameter 'address_monitoring_request_schema' when calling resource_monitoring_address");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/address';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'address_monitoring_request_schema'}) {
        $_body_data = $args{'address_monitoring_request_schema'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddressMonitoringResponseSchema', $response);
    return $_response_object;
}

#
# track_and_subscribe_event
#
# Monitor a smart contract for an event
#
# @param string $authorization  (required)
# @param MonitorSmartContractRequestSchema $monitor_smart_contract_request_schema  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'monitor_smart_contract_request_schema' => {
        data_type => 'MonitorSmartContractRequestSchema',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'track_and_subscribe_event' } = {
        summary => 'Monitor a smart contract for an event',
        params => $params,
        returns => 'CreateSmartContractMonitoringSchema',
        };
}
# @return CreateSmartContractMonitoringSchema
#
sub track_and_subscribe_event {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling track_and_subscribe_event");
    }

    # verify the required parameter 'monitor_smart_contract_request_schema' is set
    unless (exists $args{'monitor_smart_contract_request_schema'}) {
      croak("Missing the required parameter 'monitor_smart_contract_request_schema' when calling track_and_subscribe_event");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/smartcontractevent';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'monitor_smart_contract_request_schema'}) {
        $_body_data = $args{'monitor_smart_contract_request_schema'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateSmartContractMonitoringSchema', $response);
    return $_response_object;
}

1;
