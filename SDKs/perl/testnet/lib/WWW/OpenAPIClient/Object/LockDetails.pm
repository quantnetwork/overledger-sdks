=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::LockDetails;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Lock Details of the tokens
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'Lock Details of the tokens',
                                  class => 'LockDetails',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'expiry_date' => {
        datatype => 'string',
        base_name => 'expiryDate',
        description => '',
        format => '',
        read_only => '',
            },
    'lock_id' => {
        datatype => 'string',
        base_name => 'lockId',
        description => '',
        format => '',
        read_only => '',
            },
    'account_id' => {
        datatype => 'string',
        base_name => 'accountId',
        description => '',
        format => '',
        read_only => '',
            },
    'amount' => {
        datatype => 'string',
        base_name => 'amount',
        description => '',
        format => '',
        read_only => '',
            },
    'unit' => {
        datatype => 'string',
        base_name => 'unit',
        description => '',
        format => '',
        read_only => '',
            },
    'account_owning_institution_id' => {
        datatype => 'string',
        base_name => 'accountOwningInstitutionId',
        description => '',
        format => '',
        read_only => '',
            },
    'lock_description' => {
        datatype => 'string',
        base_name => 'lockDescription',
        description => '',
        format => '',
        read_only => '',
            },
    'payee_id' => {
        datatype => 'string',
        base_name => 'payeeId',
        description => '',
        format => '',
        read_only => '',
            },
    'secret' => {
        datatype => 'string',
        base_name => 'secret',
        description => '',
        format => '',
        read_only => '',
            },
    'hash' => {
        datatype => 'string',
        base_name => 'hash',
        description => '',
        format => '',
        read_only => '',
            },
    'payee_owning_institution_id' => {
        datatype => 'string',
        base_name => 'payeeOwningInstitutionId',
        description => '',
        format => '',
        read_only => '',
            },
    'lock_owning_institution_id' => {
        datatype => 'string',
        base_name => 'lockOwningInstitutionId',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'expiry_date' => 'string',
    'lock_id' => 'string',
    'account_id' => 'string',
    'amount' => 'string',
    'unit' => 'string',
    'account_owning_institution_id' => 'string',
    'lock_description' => 'string',
    'payee_id' => 'string',
    'secret' => 'string',
    'hash' => 'string',
    'payee_owning_institution_id' => 'string',
    'lock_owning_institution_id' => 'string'
} );

__PACKAGE__->attribute_map( {
    'expiry_date' => 'expiryDate',
    'lock_id' => 'lockId',
    'account_id' => 'accountId',
    'amount' => 'amount',
    'unit' => 'unit',
    'account_owning_institution_id' => 'accountOwningInstitutionId',
    'lock_description' => 'lockDescription',
    'payee_id' => 'payeeId',
    'secret' => 'secret',
    'hash' => 'hash',
    'payee_owning_institution_id' => 'payeeOwningInstitutionId',
    'lock_owning_institution_id' => 'lockOwningInstitutionId'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
