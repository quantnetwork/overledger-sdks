=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SupportedNonFungibleTokensApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_all_non_fungible_tokens
#
# Retrieve a list of ERC721 and QRC721 tokens
#
# @param string $authorization  (required)
# @param string $contract_type  (optional)
# @param string $technology  (optional)
# @param string $network  (optional)
# @param string $token_name  (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'contract_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'technology' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'network' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_non_fungible_tokens' } = {
        summary => 'Retrieve a list of ERC721 and QRC721 tokens',
        params => $params,
        returns => 'NonFungibleTokenResponse',
        };
}
# @return NonFungibleTokenResponse
#
sub get_all_non_fungible_tokens {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_all_non_fungible_tokens");
    }

    # parse inputs
    my $_resource_path = '/v2/tokenise/tokens/nonfungible';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'contract_type'}) {
        $query_params->{'contractType'} = $self->{api_client}->to_query_value($args{'contract_type'});
    }

    # query params
    if ( exists $args{'technology'}) {
        $query_params->{'technology'} = $self->{api_client}->to_query_value($args{'technology'});
    }

    # query params
    if ( exists $args{'network'}) {
        $query_params->{'network'} = $self->{api_client}->to_query_value($args{'network'});
    }

    # query params
    if ( exists $args{'token_name'}) {
        $query_params->{'tokenName'} = $self->{api_client}->to_query_value($args{'token_name'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NonFungibleTokenResponse', $response);
    return $_response_object;
}

1;
