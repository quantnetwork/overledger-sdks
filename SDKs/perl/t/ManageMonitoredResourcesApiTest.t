=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::ManageMonitoredResourcesApi');

my $api = WWW::OpenAPIClient::ManageMonitoredResourcesApi->new();
isa_ok($api, 'WWW::OpenAPIClient::ManageMonitoredResourcesApi');

#
# delete_event_monitoring test
#
# uncomment below and update the test
#my $delete_event_monitoring_authorization = undef; # replace NULL with a proper value
#my $delete_event_monitoring_resource_monitoring_id = undef; # replace NULL with a proper value
#my $delete_event_monitoring_result = $api->delete_event_monitoring(authorization => $delete_event_monitoring_authorization, resource_monitoring_id => $delete_event_monitoring_resource_monitoring_id);

#
# delete_resource_monitoring_address test
#
# uncomment below and update the test
#my $delete_resource_monitoring_address_authorization = undef; # replace NULL with a proper value
#my $delete_resource_monitoring_address_resource_monitoring_id = undef; # replace NULL with a proper value
#my $delete_resource_monitoring_address_result = $api->delete_resource_monitoring_address(authorization => $delete_resource_monitoring_address_authorization, resource_monitoring_id => $delete_resource_monitoring_address_resource_monitoring_id);

#
# get_list_of_addresses test
#
# uncomment below and update the test
#my $get_list_of_addresses_authorization = undef; # replace NULL with a proper value
#my $get_list_of_addresses_result = $api->get_list_of_addresses(authorization => $get_list_of_addresses_authorization);

#
# get_list_of_resources test
#
# uncomment below and update the test
#my $get_list_of_resources_authorization = undef; # replace NULL with a proper value
#my $get_list_of_resources_result = $api->get_list_of_resources(authorization => $get_list_of_resources_authorization);

#
# get_list_of_smart_contract_events test
#
# uncomment below and update the test
#my $get_list_of_smart_contract_events_authorization = undef; # replace NULL with a proper value
#my $get_list_of_smart_contract_events_result = $api->get_list_of_smart_contract_events(authorization => $get_list_of_smart_contract_events_authorization);

#
# get_monitored_address test
#
# uncomment below and update the test
#my $get_monitored_address_authorization = undef; # replace NULL with a proper value
#my $get_monitored_address_resource_monitoring_id = undef; # replace NULL with a proper value
#my $get_monitored_address_result = $api->get_monitored_address(authorization => $get_monitored_address_authorization, resource_monitoring_id => $get_monitored_address_resource_monitoring_id);

#
# get_monitored_smart_contract_event_details test
#
# uncomment below and update the test
#my $get_monitored_smart_contract_event_details_authorization = undef; # replace NULL with a proper value
#my $get_monitored_smart_contract_event_details_resource_monitoring_id = undef; # replace NULL with a proper value
#my $get_monitored_smart_contract_event_details_result = $api->get_monitored_smart_contract_event_details(authorization => $get_monitored_smart_contract_event_details_authorization, resource_monitoring_id => $get_monitored_smart_contract_event_details_resource_monitoring_id);

#
# update_event_monitoring test
#
# uncomment below and update the test
#my $update_event_monitoring_authorization = undef; # replace NULL with a proper value
#my $update_event_monitoring_resource_monitoring_id = undef; # replace NULL with a proper value
#my $update_event_monitoring_status_update_monitoring_request_schema = undef; # replace NULL with a proper value
#my $update_event_monitoring_result = $api->update_event_monitoring(authorization => $update_event_monitoring_authorization, resource_monitoring_id => $update_event_monitoring_resource_monitoring_id, status_update_monitoring_request_schema => $update_event_monitoring_status_update_monitoring_request_schema);

#
# update_resource_monitoring_address test
#
# uncomment below and update the test
#my $update_resource_monitoring_address_authorization = undef; # replace NULL with a proper value
#my $update_resource_monitoring_address_resource_monitoring_id = undef; # replace NULL with a proper value
#my $update_resource_monitoring_address_status_update_monitoring_request_schema = undef; # replace NULL with a proper value
#my $update_resource_monitoring_address_result = $api->update_resource_monitoring_address(authorization => $update_resource_monitoring_address_authorization, resource_monitoring_id => $update_resource_monitoring_address_resource_monitoring_id, status_update_monitoring_request_schema => $update_resource_monitoring_address_status_update_monitoring_request_schema);

