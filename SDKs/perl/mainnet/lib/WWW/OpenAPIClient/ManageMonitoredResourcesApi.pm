=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ManageMonitoredResourcesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# delete_event_monitoring
#
# Stop monitoring a smart contract
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_event_monitoring' } = {
        summary => 'Stop monitoring a smart contract',
        params => $params,
        returns => 'SmartContractMonitoringSchema',
        };
}
# @return SmartContractMonitoringSchema
#
sub delete_event_monitoring {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling delete_event_monitoring");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling delete_event_monitoring");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SmartContractMonitoringSchema', $response);
    return $_response_object;
}

#
# delete_resource_monitoring_address
#
# Stop monitoring an address
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_resource_monitoring_address' } = {
        summary => 'Stop monitoring an address',
        params => $params,
        returns => 'DeleteResourceMonitoringAddressSchema',
        };
}
# @return DeleteResourceMonitoringAddressSchema
#
sub delete_resource_monitoring_address {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling delete_resource_monitoring_address");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling delete_resource_monitoring_address");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteResourceMonitoringAddressSchema', $response);
    return $_response_object;
}

#
# get_list_of_addresses
#
# Retrieve a list of addresses being monitored
#
# @param string $authorization  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_of_addresses' } = {
        summary => 'Retrieve a list of addresses being monitored',
        params => $params,
        returns => 'ARRAY[ResourceMonitoringAddressSchema]',
        };
}
# @return ARRAY[ResourceMonitoringAddressSchema]
#
sub get_list_of_addresses {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_list_of_addresses");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/addresses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ResourceMonitoringAddressSchema]', $response);
    return $_response_object;
}

#
# get_list_of_resources
#
# Retrieve a list of all resources being monitored
#
# @param string $authorization  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_of_resources' } = {
        summary => 'Retrieve a list of all resources being monitored',
        params => $params,
        returns => 'ARRAY[SmartContractMonitoringSchema]',
        };
}
# @return ARRAY[SmartContractMonitoringSchema]
#
sub get_list_of_resources {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_list_of_resources");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SmartContractMonitoringSchema]', $response);
    return $_response_object;
}

#
# get_list_of_smart_contract_events
#
# Retrieve a list of smart contracts being monitored
#
# @param string $authorization  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_of_smart_contract_events' } = {
        summary => 'Retrieve a list of smart contracts being monitored',
        params => $params,
        returns => 'ARRAY[SmartContractMonitoringSchema]',
        };
}
# @return ARRAY[SmartContractMonitoringSchema]
#
sub get_list_of_smart_contract_events {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_list_of_smart_contract_events");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/smartcontractevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SmartContractMonitoringSchema]', $response);
    return $_response_object;
}

#
# get_monitored_address
#
# Retrieve recorded updates for a specific monitored address
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_monitored_address' } = {
        summary => 'Retrieve recorded updates for a specific monitored address',
        params => $params,
        returns => 'AddressMonitoringDetailsSchema',
        };
}
# @return AddressMonitoringDetailsSchema
#
sub get_monitored_address {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_monitored_address");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling get_monitored_address");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddressMonitoringDetailsSchema', $response);
    return $_response_object;
}

#
# get_monitored_smart_contract_event_details
#
# Retrieve recorded updates for a specific monitored smart contract
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_monitored_smart_contract_event_details' } = {
        summary => 'Retrieve recorded updates for a specific monitored smart contract',
        params => $params,
        returns => 'SmartContractMonitoringDetailsSchema',
        };
}
# @return SmartContractMonitoringDetailsSchema
#
sub get_monitored_smart_contract_event_details {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_monitored_smart_contract_event_details");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling get_monitored_smart_contract_event_details");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SmartContractMonitoringDetailsSchema', $response);
    return $_response_object;
}

#
# update_event_monitoring
#
# Update the monitoring status of a smart contract
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
# @param StatusUpdateMonitoringRequestSchema $status_update_monitoring_request_schema  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'status_update_monitoring_request_schema' => {
        data_type => 'StatusUpdateMonitoringRequestSchema',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_event_monitoring' } = {
        summary => 'Update the monitoring status of a smart contract',
        params => $params,
        returns => 'SmartContractMonitoringSchema',
        };
}
# @return SmartContractMonitoringSchema
#
sub update_event_monitoring {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling update_event_monitoring");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling update_event_monitoring");
    }

    # verify the required parameter 'status_update_monitoring_request_schema' is set
    unless (exists $args{'status_update_monitoring_request_schema'}) {
      croak("Missing the required parameter 'status_update_monitoring_request_schema' when calling update_event_monitoring");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'status_update_monitoring_request_schema'}) {
        $_body_data = $args{'status_update_monitoring_request_schema'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SmartContractMonitoringSchema', $response);
    return $_response_object;
}

#
# update_resource_monitoring_address
#
# Update the monitoring status of an address
#
# @param string $authorization  (required)
# @param string $resource_monitoring_id  (required)
# @param StatusUpdateMonitoringRequestSchema $status_update_monitoring_request_schema  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'resource_monitoring_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'status_update_monitoring_request_schema' => {
        data_type => 'StatusUpdateMonitoringRequestSchema',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_resource_monitoring_address' } = {
        summary => 'Update the monitoring status of an address',
        params => $params,
        returns => 'UpdateAddressMonitoringSchema',
        };
}
# @return UpdateAddressMonitoringSchema
#
sub update_resource_monitoring_address {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling update_resource_monitoring_address");
    }

    # verify the required parameter 'resource_monitoring_id' is set
    unless (exists $args{'resource_monitoring_id'}) {
      croak("Missing the required parameter 'resource_monitoring_id' when calling update_resource_monitoring_address");
    }

    # verify the required parameter 'status_update_monitoring_request_schema' is set
    unless (exists $args{'status_update_monitoring_request_schema'}) {
      croak("Missing the required parameter 'status_update_monitoring_request_schema' when calling update_resource_monitoring_address");
    }

    # parse inputs
    my $_resource_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # path params
    if ( exists $args{'resource_monitoring_id'}) {
        my $_base_variable = "{" . "resourceMonitoringId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_monitoring_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'status_update_monitoring_request_schema'}) {
        $_body_data = $args{'status_update_monitoring_request_schema'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateAddressMonitoringSchema', $response);
    return $_response_object;
}

1;
