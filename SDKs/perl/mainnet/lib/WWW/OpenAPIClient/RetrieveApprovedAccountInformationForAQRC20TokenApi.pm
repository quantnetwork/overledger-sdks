=begin comment

Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::RetrieveApprovedAccountInformationForAQRC20TokenApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# read_qrc20_secondary_account_owner
#
# Retrieve whether an account is approved to make payments on behalf of another account for a particular QRC20 token.
#
# @param string $authorization  (required)
# @param ReadContractOwnerRequestSchema $read_contract_owner_request_schema  (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'read_contract_owner_request_schema' => {
        data_type => 'ReadContractOwnerRequestSchema',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_qrc20_secondary_account_owner' } = {
        summary => 'Retrieve whether an account is approved to make payments on behalf of another account for a particular QRC20 token.',
        params => $params,
        returns => 'TokenReadQRC20Response',
        };
}
# @return TokenReadQRC20Response
#
sub read_qrc20_secondary_account_owner {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling read_qrc20_secondary_account_owner");
    }

    # verify the required parameter 'read_contract_owner_request_schema' is set
    unless (exists $args{'read_contract_owner_request_schema'}) {
      croak("Missing the required parameter 'read_contract_owner_request_schema' when calling read_qrc20_secondary_account_owner");
    }

    # parse inputs
    my $_resource_path = '/v2/tokenise/tokens/qrc20/secondary-account-owner';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'read_contract_owner_request_schema'}) {
        $_body_data = $args{'read_contract_owner_request_schema'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2_Security_Scheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenReadQRC20Response', $response);
    return $_response_object;
}

1;
