=begin comment

Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::ManageSubscriptionApi');

my $api = WWW::OpenAPIClient::ManageSubscriptionApi->new();
isa_ok($api, 'WWW::OpenAPIClient::ManageSubscriptionApi');

#
# delete_subscription test
#
# uncomment below and update the test
#my $delete_subscription_authorization = undef; # replace NULL with a proper value
#my $delete_subscription_subscription_id = undef; # replace NULL with a proper value
#my $delete_subscription_result = $api->delete_subscription(authorization => $delete_subscription_authorization, subscription_id => $delete_subscription_subscription_id);

#
# list_subscriptions test
#
# uncomment below and update the test
#my $list_subscriptions_authorization = undef; # replace NULL with a proper value
#my $list_subscriptions_result = $api->list_subscriptions(authorization => $list_subscriptions_authorization);

#
# update_subscription test
#
# uncomment below and update the test
#my $update_subscription_authorization = undef; # replace NULL with a proper value
#my $update_subscription_subscription_id = undef; # replace NULL with a proper value
#my $update_subscription_update_subscription_request_schema = undef; # replace NULL with a proper value
#my $update_subscription_result = $api->update_subscription(authorization => $update_subscription_authorization, subscription_id => $update_subscription_subscription_id, update_subscription_request_schema => $update_subscription_update_subscription_request_schema);

