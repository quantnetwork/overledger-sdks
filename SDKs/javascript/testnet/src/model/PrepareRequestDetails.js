/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountDetails from './AccountDetails';
import AdditionalOwner from './AdditionalOwner';
import AliasDetails from './AliasDetails';
import Beneficiary from './Beneficiary';
import Collector from './Collector';
import Creator from './Creator';
import Destination from './Destination';
import LockDetails from './LockDetails';
import Mandate from './Mandate';
import Origin from './Origin';
import Owner from './Owner';
import Pagination from './Pagination';
import Payee from './Payee';
import Payer from './Payer';
import Payment from './Payment';
import Receiver from './Receiver';
import Sender from './Sender';
import SignerAccount from './SignerAccount';

/**
 * The PrepareRequestDetails model module.
 * @module model/PrepareRequestDetails
 * @version 2.0
 */
class PrepareRequestDetails {
    /**
     * Constructs a new <code>PrepareRequestDetails</code>.
     * @alias module:model/PrepareRequestDetails
     */
    constructor() { 
        
        PrepareRequestDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrepareRequestDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareRequestDetails} obj Optional instance to populate.
     * @return {module:model/PrepareRequestDetails} The populated <code>PrepareRequestDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrepareRequestDetails();

            if (data.hasOwnProperty('mandate')) {
                obj['mandate'] = ApiClient.convertToType(data['mandate'], [Mandate]);
            }
            if (data.hasOwnProperty('aliasDetails')) {
                obj['aliasDetails'] = AliasDetails.constructFromObject(data['aliasDetails']);
            }
            if (data.hasOwnProperty('pagination')) {
                obj['pagination'] = Pagination.constructFromObject(data['pagination']);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], [Origin]);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], [Destination]);
            }
            if (data.hasOwnProperty('tokenName')) {
                obj['tokenName'] = ApiClient.convertToType(data['tokenName'], 'String');
            }
            if (data.hasOwnProperty('blockSearchType')) {
                obj['blockSearchType'] = ApiClient.convertToType(data['blockSearchType'], 'String');
            }
            if (data.hasOwnProperty('payer')) {
                obj['payer'] = ApiClient.convertToType(data['payer'], [Payer]);
            }
            if (data.hasOwnProperty('collector')) {
                obj['collector'] = Collector.constructFromObject(data['collector']);
            }
            if (data.hasOwnProperty('payee')) {
                obj['payee'] = ApiClient.convertToType(data['payee'], [Payee]);
            }
            if (data.hasOwnProperty('additionalOwner')) {
                obj['additionalOwner'] = AdditionalOwner.constructFromObject(data['additionalOwner']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = Owner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = Creator.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('receiver')) {
                obj['receiver'] = ApiClient.convertToType(data['receiver'], [Receiver]);
            }
            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('lockDetails')) {
                obj['lockDetails'] = LockDetails.constructFromObject(data['lockDetails']);
            }
            if (data.hasOwnProperty('blockId')) {
                obj['blockId'] = ApiClient.convertToType(data['blockId'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('tokenUnit')) {
                obj['tokenUnit'] = ApiClient.convertToType(data['tokenUnit'], 'String');
            }
            if (data.hasOwnProperty('beneficiary')) {
                obj['beneficiary'] = Beneficiary.constructFromObject(data['beneficiary']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], [Sender]);
            }
            if (data.hasOwnProperty('accountDetails')) {
                obj['accountDetails'] = AccountDetails.constructFromObject(data['accountDetails']);
            }
            if (data.hasOwnProperty('overledgerSigningType')) {
                obj['overledgerSigningType'] = ApiClient.convertToType(data['overledgerSigningType'], 'String');
            }
            if (data.hasOwnProperty('totalPaymentAmount')) {
                obj['totalPaymentAmount'] = Payment.constructFromObject(data['totalPaymentAmount']);
            }
            if (data.hasOwnProperty('signerAccount')) {
                obj['signerAccount'] = SignerAccount.constructFromObject(data['signerAccount']);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/Mandate>} mandate
 */
PrepareRequestDetails.prototype['mandate'] = undefined;

/**
 * @member {module:model/AliasDetails} aliasDetails
 */
PrepareRequestDetails.prototype['aliasDetails'] = undefined;

/**
 * @member {module:model/Pagination} pagination
 */
PrepareRequestDetails.prototype['pagination'] = undefined;

/**
 * @member {Array.<module:model/Origin>} origin
 */
PrepareRequestDetails.prototype['origin'] = undefined;

/**
 * @member {Array.<module:model/Destination>} destination
 */
PrepareRequestDetails.prototype['destination'] = undefined;

/**
 * Name of the token
 * @member {String} tokenName
 */
PrepareRequestDetails.prototype['tokenName'] = undefined;

/**
 * @member {String} blockSearchType
 */
PrepareRequestDetails.prototype['blockSearchType'] = undefined;

/**
 * @member {Array.<module:model/Payer>} payer
 */
PrepareRequestDetails.prototype['payer'] = undefined;

/**
 * @member {module:model/Collector} collector
 */
PrepareRequestDetails.prototype['collector'] = undefined;

/**
 * @member {Array.<module:model/Payee>} payee
 */
PrepareRequestDetails.prototype['payee'] = undefined;

/**
 * @member {module:model/AdditionalOwner} additionalOwner
 */
PrepareRequestDetails.prototype['additionalOwner'] = undefined;

/**
 * @member {module:model/Owner} owner
 */
PrepareRequestDetails.prototype['owner'] = undefined;

/**
 * @member {module:model/Creator} creator
 */
PrepareRequestDetails.prototype['creator'] = undefined;

/**
 * @member {Array.<module:model/Receiver>} receiver
 */
PrepareRequestDetails.prototype['receiver'] = undefined;

/**
 * Unique identifier for the specific token
 * @member {String} tokenId
 */
PrepareRequestDetails.prototype['tokenId'] = undefined;

/**
 * @member {String} message
 */
PrepareRequestDetails.prototype['message'] = undefined;

/**
 * @member {module:model/LockDetails} lockDetails
 */
PrepareRequestDetails.prototype['lockDetails'] = undefined;

/**
 * @member {String} blockId
 */
PrepareRequestDetails.prototype['blockId'] = undefined;

/**
 * The unique identifiers of the account
 * @member {String} accountId
 */
PrepareRequestDetails.prototype['accountId'] = undefined;

/**
 * The unit of this token
 * @member {String} tokenUnit
 */
PrepareRequestDetails.prototype['tokenUnit'] = undefined;

/**
 * @member {module:model/Beneficiary} beneficiary
 */
PrepareRequestDetails.prototype['beneficiary'] = undefined;

/**
 * @member {Array.<module:model/Sender>} sender
 */
PrepareRequestDetails.prototype['sender'] = undefined;

/**
 * @member {module:model/AccountDetails} accountDetails
 */
PrepareRequestDetails.prototype['accountDetails'] = undefined;

/**
 * @member {String} overledgerSigningType
 */
PrepareRequestDetails.prototype['overledgerSigningType'] = undefined;

/**
 * @member {module:model/Payment} totalPaymentAmount
 */
PrepareRequestDetails.prototype['totalPaymentAmount'] = undefined;

/**
 * @member {module:model/SignerAccount} signerAccount
 */
PrepareRequestDetails.prototype['signerAccount'] = undefined;






export default PrepareRequestDetails;

