/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Destination from './Destination';
import Fee from './Fee';
import Origin from './Origin';
import Payment from './Payment';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * Smallest unit of a work process related to interactions with distributed ledgers
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], ['String']);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], [Origin]);
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = Fee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], [Destination]);
            }
            if (data.hasOwnProperty('signed')) {
                obj['signed'] = ApiClient.convertToType(data['signed'], 'String');
            }
            if (data.hasOwnProperty('totalPaymentAmount')) {
                obj['totalPaymentAmount'] = ApiClient.convertToType(data['totalPaymentAmount'], [Payment]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('encoded')) {
                obj['encoded'] = ApiClient.convertToType(data['encoded'], ['String']);
            }
            if (data.hasOwnProperty('nativeData')) {
                obj['nativeData'] = ApiClient.convertToType(data['nativeData'], Object);
            }
            if (data.hasOwnProperty('extraFields')) {
                obj['extraFields'] = ApiClient.convertToType(data['extraFields'], Object);
            }
        }
        return obj;
    }


}

/**
 * The signatures of this transaction
 * @member {Array.<String>} signature
 */
Transaction.prototype['signature'] = undefined;

/**
 * @member {Array.<module:model/Origin>} origin
 */
Transaction.prototype['origin'] = undefined;

/**
 * @member {module:model/Fee} fee
 */
Transaction.prototype['fee'] = undefined;

/**
 * @member {Array.<module:model/Destination>} destination
 */
Transaction.prototype['destination'] = undefined;

/**
 * @member {String} signed
 */
Transaction.prototype['signed'] = undefined;

/**
 * @member {Array.<module:model/Payment>} totalPaymentAmount
 */
Transaction.prototype['totalPaymentAmount'] = undefined;

/**
 * Any text-based element of the data payload
 * @member {String} message
 */
Transaction.prototype['message'] = undefined;

/**
 * The unique identifier of the transaction on this DLN
 * @member {String} transactionId
 */
Transaction.prototype['transactionId'] = undefined;

/**
 * @member {Array.<String>} encoded
 */
Transaction.prototype['encoded'] = undefined;

/**
 * @member {Object} nativeData
 */
Transaction.prototype['nativeData'] = undefined;

/**
 * @member {Object} extraFields
 */
Transaction.prototype['extraFields'] = undefined;






export default Transaction;

