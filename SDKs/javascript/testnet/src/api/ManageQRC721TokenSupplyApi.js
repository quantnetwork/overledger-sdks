/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorList from '../model/ErrorList';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import PrepareMintTransactionRequestSchemaQrc721 from '../model/PrepareMintTransactionRequestSchemaQrc721';
import PrepareTransactionResponse from '../model/PrepareTransactionResponse';

/**
* ManageQRC721TokenSupply service.
* @module api/ManageQRC721TokenSupplyApi
* @version 2.0
*/
export default class ManageQRC721TokenSupplyApi {

    /**
    * Constructs a new ManageQRC721TokenSupplyApi. 
    * @alias module:api/ManageQRC721TokenSupplyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the prepareSupplyRequest operation.
     * @callback module:api/ManageQRC721TokenSupplyApi~prepareSupplyRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare a transaction to manage QRC721 token supply
     * Transforms a transaction request to manage QRC721 token supply ready to be signed and returns a request ID for executing. The supported types for this API are “Mint Tokens”, which will allow you to issue an new NFT for your QRC721 token, and \"Burn Tokens\" which will allow you to destroy your QRC721 token. Successfully prepared transactions can then be executed using the /execution/transaction API
     * @param {String} authorization 
     * @param {module:model/PrepareMintTransactionRequestSchemaQrc721} prepareMintTransactionRequestSchemaQrc721 
     * @param {module:api/ManageQRC721TokenSupplyApi~prepareSupplyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareTransactionResponse}
     */
    prepareSupplyRequest(authorization, prepareMintTransactionRequestSchemaQrc721, callback) {
      let postBody = prepareMintTransactionRequestSchemaQrc721;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling prepareSupplyRequest");
      }
      // verify the required parameter 'prepareMintTransactionRequestSchemaQrc721' is set
      if (prepareMintTransactionRequestSchemaQrc721 === undefined || prepareMintTransactionRequestSchemaQrc721 === null) {
        throw new Error("Missing the required parameter 'prepareMintTransactionRequestSchemaQrc721' when calling prepareSupplyRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrepareTransactionResponse;
      return this.apiClient.callApi(
        '/v2/tokenise/preparation/transaction/qrc721/supply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
