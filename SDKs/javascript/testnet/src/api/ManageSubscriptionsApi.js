/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorList from '../model/ErrorList';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import ListWebhookSubscriptionResponseSchema from '../model/ListWebhookSubscriptionResponseSchema';
import UpdateWebhookSubscriptionRequestSchema from '../model/UpdateWebhookSubscriptionRequestSchema';
import WebhookSubscriptionStatusUpdateResponse from '../model/WebhookSubscriptionStatusUpdateResponse';

/**
* ManageSubscriptions service.
* @module api/ManageSubscriptionsApi
* @version 2.0
*/
export default class ManageSubscriptionsApi {

    /**
    * Constructs a new ManageSubscriptionsApi. 
    * @alias module:api/ManageSubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSubscription operation.
     * @callback module:api/ManageSubscriptionsApi~deleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookSubscriptionStatusUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a subscription created by your application
     * Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
     * @param {String} authorization 
     * @param {String} subscriptionId 
     * @param {module:api/ManageSubscriptionsApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookSubscriptionStatusUpdateResponse}
     */
    deleteSubscription(authorization, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookSubscriptionStatusUpdateResponse;
      return this.apiClient.callApi(
        '/v2/webhook/subscription/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubscriptions operation.
     * @callback module:api/ManageSubscriptionsApi~listSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListWebhookSubscriptionResponseSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of subscriptions created by your application
     * Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
     * @param {String} authorization 
     * @param {module:api/ManageSubscriptionsApi~listSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListWebhookSubscriptionResponseSchema>}
     */
    listSubscriptions(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListWebhookSubscriptionResponseSchema];
      return this.apiClient.callApi(
        '/v2/webhook/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscription operation.
     * @callback module:api/ManageSubscriptionsApi~updateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookSubscriptionStatusUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific subscription created by your application
     * Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
     * @param {String} authorization 
     * @param {String} subscriptionId 
     * @param {module:model/UpdateWebhookSubscriptionRequestSchema} updateWebhookSubscriptionRequestSchema 
     * @param {module:api/ManageSubscriptionsApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookSubscriptionStatusUpdateResponse}
     */
    updateSubscription(authorization, subscriptionId, updateWebhookSubscriptionRequestSchema, callback) {
      let postBody = updateWebhookSubscriptionRequestSchema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateSubscription");
      }
      // verify the required parameter 'updateWebhookSubscriptionRequestSchema' is set
      if (updateWebhookSubscriptionRequestSchema === undefined || updateWebhookSubscriptionRequestSchema === null) {
        throw new Error("Missing the required parameter 'updateWebhookSubscriptionRequestSchema' when calling updateSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookSubscriptionStatusUpdateResponse;
      return this.apiClient.callApi(
        '/v2/webhook/subscription/{subscriptionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
