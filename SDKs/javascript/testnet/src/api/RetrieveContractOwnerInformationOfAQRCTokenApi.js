/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorList from '../model/ErrorList';
import ErrorResponseMessage from '../model/ErrorResponseMessage';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import PrepareRequest from '../model/PrepareRequest';
import TokenReadQRC721Response from '../model/TokenReadQRC721Response';

/**
* RetrieveContractOwnerInformationOfAQRCToken service.
* @module api/RetrieveContractOwnerInformationOfAQRCTokenApi
* @version 2.0
*/
export default class RetrieveContractOwnerInformationOfAQRCTokenApi {

    /**
    * Constructs a new RetrieveContractOwnerInformationOfAQRCTokenApi. 
    * @alias module:api/RetrieveContractOwnerInformationOfAQRCTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the readQRCSmartContractOwner operation.
     * @callback module:api/RetrieveContractOwnerInformationOfAQRCTokenApi~readQRCSmartContractOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenReadQRC721Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve which account has contract owner permissions for a QRC token
     * Submits a query to the Blockchain Network and returns the address that currently has contract owner permissions for a particular QRC token.
     * @param {String} authorization 
     * @param {String} flowType 
     * @param {module:model/PrepareRequest} prepareRequest 
     * @param {module:api/RetrieveContractOwnerInformationOfAQRCTokenApi~readQRCSmartContractOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenReadQRC721Response}
     */
    readQRCSmartContractOwner(authorization, flowType, prepareRequest, callback) {
      let postBody = prepareRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling readQRCSmartContractOwner");
      }
      // verify the required parameter 'flowType' is set
      if (flowType === undefined || flowType === null) {
        throw new Error("Missing the required parameter 'flowType' when calling readQRCSmartContractOwner");
      }
      // verify the required parameter 'prepareRequest' is set
      if (prepareRequest === undefined || prepareRequest === null) {
        throw new Error("Missing the required parameter 'prepareRequest' when calling readQRCSmartContractOwner");
      }

      let pathParams = {
        'flowType': flowType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenReadQRC721Response;
      return this.apiClient.callApi(
        '/v2/tokenise/tokens/{flowType}/contract-owner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
