/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSubscriptionRequestSchema from '../model/CreateSubscriptionRequestSchema';
import CreateSubscriptionResponseSchema from '../model/CreateSubscriptionResponseSchema';
import ErrorList from '../model/ErrorList';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';

/**
* CreateSubscription service.
* @module api/CreateSubscriptionApi
* @version 2.0
*/
export default class CreateSubscriptionApi {

    /**
    * Constructs a new CreateSubscriptionApi. 
    * @alias module:api/CreateSubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscription operation.
     * @callback module:api/CreateSubscriptionApi~subscriptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateSubscriptionResponseSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a subscription for a transaction or monitored resource 
     * Creates a subscription to receive status updates for a transaction created in Overledger, or to receive updates each time a transaction happens on the requested DLT for a resource (e.g. address) being monitored, to the requested callback URL.  Subscriptions are created using an Overledger Transaction ID or Resource Monitoring ID
     * @param {String} authorization 
     * @param {module:model/CreateSubscriptionRequestSchema} createSubscriptionRequestSchema 
     * @param {module:api/CreateSubscriptionApi~subscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateSubscriptionResponseSchema>}
     */
    subscription(authorization, createSubscriptionRequestSchema, callback) {
      let postBody = createSubscriptionRequestSchema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling subscription");
      }
      // verify the required parameter 'createSubscriptionRequestSchema' is set
      if (createSubscriptionRequestSchema === undefined || createSubscriptionRequestSchema === null) {
        throw new Error("Missing the required parameter 'createSubscriptionRequestSchema' when calling subscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateSubscriptionResponseSchema];
      return this.apiClient.callApi(
        '/v2/webhook/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
