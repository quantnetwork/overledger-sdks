/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuantOverledgerApi);
  }
}(this, function(expect, QuantOverledgerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuantOverledgerApi.PrepareRequestDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PrepareRequestDetails', function() {
    it('should create an instance of PrepareRequestDetails', function() {
      // uncomment below and update the code to test PrepareRequestDetails
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be.a(QuantOverledgerApi.PrepareRequestDetails);
    });

    it('should have the property mandate (base name: "mandate")', function() {
      // uncomment below and update the code to test the property mandate
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property aliasDetails (base name: "aliasDetails")', function() {
      // uncomment below and update the code to test the property aliasDetails
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property pagination (base name: "pagination")', function() {
      // uncomment below and update the code to test the property pagination
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property tokenName (base name: "tokenName")', function() {
      // uncomment below and update the code to test the property tokenName
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property blockSearchType (base name: "blockSearchType")', function() {
      // uncomment below and update the code to test the property blockSearchType
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property payer (base name: "payer")', function() {
      // uncomment below and update the code to test the property payer
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property collector (base name: "collector")', function() {
      // uncomment below and update the code to test the property collector
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property payee (base name: "payee")', function() {
      // uncomment below and update the code to test the property payee
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property additionalOwner (base name: "additionalOwner")', function() {
      // uncomment below and update the code to test the property additionalOwner
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property receiver (base name: "receiver")', function() {
      // uncomment below and update the code to test the property receiver
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property tokenId (base name: "tokenId")', function() {
      // uncomment below and update the code to test the property tokenId
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property lockDetails (base name: "lockDetails")', function() {
      // uncomment below and update the code to test the property lockDetails
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property blockId (base name: "blockId")', function() {
      // uncomment below and update the code to test the property blockId
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property tokenUnit (base name: "tokenUnit")', function() {
      // uncomment below and update the code to test the property tokenUnit
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property beneficiary (base name: "beneficiary")', function() {
      // uncomment below and update the code to test the property beneficiary
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property sender (base name: "sender")', function() {
      // uncomment below and update the code to test the property sender
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property accountDetails (base name: "accountDetails")', function() {
      // uncomment below and update the code to test the property accountDetails
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property overledgerSigningType (base name: "overledgerSigningType")', function() {
      // uncomment below and update the code to test the property overledgerSigningType
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property totalPaymentAmount (base name: "totalPaymentAmount")', function() {
      // uncomment below and update the code to test the property totalPaymentAmount
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

    it('should have the property signerAccount (base name: "signerAccount")', function() {
      // uncomment below and update the code to test the property signerAccount
      //var instance = new QuantOverledgerApi.PrepareRequestDetails();
      //expect(instance).to.be();
    });

  });

}));
