/**
 * Quant Overledger API
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuantOverledgerApi);
  }
}(this, function(expect, QuantOverledgerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuantOverledgerApi.ManageMonitoredResourcesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManageMonitoredResourcesApi', function() {
    describe('deleteEventMonitoring', function() {
      it('should call deleteEventMonitoring successfully', function(done) {
        //uncomment below and update the code to test deleteEventMonitoring
        //instance.deleteEventMonitoring(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourceMonitoringAddress', function() {
      it('should call deleteResourceMonitoringAddress successfully', function(done) {
        //uncomment below and update the code to test deleteResourceMonitoringAddress
        //instance.deleteResourceMonitoringAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListOfAddresses', function() {
      it('should call getListOfAddresses successfully', function(done) {
        //uncomment below and update the code to test getListOfAddresses
        //instance.getListOfAddresses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListOfResources', function() {
      it('should call getListOfResources successfully', function(done) {
        //uncomment below and update the code to test getListOfResources
        //instance.getListOfResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListOfSmartContractEvents', function() {
      it('should call getListOfSmartContractEvents successfully', function(done) {
        //uncomment below and update the code to test getListOfSmartContractEvents
        //instance.getListOfSmartContractEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMonitoredAddress', function() {
      it('should call getMonitoredAddress successfully', function(done) {
        //uncomment below and update the code to test getMonitoredAddress
        //instance.getMonitoredAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMonitoredSmartContractEventDetails', function() {
      it('should call getMonitoredSmartContractEventDetails successfully', function(done) {
        //uncomment below and update the code to test getMonitoredSmartContractEventDetails
        //instance.getMonitoredSmartContractEventDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventMonitoring', function() {
      it('should call updateEventMonitoring successfully', function(done) {
        //uncomment below and update the code to test updateEventMonitoring
        //instance.updateEventMonitoring(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResourceMonitoringAddress', function() {
      it('should call updateResourceMonitoringAddress successfully', function(done) {
        //uncomment below and update the code to test updateResourceMonitoringAddress
        //instance.updateResourceMonitoringAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
