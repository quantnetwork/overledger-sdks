/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseMessage from '../model/ErrorResponseMessage';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import NonFungibleTokenResponse from '../model/NonFungibleTokenResponse';

/**
* SupportedNonFungibleTokens service.
* @module api/SupportedNonFungibleTokensApi
* @version 2.0
*/
export default class SupportedNonFungibleTokensApi {

    /**
    * Constructs a new SupportedNonFungibleTokensApi. 
    * @alias module:api/SupportedNonFungibleTokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllNonFungibleTokens operation.
     * @callback module:api/SupportedNonFungibleTokensApi~getAllNonFungibleTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NonFungibleTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of ERC721 and QRC721 tokens
     * Retrieves a list of non-fungible tokens supported by Overledger and which API's and functions you can use for each. You can retrieve all non-fungible token types for all locations without providing parameters. If you want to see what tokens are supported for a specific contract type you can pass in either ERC721 or QRC721 as a contract type parameter. You can then filter further by including the resource using technology and network parameters. You can also look for a specific token by passing in the tokenName as a parameter.
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contractType 
     * @param {String} opts.technology 
     * @param {String} opts.network 
     * @param {String} opts.tokenName 
     * @param {module:api/SupportedNonFungibleTokensApi~getAllNonFungibleTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NonFungibleTokenResponse}
     */
    getAllNonFungibleTokens(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllNonFungibleTokens");
      }

      let pathParams = {
      };
      let queryParams = {
        'contractType': opts['contractType'],
        'technology': opts['technology'],
        'network': opts['network'],
        'tokenName': opts['tokenName']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NonFungibleTokenResponse;
      return this.apiClient.callApi(
        '/v2/tokenise/tokens/nonfungible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
