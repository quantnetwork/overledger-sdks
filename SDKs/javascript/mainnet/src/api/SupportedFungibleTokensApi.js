/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import ErrorList from '../model/ErrorList';
import FungibleTokenResponseDTO from '../model/FungibleTokenResponseDTO';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import Location from '../model/Location';

/**
* SupportedFungibleTokens service.
* @module api/SupportedFungibleTokensApi
* @version 2.0
*/
export default class SupportedFungibleTokensApi {

    /**
    * Constructs a new SupportedFungibleTokensApi. 
    * @alias module:api/SupportedFungibleTokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/SupportedFungibleTokensApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FungibleTokenResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of ERC20 and QRC20 tokens
     * Retrieves a list of fungible tokens supported by Overledger and which APIs and functions you can use for each. You can retrieve all fungible token types for all locations without providing parameters. If you want to see what tokens are supported for a specific contract type you can pass in either ERC20 or QRC20 as a contract type parameter. You can then filter further by including the resource using the technology and network parameters. You can also look for a specific token by passing in the unit as a parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/Location} opts.location 
     * @param {String} opts.contractType 
     * @param {String} opts.unit 
     * @param {module:api/SupportedFungibleTokensApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FungibleTokenResponseDTO}
     */
    getTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location': opts['location'],
        'contractType': opts['contractType'],
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FungibleTokenResponseDTO;
      return this.apiClient.callApi(
        '/v2/tokens/fungible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
