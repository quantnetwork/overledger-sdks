/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import ErrorList from '../model/ErrorList';
import ExecuteTransactionRequest from '../model/ExecuteTransactionRequest';
import ExecuteTransactionResponse from '../model/ExecuteTransactionResponse';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import OneOfPreparePaymentTransactionRequestSchemaPrepareTransferTransactionRequestSchemaPrepareTransactionSmartContractInvokeRequestSchema from '../model/OneOfPreparePaymentTransactionRequestSchemaPrepareTransferTransactionRequestSchemaPrepareTransactionSmartContractInvokeRequestSchema';
import PrepareNativeTransactionRequestSchema from '../model/PrepareNativeTransactionRequestSchema';
import PrepareSearchResponseSchema from '../model/PrepareSearchResponseSchema';
import PrepareTransactionResponse from '../model/PrepareTransactionResponse';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* CreateTransaction service.
* @module api/CreateTransactionApi
* @version 2.0
*/
export default class CreateTransactionApi {

    /**
    * Constructs a new CreateTransactionApi. 
    * @alias module:api/CreateTransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the executePreparedRequestNativeTransaction operation.
     * @callback module:api/CreateTransactionApi~executePreparedRequestNativeTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a native transaction on the DLT
     * Takes a request ID and submits a signed native transaction to the requested DLT
     * @param {String} authorization 
     * @param {module:model/ExecuteTransactionRequest} executeTransactionRequest 
     * @param {module:api/CreateTransactionApi~executePreparedRequestNativeTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteTransactionResponse}
     */
    executePreparedRequestNativeTransaction(authorization, executeTransactionRequest, callback) {
      let postBody = executeTransactionRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling executePreparedRequestNativeTransaction");
      }
      // verify the required parameter 'executeTransactionRequest' is set
      if (executeTransactionRequest === undefined || executeTransactionRequest === null) {
        throw new Error("Missing the required parameter 'executeTransactionRequest' when calling executePreparedRequestNativeTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExecuteTransactionResponse;
      return this.apiClient.callApi(
        '/v2/execution/nativetransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executePreparedRequestTransaction operation.
     * @callback module:api/CreateTransactionApi~executePreparedRequestTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a transaction on the DLT
     * Takes a request ID and submits a signed transaction to the requested DLT.
     * @param {String} authorization 
     * @param {module:model/ExecuteTransactionRequest} executeTransactionRequest 
     * @param {module:api/CreateTransactionApi~executePreparedRequestTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteTransactionResponse}
     */
    executePreparedRequestTransaction(authorization, executeTransactionRequest, callback) {
      let postBody = executeTransactionRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling executePreparedRequestTransaction");
      }
      // verify the required parameter 'executeTransactionRequest' is set
      if (executeTransactionRequest === undefined || executeTransactionRequest === null) {
        throw new Error("Missing the required parameter 'executeTransactionRequest' when calling executePreparedRequestTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExecuteTransactionResponse;
      return this.apiClient.callApi(
        '/v2/execution/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareNativeTransaction operation.
     * @callback module:api/CreateTransactionApi~prepareNativeTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareSearchResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare a DLT native transaction
     * Allows advanced developers to submit their own DLT native transactions via Overledger. Returns a request ID for executing a DLT native transaction on the requested DLT
     * @param {String} authorization 
     * @param {module:model/PrepareNativeTransactionRequestSchema} prepareNativeTransactionRequestSchema 
     * @param {module:api/CreateTransactionApi~prepareNativeTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareSearchResponseSchema}
     */
    prepareNativeTransaction(authorization, prepareNativeTransactionRequestSchema, callback) {
      let postBody = prepareNativeTransactionRequestSchema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling prepareNativeTransaction");
      }
      // verify the required parameter 'prepareNativeTransactionRequestSchema' is set
      if (prepareNativeTransactionRequestSchema === undefined || prepareNativeTransactionRequestSchema === null) {
        throw new Error("Missing the required parameter 'prepareNativeTransactionRequestSchema' when calling prepareNativeTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrepareSearchResponseSchema;
      return this.apiClient.callApi(
        '/v2/preparation/nativetransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareTransactionRequest operation.
     * @callback module:api/CreateTransactionApi~prepareTransactionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare a DLT transaction for signing
     * Transforms a transaction request into a payload ready for signing for the requested DLT and returns a request ID for executing. Supported transaction types in this release are “Payment” (to send payments) and “Smart Contract Invoke” (to invoke arbitrary smart contract functions)
     * @param {String} authorization 
     * @param {module:model/UNKNOWN_BASE_TYPE} UNKNOWN_BASE_TYPE 
     * @param {module:api/CreateTransactionApi~prepareTransactionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareTransactionResponse}
     */
    prepareTransactionRequest(authorization, UNKNOWN_BASE_TYPE, callback) {
      let postBody = UNKNOWN_BASE_TYPE;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling prepareTransactionRequest");
      }
      // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
      if (UNKNOWN_BASE_TYPE === undefined || UNKNOWN_BASE_TYPE === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling prepareTransactionRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrepareTransactionResponse;
      return this.apiClient.callApi(
        '/v2/preparation/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
