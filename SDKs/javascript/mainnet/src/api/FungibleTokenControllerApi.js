/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Erc20DTO from '../model/Erc20DTO';

/**
* FungibleTokenController service.
* @module api/FungibleTokenControllerApi
* @version 2.0
*/
export default class FungibleTokenControllerApi {

    /**
    * Constructs a new FungibleTokenControllerApi. 
    * @alias module:api/FungibleTokenControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/FungibleTokenControllerApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Erc20DTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} technology 
     * @param {String} network 
     * @param {String} unit 
     * @param {module:api/FungibleTokenControllerApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Erc20DTO}
     */
    getToken(technology, network, unit, callback) {
      let postBody = null;
      // verify the required parameter 'technology' is set
      if (technology === undefined || technology === null) {
        throw new Error("Missing the required parameter 'technology' when calling getToken");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling getToken");
      }
      // verify the required parameter 'unit' is set
      if (unit === undefined || unit === null) {
        throw new Error("Missing the required parameter 'unit' when calling getToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'technology': technology,
        'network': network,
        'unit': unit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Erc20DTO;
      return this.apiClient.callApi(
        '/v2/token/fungible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
