/**
 * Quant Overledger API
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import ErrorList from '../model/ErrorList';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import OverledgerTransactionResponseSchema from '../model/OverledgerTransactionResponseSchema';

/**
* MDappTransactionQuery service.
* @module api/MDappTransactionQueryApi
* @version 2.0
*/
export default class MDappTransactionQueryApi {

    /**
    * Constructs a new MDappTransactionQueryApi. 
    * @alias module:api/MDappTransactionQueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOvlTransactionByTxId operation.
     * @callback module:api/MDappTransactionQueryApi~getOvlTransactionByTxIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverledgerTransactionResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a specific transaction created by your application in Overledger
     * Returns information for a specific transaction based on a given Overledger Transaction ID. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT
     * @param {String} authorization 
     * @param {String} overledgertransactionid 
     * @param {module:api/MDappTransactionQueryApi~getOvlTransactionByTxIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverledgerTransactionResponseSchema}
     */
    getOvlTransactionByTxId(authorization, overledgertransactionid, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOvlTransactionByTxId");
      }
      // verify the required parameter 'overledgertransactionid' is set
      if (overledgertransactionid === undefined || overledgertransactionid === null) {
        throw new Error("Missing the required parameter 'overledgertransactionid' when calling getOvlTransactionByTxId");
      }

      let pathParams = {
        'overledgertransactionid': overledgertransactionid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OverledgerTransactionResponseSchema;
      return this.apiClient.callApi(
        '/v2/mdapptransaction/{overledgertransactionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOvlTransactionsByClientId operation.
     * @callback module:api/MDappTransactionQueryApi~getOvlTransactionsByClientIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OverledgerTransactionResponseSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of transactions created by your application in Overledger
     * Returns a list of transactions and the corresponding Overledger Transaction ID your application has created in Overledger. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset  (default to 0)
     * @param {Number} opts.length  (default to 25)
     * @param {module:api/MDappTransactionQueryApi~getOvlTransactionsByClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OverledgerTransactionResponseSchema>}
     */
    getOvlTransactionsByClientId(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOvlTransactionsByClientId");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'length': opts['length']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OverledgerTransactionResponseSchema];
      return this.apiClient.callApi(
        '/v2/mdapptransactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
