/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationPaymentSchema from './DestinationPaymentSchema';
import OriginPaymentSchema from './OriginPaymentSchema';

/**
 * The PaymentRequestDetailsSchema model module.
 * @module model/PaymentRequestDetailsSchema
 * @version 2.0
 */
class PaymentRequestDetailsSchema {
    /**
     * Constructs a new <code>PaymentRequestDetailsSchema</code>.
     * The payload request
     * @alias module:model/PaymentRequestDetailsSchema
     * @param destination {Array.<module:model/DestinationPaymentSchema>} List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
     * @param origin {Array.<module:model/OriginPaymentSchema>} List of where this transaction is coming from
     */
    constructor(destination, origin) { 
        
        PaymentRequestDetailsSchema.initialize(this, destination, origin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination, origin) { 
        obj['destination'] = destination;
        obj['origin'] = origin;
    }

    /**
     * Constructs a <code>PaymentRequestDetailsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRequestDetailsSchema} obj Optional instance to populate.
     * @return {module:model/PaymentRequestDetailsSchema} The populated <code>PaymentRequestDetailsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRequestDetailsSchema();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], [DestinationPaymentSchema]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('overledgerSigningType')) {
                obj['overledgerSigningType'] = ApiClient.convertToType(data['overledgerSigningType'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], [OriginPaymentSchema]);
            }
        }
        return obj;
    }


}

/**
 * List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
 * @member {Array.<module:model/DestinationPaymentSchema>} destination
 */
PaymentRequestDetailsSchema.prototype['destination'] = undefined;

/**
 * Any text-based element of the data payload
 * @member {String} message
 */
PaymentRequestDetailsSchema.prototype['message'] = undefined;

/**
 * The method of signing used to submit the transaction
 * @member {module:model/PaymentRequestDetailsSchema.OverledgerSigningTypeEnum} overledgerSigningType
 */
PaymentRequestDetailsSchema.prototype['overledgerSigningType'] = undefined;

/**
 * List of where this transaction is coming from
 * @member {Array.<module:model/OriginPaymentSchema>} origin
 */
PaymentRequestDetailsSchema.prototype['origin'] = undefined;





/**
 * Allowed values for the <code>overledgerSigningType</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRequestDetailsSchema['OverledgerSigningTypeEnum'] = {

    /**
     * value: "overledger-javascript-library"
     * @const
     */
    "overledger-javascript-library": "overledger-javascript-library"
};



export default PaymentRequestDetailsSchema;

