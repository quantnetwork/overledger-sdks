/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FunctionDTO from './FunctionDTO';
import LocationDTO from './LocationDTO';

/**
 * The FungibleTokenResponseDTO model module.
 * @module model/FungibleTokenResponseDTO
 * @version 2.0
 */
class FungibleTokenResponseDTO {
    /**
     * Constructs a new <code>FungibleTokenResponseDTO</code>.
     * @alias module:model/FungibleTokenResponseDTO
     */
    constructor() { 
        
        FungibleTokenResponseDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FungibleTokenResponseDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FungibleTokenResponseDTO} obj Optional instance to populate.
     * @return {module:model/FungibleTokenResponseDTO} The populated <code>FungibleTokenResponseDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FungibleTokenResponseDTO();

            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('decimalPlaces')) {
                obj['decimalPlaces'] = ApiClient.convertToType(data['decimalPlaces'], 'Number');
            }
            if (data.hasOwnProperty('functions')) {
                obj['functions'] = ApiClient.convertToType(data['functions'], [FunctionDTO]);
            }
            if (data.hasOwnProperty('contractType')) {
                obj['contractType'] = ApiClient.convertToType(data['contractType'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationDTO.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('smartContractId')) {
                obj['smartContractId'] = ApiClient.convertToType(data['smartContractId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} documentationUrl
 */
FungibleTokenResponseDTO.prototype['documentationUrl'] = undefined;

/**
 * @member {String} unit
 */
FungibleTokenResponseDTO.prototype['unit'] = undefined;

/**
 * @member {Number} decimalPlaces
 */
FungibleTokenResponseDTO.prototype['decimalPlaces'] = undefined;

/**
 * @member {Array.<module:model/FunctionDTO>} functions
 */
FungibleTokenResponseDTO.prototype['functions'] = undefined;

/**
 * @member {module:model/FungibleTokenResponseDTO.ContractTypeEnum} contractType
 */
FungibleTokenResponseDTO.prototype['contractType'] = undefined;

/**
 * @member {module:model/LocationDTO} location
 */
FungibleTokenResponseDTO.prototype['location'] = undefined;

/**
 * @member {String} smartContractId
 */
FungibleTokenResponseDTO.prototype['smartContractId'] = undefined;





/**
 * Allowed values for the <code>contractType</code> property.
 * @enum {String}
 * @readonly
 */
FungibleTokenResponseDTO['ContractTypeEnum'] = {

    /**
     * value: "ERC20"
     * @const
     */
    "ERC20": "ERC20",

    /**
     * value: "QRC20"
     * @const
     */
    "QRC20": "QRC20"
};



export default FungibleTokenResponseDTO;

