/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import PrepareRequestDetails from './PrepareRequestDetails';
import SmartContractTag from './SmartContractTag';

/**
 * The PrepareRequest model module.
 * @module model/PrepareRequest
 * @version 2.0
 */
class PrepareRequest {
    /**
     * Constructs a new <code>PrepareRequest</code>.
     * @alias module:model/PrepareRequest
     */
    constructor() { 
        
        PrepareRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrepareRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareRequest} obj Optional instance to populate.
     * @return {module:model/PrepareRequest} The populated <code>PrepareRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrepareRequest();

            if (data.hasOwnProperty('apiLookupPath')) {
                obj['apiLookupPath'] = ApiClient.convertToType(data['apiLookupPath'], 'String');
            }
            if (data.hasOwnProperty('smartContractTag')) {
                obj['smartContractTag'] = ApiClient.convertToType(data['smartContractTag'], [SmartContractTag]);
            }
            if (data.hasOwnProperty('urgency')) {
                obj['urgency'] = ApiClient.convertToType(data['urgency'], 'String');
            }
            if (data.hasOwnProperty('requestDetails')) {
                obj['requestDetails'] = PrepareRequestDetails.constructFromObject(data['requestDetails']);
            }
            if (data.hasOwnProperty('smartContractAddress')) {
                obj['smartContractAddress'] = ApiClient.convertToType(data['smartContractAddress'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} apiLookupPath
 */
PrepareRequest.prototype['apiLookupPath'] = undefined;

/**
 * @member {Array.<module:model/SmartContractTag>} smartContractTag
 */
PrepareRequest.prototype['smartContractTag'] = undefined;

/**
 * @member {String} urgency
 */
PrepareRequest.prototype['urgency'] = undefined;

/**
 * @member {module:model/PrepareRequestDetails} requestDetails
 */
PrepareRequest.prototype['requestDetails'] = undefined;

/**
 * @member {String} smartContractAddress
 */
PrepareRequest.prototype['smartContractAddress'] = undefined;

/**
 * @member {module:model/Location} location
 */
PrepareRequest.prototype['location'] = undefined;

/**
 * @member {String} type
 */
PrepareRequest.prototype['type'] = undefined;






export default PrepareRequest;

