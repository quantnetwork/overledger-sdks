/**
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import ErrorList from '../model/ErrorList';
import ExecuteSearchBalanceResponse from '../model/ExecuteSearchBalanceResponse';
import ExecuteSearchSequenceResponse from '../model/ExecuteSearchSequenceResponse';
import InternalServerErrorSchema from '../model/InternalServerErrorSchema';
import PrepareSearchResponseSchema from '../model/PrepareSearchResponseSchema';
import PrepareSearchSchema from '../model/PrepareSearchSchema';

/**
* AddressSearch service.
* @module api/AddressSearchApi
* @version 2.0
*/
export default class AddressSearchApi {

    /**
    * Constructs a new AddressSearchApi. 
    * @alias module:api/AddressSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the executePreparedSearchRequestAddressBalance operation.
     * @callback module:api/AddressSearchApi~executePreparedSearchRequestAddressBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteSearchBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a search for an address balance on a DLT
     * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
     * @param {String} authorization 
     * @param {String} requestId 
     * @param {module:api/AddressSearchApi~executePreparedSearchRequestAddressBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteSearchBalanceResponse}
     */
    executePreparedSearchRequestAddressBalance(authorization, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling executePreparedSearchRequestAddressBalance");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling executePreparedSearchRequestAddressBalance");
      }

      let pathParams = {
      };
      let queryParams = {
        'requestId': requestId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecuteSearchBalanceResponse;
      return this.apiClient.callApi(
        '/v2/execution/search/address/balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executePreparedSearchRequestAddressSequence operation.
     * @callback module:api/AddressSearchApi~executePreparedSearchRequestAddressSequenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteSearchSequenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a search for an address sequence on a DLT
     * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s
     * @param {String} authorization 
     * @param {String} requestId 
     * @param {module:api/AddressSearchApi~executePreparedSearchRequestAddressSequenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteSearchSequenceResponse}
     */
    executePreparedSearchRequestAddressSequence(authorization, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling executePreparedSearchRequestAddressSequence");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling executePreparedSearchRequestAddressSequence");
      }

      let pathParams = {
      };
      let queryParams = {
        'requestId': requestId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecuteSearchSequenceResponse;
      return this.apiClient.callApi(
        '/v2/execution/search/address/sequence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareAddressBalanceSearchRequest operation.
     * @callback module:api/AddressSearchApi~prepareAddressBalanceSearchRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareSearchResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare Search for an Address Balance.
     * Perform an address balance search on the requested DLT. Returns a request ID to execute
     * @param {String} authorization 
     * @param {String} addressId 
     * @param {module:model/PrepareSearchSchema} prepareSearchSchema 
     * @param {module:api/AddressSearchApi~prepareAddressBalanceSearchRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareSearchResponseSchema}
     */
    prepareAddressBalanceSearchRequest(authorization, addressId, prepareSearchSchema, callback) {
      let postBody = prepareSearchSchema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling prepareAddressBalanceSearchRequest");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling prepareAddressBalanceSearchRequest");
      }
      // verify the required parameter 'prepareSearchSchema' is set
      if (prepareSearchSchema === undefined || prepareSearchSchema === null) {
        throw new Error("Missing the required parameter 'prepareSearchSchema' when calling prepareAddressBalanceSearchRequest");
      }

      let pathParams = {
        'addressId': addressId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrepareSearchResponseSchema;
      return this.apiClient.callApi(
        '/v2/preparation/search/address/balance/{addressId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareAddressSequenceSearchRequest operation.
     * @callback module:api/AddressSearchApi~prepareAddressSequenceSearchRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareSearchResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare Search for an Address Sequence.
     * Perform an address sequence search on the requested DLT.Returns a request ID to execute
     * @param {String} authorization 
     * @param {String} addressId 
     * @param {module:model/PrepareSearchSchema} prepareSearchSchema 
     * @param {module:api/AddressSearchApi~prepareAddressSequenceSearchRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareSearchResponseSchema}
     */
    prepareAddressSequenceSearchRequest(authorization, addressId, prepareSearchSchema, callback) {
      let postBody = prepareSearchSchema;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling prepareAddressSequenceSearchRequest");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling prepareAddressSequenceSearchRequest");
      }
      // verify the required parameter 'prepareSearchSchema' is set
      if (prepareSearchSchema === undefined || prepareSearchSchema === null) {
        throw new Error("Missing the required parameter 'prepareSearchSchema' when calling prepareAddressSequenceSearchRequest");
      }

      let pathParams = {
        'addressId': addressId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['OAuth2_Security_Scheme'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrepareSearchResponseSchema;
      return this.apiClient.callApi(
        '/v2/preparation/search/address/sequence/{addressId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
