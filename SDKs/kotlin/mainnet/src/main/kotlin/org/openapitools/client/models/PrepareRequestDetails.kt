/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AccountDetails
import org.openapitools.client.models.AdditionalOwner
import org.openapitools.client.models.AliasDetails
import org.openapitools.client.models.Beneficiary
import org.openapitools.client.models.Collector
import org.openapitools.client.models.Creator
import org.openapitools.client.models.Destination
import org.openapitools.client.models.LockDetails
import org.openapitools.client.models.Mandate
import org.openapitools.client.models.Origin
import org.openapitools.client.models.Owner
import org.openapitools.client.models.Pagination
import org.openapitools.client.models.Payee
import org.openapitools.client.models.Payer
import org.openapitools.client.models.Payment
import org.openapitools.client.models.Receiver
import org.openapitools.client.models.Sender
import org.openapitools.client.models.SignerAccount

import com.squareup.moshi.Json

/**
 * 
 *
 * @param mandate 
 * @param aliasDetails 
 * @param pagination 
 * @param origin 
 * @param destination 
 * @param tokenName Name of the token
 * @param blockSearchType 
 * @param payer 
 * @param collector 
 * @param payee 
 * @param additionalOwner 
 * @param owner 
 * @param creator 
 * @param `receiver` 
 * @param tokenId Unique identifier for the specific token
 * @param message 
 * @param lockDetails 
 * @param blockId 
 * @param accountId The unique identifiers of the account
 * @param tokenUnit The unit of this token
 * @param beneficiary 
 * @param sender 
 * @param accountDetails 
 * @param overledgerSigningType 
 * @param totalPaymentAmount 
 * @param signerAccount 
 */

data class PrepareRequestDetails (

    @Json(name = "mandate")
    val mandate: kotlin.collections.List<Mandate>? = null,

    @Json(name = "aliasDetails")
    val aliasDetails: AliasDetails? = null,

    @Json(name = "pagination")
    val pagination: Pagination? = null,

    @Json(name = "origin")
    val origin: kotlin.collections.List<Origin>? = null,

    @Json(name = "destination")
    val destination: kotlin.collections.List<Destination>? = null,

    /* Name of the token */
    @Json(name = "tokenName")
    val tokenName: kotlin.String? = null,

    @Json(name = "blockSearchType")
    val blockSearchType: kotlin.String? = null,

    @Json(name = "payer")
    val payer: kotlin.collections.List<Payer>? = null,

    @Json(name = "collector")
    val collector: Collector? = null,

    @Json(name = "payee")
    val payee: kotlin.collections.List<Payee>? = null,

    @Json(name = "additionalOwner")
    val additionalOwner: AdditionalOwner? = null,

    @Json(name = "owner")
    val owner: Owner? = null,

    @Json(name = "creator")
    val creator: Creator? = null,

    @Json(name = "receiver")
    val `receiver`: kotlin.collections.List<Receiver>? = null,

    /* Unique identifier for the specific token */
    @Json(name = "tokenId")
    val tokenId: kotlin.String? = null,

    @Json(name = "message")
    val message: kotlin.String? = null,

    @Json(name = "lockDetails")
    val lockDetails: LockDetails? = null,

    @Json(name = "blockId")
    val blockId: kotlin.String? = null,

    /* The unique identifiers of the account */
    @Json(name = "accountId")
    val accountId: kotlin.String? = null,

    /* The unit of this token */
    @Json(name = "tokenUnit")
    val tokenUnit: kotlin.String? = null,

    @Json(name = "beneficiary")
    val beneficiary: Beneficiary? = null,

    @Json(name = "sender")
    val sender: kotlin.collections.List<Sender>? = null,

    @Json(name = "accountDetails")
    val accountDetails: AccountDetails? = null,

    @Json(name = "overledgerSigningType")
    val overledgerSigningType: kotlin.String? = null,

    @Json(name = "totalPaymentAmount")
    val totalPaymentAmount: Payment? = null,

    @Json(name = "signerAccount")
    val signerAccount: SignerAccount? = null

)

