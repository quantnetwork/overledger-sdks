/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AutoExecSearchAddressSequenceResponseSchema
import org.openapitools.client.models.AutoExecuteSearchAddressBalanceResponseSchema
import org.openapitools.client.models.ErrorDetails
import org.openapitools.client.models.ErrorList
import org.openapitools.client.models.ExecuteSearchBalanceResponse
import org.openapitools.client.models.ExecuteSearchSequenceResponse
import org.openapitools.client.models.InternalServerErrorSchema
import org.openapitools.client.models.PrepareSearchResponseSchema
import org.openapitools.client.models.PrepareSearchSchema

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AddressSearchApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "https://api.sandbox.overledger.io")
        }
    }

    /**
    * Prepare and automatically execute a search for an address balance on a DLT.
    * Generates a request ID and automatically executes the address balance search on the requested DLT.
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return AutoExecuteSearchAddressBalanceResponseSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun autoExecuteSearchAddressBalanceRequest(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : AutoExecuteSearchAddressBalanceResponseSchema {
        val localVariableConfig = autoExecuteSearchAddressBalanceRequestRequestConfig(authorization = authorization, addressId = addressId, prepareSearchSchema = prepareSearchSchema)

        val localVarResponse = request<PrepareSearchSchema, AutoExecuteSearchAddressBalanceResponseSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AutoExecuteSearchAddressBalanceResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation autoExecuteSearchAddressBalanceRequest
    *
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return RequestConfig
    */
    fun autoExecuteSearchAddressBalanceRequestRequestConfig(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : RequestConfig<PrepareSearchSchema> {
        val localVariableBody = prepareSearchSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/autoexecution/search/address/balance/{addressId}".replace("{"+"addressId"+"}", "$addressId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Execute a search for an address balance on a DLT
    * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
    * @param authorization  
    * @param requestId  
    * @return ExecuteSearchBalanceResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun executePreparedSearchRequestAddressBalance(authorization: kotlin.String, requestId: kotlin.String) : ExecuteSearchBalanceResponse {
        val localVariableConfig = executePreparedSearchRequestAddressBalanceRequestConfig(authorization = authorization, requestId = requestId)

        val localVarResponse = request<Unit, ExecuteSearchBalanceResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExecuteSearchBalanceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation executePreparedSearchRequestAddressBalance
    *
    * @param authorization  
    * @param requestId  
    * @return RequestConfig
    */
    fun executePreparedSearchRequestAddressBalanceRequestConfig(authorization: kotlin.String, requestId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("requestId", listOf(requestId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/execution/search/address/balance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Execute a search for an address sequence on a DLT
    * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s
    * @param authorization  
    * @param requestId  
    * @return ExecuteSearchSequenceResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun executePreparedSearchRequestAddressSequence(authorization: kotlin.String, requestId: kotlin.String) : ExecuteSearchSequenceResponse {
        val localVariableConfig = executePreparedSearchRequestAddressSequenceRequestConfig(authorization = authorization, requestId = requestId)

        val localVarResponse = request<Unit, ExecuteSearchSequenceResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExecuteSearchSequenceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation executePreparedSearchRequestAddressSequence
    *
    * @param authorization  
    * @param requestId  
    * @return RequestConfig
    */
    fun executePreparedSearchRequestAddressSequenceRequestConfig(authorization: kotlin.String, requestId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("requestId", listOf(requestId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/execution/search/address/sequence",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Prepare Search for an Address Balance.
    * Perform an address balance search on the requested DLT. Returns a request ID to execute
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return PrepareSearchResponseSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun prepareAddressBalanceSearchRequest(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : PrepareSearchResponseSchema {
        val localVariableConfig = prepareAddressBalanceSearchRequestRequestConfig(authorization = authorization, addressId = addressId, prepareSearchSchema = prepareSearchSchema)

        val localVarResponse = request<PrepareSearchSchema, PrepareSearchResponseSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrepareSearchResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation prepareAddressBalanceSearchRequest
    *
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return RequestConfig
    */
    fun prepareAddressBalanceSearchRequestRequestConfig(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : RequestConfig<PrepareSearchSchema> {
        val localVariableBody = prepareSearchSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/preparation/search/address/balance/{addressId}".replace("{"+"addressId"+"}", "$addressId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Prepare Search for an Address Sequence.
    * Perform an address sequence search on the requested DLT.Returns a request ID to execute
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return PrepareSearchResponseSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun prepareAddressSequenceSearchRequest(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : PrepareSearchResponseSchema {
        val localVariableConfig = prepareAddressSequenceSearchRequestRequestConfig(authorization = authorization, addressId = addressId, prepareSearchSchema = prepareSearchSchema)

        val localVarResponse = request<PrepareSearchSchema, PrepareSearchResponseSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrepareSearchResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation prepareAddressSequenceSearchRequest
    *
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return RequestConfig
    */
    fun prepareAddressSequenceSearchRequestRequestConfig(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : RequestConfig<PrepareSearchSchema> {
        val localVariableBody = prepareSearchSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/preparation/search/address/sequence/{addressId}".replace("{"+"addressId"+"}", "$addressId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Prepare and automatically execute a search for an Address Sequence.
    * Generates a request ID and automatically executes the address sequence search on the requested DLT.
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return AutoExecSearchAddressSequenceResponseSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun prepareAddressSequenceSearchRequest1(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : AutoExecSearchAddressSequenceResponseSchema {
        val localVariableConfig = prepareAddressSequenceSearchRequest1RequestConfig(authorization = authorization, addressId = addressId, prepareSearchSchema = prepareSearchSchema)

        val localVarResponse = request<PrepareSearchSchema, AutoExecSearchAddressSequenceResponseSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AutoExecSearchAddressSequenceResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation prepareAddressSequenceSearchRequest1
    *
    * @param authorization  
    * @param addressId  
    * @param prepareSearchSchema  
    * @return RequestConfig
    */
    fun prepareAddressSequenceSearchRequest1RequestConfig(authorization: kotlin.String, addressId: kotlin.String, prepareSearchSchema: PrepareSearchSchema) : RequestConfig<PrepareSearchSchema> {
        val localVariableBody = prepareSearchSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/autoexecution/search/address/sequence/{addressId}".replace("{"+"addressId"+"}", "$addressId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
