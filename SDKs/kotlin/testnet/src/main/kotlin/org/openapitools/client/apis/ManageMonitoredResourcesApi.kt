/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AddressMonitoringDetailsSchema
import org.openapitools.client.models.DeleteResourceMonitoringAddressSchema
import org.openapitools.client.models.ErrorList
import org.openapitools.client.models.InternalServerErrorSchema
import org.openapitools.client.models.ResourceMonitoringAddressSchema
import org.openapitools.client.models.SmartContractMonitoringDetailsSchema
import org.openapitools.client.models.SmartContractMonitoringSchema
import org.openapitools.client.models.StatusUpdateMonitoringRequestSchema
import org.openapitools.client.models.UpdateAddressMonitoringSchema

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ManageMonitoredResourcesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "https://api.sandbox.overledger.io")
        }
    }

    /**
    * Stop monitoring a smart contract
    * Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
    * @param authorization  
    * @param resourceMonitoringId  
    * @return SmartContractMonitoringSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteEventMonitoring(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : SmartContractMonitoringSchema {
        val localVariableConfig = deleteEventMonitoringRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId)

        val localVarResponse = request<Unit, SmartContractMonitoringSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SmartContractMonitoringSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteEventMonitoring
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @return RequestConfig
    */
    fun deleteEventMonitoringRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Stop monitoring an address
    * Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
    * @param authorization  
    * @param resourceMonitoringId  
    * @return DeleteResourceMonitoringAddressSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteResourceMonitoringAddress(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : DeleteResourceMonitoringAddressSchema {
        val localVariableConfig = deleteResourceMonitoringAddressRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId)

        val localVarResponse = request<Unit, DeleteResourceMonitoringAddressSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteResourceMonitoringAddressSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteResourceMonitoringAddress
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @return RequestConfig
    */
    fun deleteResourceMonitoringAddressRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v2/resourcemonitoring/address/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve a list of addresses being monitored
    * Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
    * @param authorization  
    * @return kotlin.collections.List<ResourceMonitoringAddressSchema>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getListOfAddresses(authorization: kotlin.String) : kotlin.collections.List<ResourceMonitoringAddressSchema> {
        val localVariableConfig = getListOfAddressesRequestConfig(authorization = authorization)

        val localVarResponse = request<Unit, kotlin.collections.List<ResourceMonitoringAddressSchema>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ResourceMonitoringAddressSchema>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getListOfAddresses
    *
    * @param authorization  
    * @return RequestConfig
    */
    fun getListOfAddressesRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/resourcemonitoring/addresses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve a list of all resources being monitored
    * Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
    * @param authorization  
    * @return kotlin.collections.List<SmartContractMonitoringSchema>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getListOfResources(authorization: kotlin.String) : kotlin.collections.List<SmartContractMonitoringSchema> {
        val localVariableConfig = getListOfResourcesRequestConfig(authorization = authorization)

        val localVarResponse = request<Unit, kotlin.collections.List<SmartContractMonitoringSchema>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SmartContractMonitoringSchema>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getListOfResources
    *
    * @param authorization  
    * @return RequestConfig
    */
    fun getListOfResourcesRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/resourcemonitoring",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve a list of smart contracts being monitored
    * Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
    * @param authorization  
    * @return kotlin.collections.List<SmartContractMonitoringSchema>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getListOfSmartContractEvents(authorization: kotlin.String) : kotlin.collections.List<SmartContractMonitoringSchema> {
        val localVariableConfig = getListOfSmartContractEventsRequestConfig(authorization = authorization)

        val localVarResponse = request<Unit, kotlin.collections.List<SmartContractMonitoringSchema>>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SmartContractMonitoringSchema>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getListOfSmartContractEvents
    *
    * @param authorization  
    * @return RequestConfig
    */
    fun getListOfSmartContractEventsRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/resourcemonitoring/smartcontractevents",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve recorded updates for a specific monitored address
    * Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
    * @param authorization  
    * @param resourceMonitoringId  
    * @return AddressMonitoringDetailsSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMonitoredAddress(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : AddressMonitoringDetailsSchema {
        val localVariableConfig = getMonitoredAddressRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId)

        val localVarResponse = request<Unit, AddressMonitoringDetailsSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AddressMonitoringDetailsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getMonitoredAddress
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @return RequestConfig
    */
    fun getMonitoredAddressRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/resourcemonitoring/address/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve recorded updates for a specific monitored smart contract
    * Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
    * @param authorization  
    * @param resourceMonitoringId  
    * @return SmartContractMonitoringDetailsSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMonitoredSmartContractEventDetails(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : SmartContractMonitoringDetailsSchema {
        val localVariableConfig = getMonitoredSmartContractEventDetailsRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId)

        val localVarResponse = request<Unit, SmartContractMonitoringDetailsSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SmartContractMonitoringDetailsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getMonitoredSmartContractEventDetails
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @return RequestConfig
    */
    fun getMonitoredSmartContractEventDetailsRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the monitoring status of a smart contract
    * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
    * @param authorization  
    * @param resourceMonitoringId  
    * @param statusUpdateMonitoringRequestSchema  
    * @return SmartContractMonitoringSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateEventMonitoring(authorization: kotlin.String, resourceMonitoringId: kotlin.String, statusUpdateMonitoringRequestSchema: StatusUpdateMonitoringRequestSchema) : SmartContractMonitoringSchema {
        val localVariableConfig = updateEventMonitoringRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId, statusUpdateMonitoringRequestSchema = statusUpdateMonitoringRequestSchema)

        val localVarResponse = request<StatusUpdateMonitoringRequestSchema, SmartContractMonitoringSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SmartContractMonitoringSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation updateEventMonitoring
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @param statusUpdateMonitoringRequestSchema  
    * @return RequestConfig
    */
    fun updateEventMonitoringRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String, statusUpdateMonitoringRequestSchema: StatusUpdateMonitoringRequestSchema) : RequestConfig<StatusUpdateMonitoringRequestSchema> {
        val localVariableBody = statusUpdateMonitoringRequestSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the monitoring status of an address
    * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
    * @param authorization  
    * @param resourceMonitoringId  
    * @param statusUpdateMonitoringRequestSchema  
    * @return UpdateAddressMonitoringSchema
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateResourceMonitoringAddress(authorization: kotlin.String, resourceMonitoringId: kotlin.String, statusUpdateMonitoringRequestSchema: StatusUpdateMonitoringRequestSchema) : UpdateAddressMonitoringSchema {
        val localVariableConfig = updateResourceMonitoringAddressRequestConfig(authorization = authorization, resourceMonitoringId = resourceMonitoringId, statusUpdateMonitoringRequestSchema = statusUpdateMonitoringRequestSchema)

        val localVarResponse = request<StatusUpdateMonitoringRequestSchema, UpdateAddressMonitoringSchema>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateAddressMonitoringSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation updateResourceMonitoringAddress
    *
    * @param authorization  
    * @param resourceMonitoringId  
    * @param statusUpdateMonitoringRequestSchema  
    * @return RequestConfig
    */
    fun updateResourceMonitoringAddressRequestConfig(authorization: kotlin.String, resourceMonitoringId: kotlin.String, statusUpdateMonitoringRequestSchema: StatusUpdateMonitoringRequestSchema) : RequestConfig<StatusUpdateMonitoringRequestSchema> {
        val localVariableBody = statusUpdateMonitoringRequestSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v2/resourcemonitoring/address/{resourceMonitoringId}".replace("{"+"resourceMonitoringId"+"}", "$resourceMonitoringId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
