/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Location
import org.openapitools.client.models.Status

import com.squareup.moshi.Json

/**
 * 
 *
 * @param urgency 
 * @param requestId The ID assigned to a preparation request in Overledger
 * @param overledgerTransactionId 
 * @param location 
 * @param type The type of the transaction executed
 * @param transactionId The ID assigned by Overledger to a transaction submitted to a DLT via Overledger
 * @param status 
 */

data class ExecuteTransactionResponse (

    @Json(name = "urgency")
    val urgency: kotlin.String? = null,

    /* The ID assigned to a preparation request in Overledger */
    @Json(name = "requestId")
    val requestId: kotlin.String? = null,

    @Json(name = "overledgerTransactionId")
    val overledgerTransactionId: kotlin.String? = null,

    @Json(name = "location")
    val location: Location? = null,

    /* The type of the transaction executed */
    @Json(name = "type")
    val type: kotlin.String? = null,

    /* The ID assigned by Overledger to a transaction submitted to a DLT via Overledger */
    @Json(name = "transactionId")
    val transactionId: kotlin.String? = null,

    @Json(name = "status")
    val status: Status? = null

)

