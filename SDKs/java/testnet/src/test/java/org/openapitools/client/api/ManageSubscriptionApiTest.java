/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.ListSubscriptionResponseSchema;
import org.openapitools.client.model.SubscriptionDeletionResponse;
import org.openapitools.client.model.SubscriptionUpdateResponse;
import org.openapitools.client.model.UpdateSubscriptionRequestSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageSubscriptionApi
 */
@Ignore
public class ManageSubscriptionApiTest {

    private final ManageSubscriptionApi api = new ManageSubscriptionApi();

    
    /**
     * Remove a subscription created by your application
     *
     * Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        String authorization = null;
        String subscriptionId = null;
                SubscriptionDeletionResponse response = api.deleteSubscription(authorization, subscriptionId);
        // TODO: test validations
    }
    
    /**
     * Retrieve a list of subscriptions created by your application
     *
     * Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSubscriptionsTest() throws ApiException {
        String authorization = null;
                List<ListSubscriptionResponseSchema> response = api.listSubscriptions(authorization);
        // TODO: test validations
    }
    
    /**
     * Update a specific subscription created by your application
     *
     * Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String authorization = null;
        String subscriptionId = null;
        UpdateSubscriptionRequestSchema updateSubscriptionRequestSchema = null;
                SubscriptionUpdateResponse response = api.updateSubscription(authorization, subscriptionId, updateSubscriptionRequestSchema);
        // TODO: test validations
    }
    
}
