/*
 * Quant Overledger API
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.OverledgerTransactionResponseSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MDappTransactionQueryApi
 */
@Ignore
public class MDappTransactionQueryApiTest {

    private final MDappTransactionQueryApi api = new MDappTransactionQueryApi();

    
    /**
     * Retrieve information about a specific transaction created by your application in Overledger
     *
     * Returns information for a specific transaction based on a given Overledger Transaction ID. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOvlTransactionByTxIdTest() throws ApiException {
        String authorization = null;
        String overledgertransactionid = null;
                OverledgerTransactionResponseSchema response = api.getOvlTransactionByTxId(authorization, overledgertransactionid);
        // TODO: test validations
    }
    
    /**
     * Retrieve a list of transactions created by your application in Overledger
     *
     * Returns a list of transactions and the corresponding Overledger Transaction ID your application has created in Overledger. Does not require a Prepare step, as this data is held within Overledger, rather than on the DLT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOvlTransactionsByClientIdTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer length = null;
                List<OverledgerTransactionResponseSchema> response = api.getOvlTransactionsByClientId(authorization, offset, length);
        // TODO: test validations
    }
    
}
