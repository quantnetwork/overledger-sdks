/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.PreparePaymentTransactionRequestSchema;
import org.openapitools.client.model.PrepareTransactionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreateAQrc721TokenCollectionTransactionApi
 */
@Ignore
public class CreateAQrc721TokenCollectionTransactionApiTest {

    private final CreateAQrc721TokenCollectionTransactionApi api = new CreateAQrc721TokenCollectionTransactionApi();

    
    /**
     * Prepare a QRC721 token collection transaction for signing
     *
     * Transforms a transaction request ready to be signed and returns a request ID for executing. The supported transaction types are “Approve Asset Collect” and “Collect Asset”. The “Approve Asset Collect” transaction type will allow you to approve someone to subsequently make a transaction that takes the NFT from your address into their own. The “Collect Asset” transaction type will create the transaction to pull the approved NFT from an account into the receiving account. Successfully prepared transactions can then be executed using the /execution/transaction API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareCollectRequestTest() throws ApiException {
        String authorization = null;
        PreparePaymentTransactionRequestSchema preparePaymentTransactionRequestSchema = null;
                PrepareTransactionResponse response = api.prepareCollectRequest(authorization, preparePaymentTransactionRequestSchema);
        // TODO: test validations
    }
    
}
