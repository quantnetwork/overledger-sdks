/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressMonitoringDetailsSchema;
import org.openapitools.client.model.DeleteResourceMonitoringAddressSchema;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.ResourceMonitoringAddressSchema;
import org.openapitools.client.model.SmartContractMonitoringDetailsSchema;
import org.openapitools.client.model.SmartContractMonitoringSchema;
import org.openapitools.client.model.StatusUpdateMonitoringRequestSchema;
import org.openapitools.client.model.UpdateAddressMonitoringSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageMonitoredResourcesApi
 */
@Ignore
public class ManageMonitoredResourcesApiTest {

    private final ManageMonitoredResourcesApi api = new ManageMonitoredResourcesApi();

    
    /**
     * Stop monitoring a smart contract
     *
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventMonitoringTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
                SmartContractMonitoringSchema response = api.deleteEventMonitoring(authorization, resourceMonitoringId);
        // TODO: test validations
    }
    
    /**
     * Stop monitoring an address
     *
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourceMonitoringAddressTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
                DeleteResourceMonitoringAddressSchema response = api.deleteResourceMonitoringAddress(authorization, resourceMonitoringId);
        // TODO: test validations
    }
    
    /**
     * Retrieve a list of addresses being monitored
     *
     * Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfAddressesTest() throws ApiException {
        String authorization = null;
                List<ResourceMonitoringAddressSchema> response = api.getListOfAddresses(authorization);
        // TODO: test validations
    }
    
    /**
     * Retrieve a list of all resources being monitored
     *
     * Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfResourcesTest() throws ApiException {
        String authorization = null;
                List<SmartContractMonitoringSchema> response = api.getListOfResources(authorization);
        // TODO: test validations
    }
    
    /**
     * Retrieve a list of smart contracts being monitored
     *
     * Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfSmartContractEventsTest() throws ApiException {
        String authorization = null;
                List<SmartContractMonitoringSchema> response = api.getListOfSmartContractEvents(authorization);
        // TODO: test validations
    }
    
    /**
     * Retrieve recorded updates for a specific monitored address
     *
     * Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonitoredAddressTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
                AddressMonitoringDetailsSchema response = api.getMonitoredAddress(authorization, resourceMonitoringId);
        // TODO: test validations
    }
    
    /**
     * Retrieve recorded updates for a specific monitored smart contract
     *
     * Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonitoredSmartContractEventDetailsTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
                SmartContractMonitoringDetailsSchema response = api.getMonitoredSmartContractEventDetails(authorization, resourceMonitoringId);
        // TODO: test validations
    }
    
    /**
     * Update the monitoring status of a smart contract
     *
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventMonitoringTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
        StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema = null;
                SmartContractMonitoringSchema response = api.updateEventMonitoring(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
        // TODO: test validations
    }
    
    /**
     * Update the monitoring status of an address
     *
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResourceMonitoringAddressTest() throws ApiException {
        String authorization = null;
        String resourceMonitoringId = null;
        StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema = null;
                UpdateAddressMonitoringSchema response = api.updateResourceMonitoringAddress(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
        // TODO: test validations
    }
    
}
