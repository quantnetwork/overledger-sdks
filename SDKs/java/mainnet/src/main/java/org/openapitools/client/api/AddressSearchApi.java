/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.ExecuteSearchBalanceResponse;
import org.openapitools.client.model.ExecuteSearchSequenceResponse;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.PrepareSearchResponseSchema;
import org.openapitools.client.model.PrepareSearchSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressSearchApi {
    private ApiClient localVarApiClient;

    public AddressSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for executePreparedSearchRequestAddressBalance
     * @param authorization  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executePreparedSearchRequestAddressBalanceCall(String authorization, String requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/execution/search/address/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executePreparedSearchRequestAddressBalanceValidateBeforeCall(String authorization, String requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling executePreparedSearchRequestAddressBalance(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling executePreparedSearchRequestAddressBalance(Async)");
        }
        

        okhttp3.Call localVarCall = executePreparedSearchRequestAddressBalanceCall(authorization, requestId, _callback);
        return localVarCall;

    }

    /**
     * Execute a search for an address balance on a DLT
     * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
     * @param authorization  (required)
     * @param requestId  (required)
     * @return ExecuteSearchBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteSearchBalanceResponse executePreparedSearchRequestAddressBalance(String authorization, String requestId) throws ApiException {
        ApiResponse<ExecuteSearchBalanceResponse> localVarResp = executePreparedSearchRequestAddressBalanceWithHttpInfo(authorization, requestId);
        return localVarResp.getData();
    }

    /**
     * Execute a search for an address balance on a DLT
     * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
     * @param authorization  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;ExecuteSearchBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecuteSearchBalanceResponse> executePreparedSearchRequestAddressBalanceWithHttpInfo(String authorization, String requestId) throws ApiException {
        okhttp3.Call localVarCall = executePreparedSearchRequestAddressBalanceValidateBeforeCall(authorization, requestId, null);
        Type localVarReturnType = new TypeToken<ExecuteSearchBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a search for an address balance on a DLT (asynchronously)
     * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
     * @param authorization  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executePreparedSearchRequestAddressBalanceAsync(String authorization, String requestId, final ApiCallback<ExecuteSearchBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executePreparedSearchRequestAddressBalanceValidateBeforeCall(authorization, requestId, _callback);
        Type localVarReturnType = new TypeToken<ExecuteSearchBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executePreparedSearchRequestAddressSequence
     * @param authorization  (required)
     * @param requestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executePreparedSearchRequestAddressSequenceCall(String authorization, String requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/execution/search/address/sequence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executePreparedSearchRequestAddressSequenceValidateBeforeCall(String authorization, String requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling executePreparedSearchRequestAddressSequence(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling executePreparedSearchRequestAddressSequence(Async)");
        }
        

        okhttp3.Call localVarCall = executePreparedSearchRequestAddressSequenceCall(authorization, requestId, _callback);
        return localVarCall;

    }

    /**
     * Execute a search for an address sequence on a DLT
     * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s
     * @param authorization  (required)
     * @param requestId  (required)
     * @return ExecuteSearchSequenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteSearchSequenceResponse executePreparedSearchRequestAddressSequence(String authorization, String requestId) throws ApiException {
        ApiResponse<ExecuteSearchSequenceResponse> localVarResp = executePreparedSearchRequestAddressSequenceWithHttpInfo(authorization, requestId);
        return localVarResp.getData();
    }

    /**
     * Execute a search for an address sequence on a DLT
     * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s
     * @param authorization  (required)
     * @param requestId  (required)
     * @return ApiResponse&lt;ExecuteSearchSequenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecuteSearchSequenceResponse> executePreparedSearchRequestAddressSequenceWithHttpInfo(String authorization, String requestId) throws ApiException {
        okhttp3.Call localVarCall = executePreparedSearchRequestAddressSequenceValidateBeforeCall(authorization, requestId, null);
        Type localVarReturnType = new TypeToken<ExecuteSearchSequenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a search for an address sequence on a DLT (asynchronously)
     * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT’s
     * @param authorization  (required)
     * @param requestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executePreparedSearchRequestAddressSequenceAsync(String authorization, String requestId, final ApiCallback<ExecuteSearchSequenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executePreparedSearchRequestAddressSequenceValidateBeforeCall(authorization, requestId, _callback);
        Type localVarReturnType = new TypeToken<ExecuteSearchSequenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prepareAddressBalanceSearchRequest
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prepareAddressBalanceSearchRequestCall(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = prepareSearchSchema;

        // create path and map variables
        String localVarPath = "/v2/preparation/search/address/balance/{addressId}"
            .replaceAll("\\{" + "addressId" + "\\}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prepareAddressBalanceSearchRequestValidateBeforeCall(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling prepareAddressBalanceSearchRequest(Async)");
        }
        
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling prepareAddressBalanceSearchRequest(Async)");
        }
        
        // verify the required parameter 'prepareSearchSchema' is set
        if (prepareSearchSchema == null) {
            throw new ApiException("Missing the required parameter 'prepareSearchSchema' when calling prepareAddressBalanceSearchRequest(Async)");
        }
        

        okhttp3.Call localVarCall = prepareAddressBalanceSearchRequestCall(authorization, addressId, prepareSearchSchema, _callback);
        return localVarCall;

    }

    /**
     * Prepare Search for an Address Balance.
     * Perform an address balance search on the requested DLT. Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @return PrepareSearchResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public PrepareSearchResponseSchema prepareAddressBalanceSearchRequest(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema) throws ApiException {
        ApiResponse<PrepareSearchResponseSchema> localVarResp = prepareAddressBalanceSearchRequestWithHttpInfo(authorization, addressId, prepareSearchSchema);
        return localVarResp.getData();
    }

    /**
     * Prepare Search for an Address Balance.
     * Perform an address balance search on the requested DLT. Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @return ApiResponse&lt;PrepareSearchResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrepareSearchResponseSchema> prepareAddressBalanceSearchRequestWithHttpInfo(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema) throws ApiException {
        okhttp3.Call localVarCall = prepareAddressBalanceSearchRequestValidateBeforeCall(authorization, addressId, prepareSearchSchema, null);
        Type localVarReturnType = new TypeToken<PrepareSearchResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepare Search for an Address Balance. (asynchronously)
     * Perform an address balance search on the requested DLT. Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prepareAddressBalanceSearchRequestAsync(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback<PrepareSearchResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = prepareAddressBalanceSearchRequestValidateBeforeCall(authorization, addressId, prepareSearchSchema, _callback);
        Type localVarReturnType = new TypeToken<PrepareSearchResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prepareAddressSequenceSearchRequest
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prepareAddressSequenceSearchRequestCall(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = prepareSearchSchema;

        // create path and map variables
        String localVarPath = "/v2/preparation/search/address/sequence/{addressId}"
            .replaceAll("\\{" + "addressId" + "\\}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prepareAddressSequenceSearchRequestValidateBeforeCall(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling prepareAddressSequenceSearchRequest(Async)");
        }
        
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling prepareAddressSequenceSearchRequest(Async)");
        }
        
        // verify the required parameter 'prepareSearchSchema' is set
        if (prepareSearchSchema == null) {
            throw new ApiException("Missing the required parameter 'prepareSearchSchema' when calling prepareAddressSequenceSearchRequest(Async)");
        }
        

        okhttp3.Call localVarCall = prepareAddressSequenceSearchRequestCall(authorization, addressId, prepareSearchSchema, _callback);
        return localVarCall;

    }

    /**
     * Prepare Search for an Address Sequence.
     * Perform an address sequence search on the requested DLT.Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @return PrepareSearchResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public PrepareSearchResponseSchema prepareAddressSequenceSearchRequest(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema) throws ApiException {
        ApiResponse<PrepareSearchResponseSchema> localVarResp = prepareAddressSequenceSearchRequestWithHttpInfo(authorization, addressId, prepareSearchSchema);
        return localVarResp.getData();
    }

    /**
     * Prepare Search for an Address Sequence.
     * Perform an address sequence search on the requested DLT.Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @return ApiResponse&lt;PrepareSearchResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrepareSearchResponseSchema> prepareAddressSequenceSearchRequestWithHttpInfo(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema) throws ApiException {
        okhttp3.Call localVarCall = prepareAddressSequenceSearchRequestValidateBeforeCall(authorization, addressId, prepareSearchSchema, null);
        Type localVarReturnType = new TypeToken<PrepareSearchResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepare Search for an Address Sequence. (asynchronously)
     * Perform an address sequence search on the requested DLT.Returns a request ID to execute
     * @param authorization  (required)
     * @param addressId  (required)
     * @param prepareSearchSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prepareAddressSequenceSearchRequestAsync(String authorization, String addressId, PrepareSearchSchema prepareSearchSchema, final ApiCallback<PrepareSearchResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = prepareAddressSequenceSearchRequestValidateBeforeCall(authorization, addressId, prepareSearchSchema, _callback);
        Type localVarReturnType = new TypeToken<PrepareSearchResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
