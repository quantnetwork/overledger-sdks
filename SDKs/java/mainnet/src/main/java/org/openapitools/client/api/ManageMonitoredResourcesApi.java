/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressMonitoringDetailsSchema;
import org.openapitools.client.model.DeleteResourceMonitoringAddressSchema;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.ResourceMonitoringAddressSchema;
import org.openapitools.client.model.SmartContractMonitoringDetailsSchema;
import org.openapitools.client.model.SmartContractMonitoringSchema;
import org.openapitools.client.model.StatusUpdateMonitoringRequestSchema;
import org.openapitools.client.model.UpdateAddressMonitoringSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManageMonitoredResourcesApi {
    private ApiClient localVarApiClient;

    public ManageMonitoredResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManageMonitoredResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteEventMonitoring
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventMonitoringCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventMonitoringValidateBeforeCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEventMonitoring(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling deleteEventMonitoring(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEventMonitoringCall(authorization, resourceMonitoringId, _callback);
        return localVarCall;

    }

    /**
     * Stop monitoring a smart contract
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return SmartContractMonitoringSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public SmartContractMonitoringSchema deleteEventMonitoring(String authorization, String resourceMonitoringId) throws ApiException {
        ApiResponse<SmartContractMonitoringSchema> localVarResp = deleteEventMonitoringWithHttpInfo(authorization, resourceMonitoringId);
        return localVarResp.getData();
    }

    /**
     * Stop monitoring a smart contract
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return ApiResponse&lt;SmartContractMonitoringSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContractMonitoringSchema> deleteEventMonitoringWithHttpInfo(String authorization, String resourceMonitoringId) throws ApiException {
        okhttp3.Call localVarCall = deleteEventMonitoringValidateBeforeCall(authorization, resourceMonitoringId, null);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop monitoring a smart contract (asynchronously)
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventMonitoringAsync(String authorization, String resourceMonitoringId, final ApiCallback<SmartContractMonitoringSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventMonitoringValidateBeforeCall(authorization, resourceMonitoringId, _callback);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceMonitoringAddress
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceMonitoringAddressCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceMonitoringAddressValidateBeforeCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteResourceMonitoringAddress(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling deleteResourceMonitoringAddress(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourceMonitoringAddressCall(authorization, resourceMonitoringId, _callback);
        return localVarCall;

    }

    /**
     * Stop monitoring an address
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return DeleteResourceMonitoringAddressSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResourceMonitoringAddressSchema deleteResourceMonitoringAddress(String authorization, String resourceMonitoringId) throws ApiException {
        ApiResponse<DeleteResourceMonitoringAddressSchema> localVarResp = deleteResourceMonitoringAddressWithHttpInfo(authorization, resourceMonitoringId);
        return localVarResp.getData();
    }

    /**
     * Stop monitoring an address
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return ApiResponse&lt;DeleteResourceMonitoringAddressSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteResourceMonitoringAddressSchema> deleteResourceMonitoringAddressWithHttpInfo(String authorization, String resourceMonitoringId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceMonitoringAddressValidateBeforeCall(authorization, resourceMonitoringId, null);
        Type localVarReturnType = new TypeToken<DeleteResourceMonitoringAddressSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop monitoring an address (asynchronously)
     * Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceMonitoringAddressAsync(String authorization, String resourceMonitoringId, final ApiCallback<DeleteResourceMonitoringAddressSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceMonitoringAddressValidateBeforeCall(authorization, resourceMonitoringId, _callback);
        Type localVarReturnType = new TypeToken<DeleteResourceMonitoringAddressSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfAddresses
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfAddressesCall(String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfAddressesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getListOfAddresses(Async)");
        }
        

        okhttp3.Call localVarCall = getListOfAddressesCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a list of addresses being monitored
     * Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return List&lt;ResourceMonitoringAddressSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceMonitoringAddressSchema> getListOfAddresses(String authorization) throws ApiException {
        ApiResponse<List<ResourceMonitoringAddressSchema>> localVarResp = getListOfAddressesWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of addresses being monitored
     * Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;ResourceMonitoringAddressSchema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceMonitoringAddressSchema>> getListOfAddressesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getListOfAddressesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ResourceMonitoringAddressSchema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of addresses being monitored (asynchronously)
     * Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfAddressesAsync(String authorization, final ApiCallback<List<ResourceMonitoringAddressSchema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfAddressesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceMonitoringAddressSchema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfResources
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfResourcesCall(String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfResourcesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getListOfResources(Async)");
        }
        

        okhttp3.Call localVarCall = getListOfResourcesCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a list of all resources being monitored
     * Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return List&lt;SmartContractMonitoringSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public List<SmartContractMonitoringSchema> getListOfResources(String authorization) throws ApiException {
        ApiResponse<List<SmartContractMonitoringSchema>> localVarResp = getListOfResourcesWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all resources being monitored
     * Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;SmartContractMonitoringSchema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SmartContractMonitoringSchema>> getListOfResourcesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getListOfResourcesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<SmartContractMonitoringSchema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all resources being monitored (asynchronously)
     * Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfResourcesAsync(String authorization, final ApiCallback<List<SmartContractMonitoringSchema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfResourcesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<SmartContractMonitoringSchema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfSmartContractEvents
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfSmartContractEventsCall(String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/smartcontractevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfSmartContractEventsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getListOfSmartContractEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getListOfSmartContractEventsCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a list of smart contracts being monitored
     * Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return List&lt;SmartContractMonitoringSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public List<SmartContractMonitoringSchema> getListOfSmartContractEvents(String authorization) throws ApiException {
        ApiResponse<List<SmartContractMonitoringSchema>> localVarResp = getListOfSmartContractEventsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of smart contracts being monitored
     * Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;SmartContractMonitoringSchema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SmartContractMonitoringSchema>> getListOfSmartContractEventsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getListOfSmartContractEventsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<SmartContractMonitoringSchema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of smart contracts being monitored (asynchronously)
     * Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfSmartContractEventsAsync(String authorization, final ApiCallback<List<SmartContractMonitoringSchema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfSmartContractEventsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<SmartContractMonitoringSchema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMonitoredAddress
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoredAddressCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoredAddressValidateBeforeCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMonitoredAddress(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling getMonitoredAddress(Async)");
        }
        

        okhttp3.Call localVarCall = getMonitoredAddressCall(authorization, resourceMonitoringId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve recorded updates for a specific monitored address
     * Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return AddressMonitoringDetailsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public AddressMonitoringDetailsSchema getMonitoredAddress(String authorization, String resourceMonitoringId) throws ApiException {
        ApiResponse<AddressMonitoringDetailsSchema> localVarResp = getMonitoredAddressWithHttpInfo(authorization, resourceMonitoringId);
        return localVarResp.getData();
    }

    /**
     * Retrieve recorded updates for a specific monitored address
     * Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return ApiResponse&lt;AddressMonitoringDetailsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressMonitoringDetailsSchema> getMonitoredAddressWithHttpInfo(String authorization, String resourceMonitoringId) throws ApiException {
        okhttp3.Call localVarCall = getMonitoredAddressValidateBeforeCall(authorization, resourceMonitoringId, null);
        Type localVarReturnType = new TypeToken<AddressMonitoringDetailsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve recorded updates for a specific monitored address (asynchronously)
     * Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoredAddressAsync(String authorization, String resourceMonitoringId, final ApiCallback<AddressMonitoringDetailsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoredAddressValidateBeforeCall(authorization, resourceMonitoringId, _callback);
        Type localVarReturnType = new TypeToken<AddressMonitoringDetailsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMonitoredSmartContractEventDetails
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoredSmartContractEventDetailsCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoredSmartContractEventDetailsValidateBeforeCall(String authorization, String resourceMonitoringId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMonitoredSmartContractEventDetails(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling getMonitoredSmartContractEventDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMonitoredSmartContractEventDetailsCall(authorization, resourceMonitoringId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve recorded updates for a specific monitored smart contract
     * Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return SmartContractMonitoringDetailsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public SmartContractMonitoringDetailsSchema getMonitoredSmartContractEventDetails(String authorization, String resourceMonitoringId) throws ApiException {
        ApiResponse<SmartContractMonitoringDetailsSchema> localVarResp = getMonitoredSmartContractEventDetailsWithHttpInfo(authorization, resourceMonitoringId);
        return localVarResp.getData();
    }

    /**
     * Retrieve recorded updates for a specific monitored smart contract
     * Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @return ApiResponse&lt;SmartContractMonitoringDetailsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContractMonitoringDetailsSchema> getMonitoredSmartContractEventDetailsWithHttpInfo(String authorization, String resourceMonitoringId) throws ApiException {
        okhttp3.Call localVarCall = getMonitoredSmartContractEventDetailsValidateBeforeCall(authorization, resourceMonitoringId, null);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringDetailsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve recorded updates for a specific monitored smart contract (asynchronously)
     * Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitoredSmartContractEventDetailsAsync(String authorization, String resourceMonitoringId, final ApiCallback<SmartContractMonitoringDetailsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoredSmartContractEventDetailsValidateBeforeCall(authorization, resourceMonitoringId, _callback);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringDetailsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventMonitoring
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventMonitoringCall(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = statusUpdateMonitoringRequestSchema;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventMonitoringValidateBeforeCall(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateEventMonitoring(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling updateEventMonitoring(Async)");
        }
        
        // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
        if (statusUpdateMonitoringRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'statusUpdateMonitoringRequestSchema' when calling updateEventMonitoring(Async)");
        }
        

        okhttp3.Call localVarCall = updateEventMonitoringCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, _callback);
        return localVarCall;

    }

    /**
     * Update the monitoring status of a smart contract
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @return SmartContractMonitoringSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public SmartContractMonitoringSchema updateEventMonitoring(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema) throws ApiException {
        ApiResponse<SmartContractMonitoringSchema> localVarResp = updateEventMonitoringWithHttpInfo(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
        return localVarResp.getData();
    }

    /**
     * Update the monitoring status of a smart contract
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @return ApiResponse&lt;SmartContractMonitoringSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContractMonitoringSchema> updateEventMonitoringWithHttpInfo(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema) throws ApiException {
        okhttp3.Call localVarCall = updateEventMonitoringValidateBeforeCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, null);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the monitoring status of a smart contract (asynchronously)
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventMonitoringAsync(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback<SmartContractMonitoringSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventMonitoringValidateBeforeCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, _callback);
        Type localVarReturnType = new TypeToken<SmartContractMonitoringSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceMonitoringAddress
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceMonitoringAddressCall(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = statusUpdateMonitoringRequestSchema;

        // create path and map variables
        String localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}"
            .replaceAll("\\{" + "resourceMonitoringId" + "\\}", localVarApiClient.escapeString(resourceMonitoringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2_Security_Scheme" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceMonitoringAddressValidateBeforeCall(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateResourceMonitoringAddress(Async)");
        }
        
        // verify the required parameter 'resourceMonitoringId' is set
        if (resourceMonitoringId == null) {
            throw new ApiException("Missing the required parameter 'resourceMonitoringId' when calling updateResourceMonitoringAddress(Async)");
        }
        
        // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
        if (statusUpdateMonitoringRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'statusUpdateMonitoringRequestSchema' when calling updateResourceMonitoringAddress(Async)");
        }
        

        okhttp3.Call localVarCall = updateResourceMonitoringAddressCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, _callback);
        return localVarCall;

    }

    /**
     * Update the monitoring status of an address
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @return UpdateAddressMonitoringSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAddressMonitoringSchema updateResourceMonitoringAddress(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema) throws ApiException {
        ApiResponse<UpdateAddressMonitoringSchema> localVarResp = updateResourceMonitoringAddressWithHttpInfo(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
        return localVarResp.getData();
    }

    /**
     * Update the monitoring status of an address
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @return ApiResponse&lt;UpdateAddressMonitoringSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAddressMonitoringSchema> updateResourceMonitoringAddressWithHttpInfo(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema) throws ApiException {
        okhttp3.Call localVarCall = updateResourceMonitoringAddressValidateBeforeCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, null);
        Type localVarReturnType = new TypeToken<UpdateAddressMonitoringSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the monitoring status of an address (asynchronously)
     * Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
     * @param authorization  (required)
     * @param resourceMonitoringId  (required)
     * @param statusUpdateMonitoringRequestSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All good! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorised </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong on our side </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceMonitoringAddressAsync(String authorization, String resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, final ApiCallback<UpdateAddressMonitoringSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceMonitoringAddressValidateBeforeCall(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, _callback);
        Type localVarReturnType = new TypeToken<UpdateAddressMonitoringSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
