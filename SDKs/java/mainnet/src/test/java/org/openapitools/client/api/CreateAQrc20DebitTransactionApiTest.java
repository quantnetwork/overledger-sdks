/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.ExecuteTransactionRequest;
import org.openapitools.client.model.ExecuteTransactionResponse;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.PrepareCreditTransactionRequestSchema;
import org.openapitools.client.model.PrepareTransactionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreateAQrc20DebitTransactionApi
 */
@Ignore
public class CreateAQrc20DebitTransactionApiTest {

    private final CreateAQrc20DebitTransactionApi api = new CreateAQrc20DebitTransactionApi();

    
    /**
     * Execute a transaction on a DLT
     *
     * Takes a request ID and submits a signed transaction to the requested DLT.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePreparedRequestTransactionTest() throws ApiException {
        String authorization = null;
        ExecuteTransactionRequest executeTransactionRequest = null;
                ExecuteTransactionResponse response = api.executePreparedRequestTransaction(authorization, executeTransactionRequest);
        // TODO: test validations
    }
    
    /**
     * Prepare a QRC20 token debit transaction for signing
     *
     * Transforms a transaction request ready to be signed and returns a request ID for executing. The supported transaction types are “Approve Debit” and “Create Debit”. The ‘Approve Debit’ transaction type will allow you to approve someone to make a pull payment from your account and the “Create Debit” transaction type will create the payment to pull the approved amount from an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareDebitRequestTest() throws ApiException {
        String authorization = null;
        PrepareCreditTransactionRequestSchema prepareCreditTransactionRequestSchema = null;
                PrepareTransactionResponse response = api.prepareDebitRequest(authorization, prepareCreditTransactionRequestSchema);
        // TODO: test validations
    }
    
}
