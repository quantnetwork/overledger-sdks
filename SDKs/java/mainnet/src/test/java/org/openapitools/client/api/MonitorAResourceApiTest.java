/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressMonitoringRequestSchema;
import org.openapitools.client.model.AddressMonitoringResponseSchema;
import org.openapitools.client.model.CreateSmartContractMonitoringSchema;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.MonitorSmartContractRequestSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitorAResourceApi
 */
@Ignore
public class MonitorAResourceApiTest {

    private final MonitorAResourceApi api = new MonitorAResourceApi();

    
    /**
     * Monitor an address for incoming and outgoing transactions
     *
     * Overledger creates a tracking record for the given address and records information each time the given address receives or sends transactions on the DLT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceMonitoringAddressTest() throws ApiException {
        String authorization = null;
        AddressMonitoringRequestSchema addressMonitoringRequestSchema = null;
                AddressMonitoringResponseSchema response = api.resourceMonitoringAddress(authorization, addressMonitoringRequestSchema);
        // TODO: test validations
    }
    
    /**
     * Monitor a smart contract for an event
     *
     * Overledger creates a tracking record for the given smart contract and records information each time a transaction on the DLT triggers a specific event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackAndSubscribeEventTest() throws ApiException {
        String authorization = null;
        MonitorSmartContractRequestSchema monitorSmartContractRequestSchema = null;
                CreateSmartContractMonitoringSchema response = api.trackAndSubscribeEvent(authorization, monitorSmartContractRequestSchema);
        // TODO: test validations
    }
    
}
