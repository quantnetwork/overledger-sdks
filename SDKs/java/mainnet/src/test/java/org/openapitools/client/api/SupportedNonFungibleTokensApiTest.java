/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseMessage;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.NonFungibleTokenResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupportedNonFungibleTokensApi
 */
@Ignore
public class SupportedNonFungibleTokensApiTest {

    private final SupportedNonFungibleTokensApi api = new SupportedNonFungibleTokensApi();

    
    /**
     * Retrieve a list of ERC721 and QRC721 tokens
     *
     * Retrieves a list of non-fungible tokens supported by Overledger and which API&#39;s and functions you can use for each. You can retrieve all non-fungible token types for all locations without providing parameters. If you want to see what tokens are supported for a specific contract type you can pass in either ERC721 or QRC721 as a contract type parameter. You can then filter further by including the resource using technology and network parameters. You can also look for a specific token by passing in the tokenName as a parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllNonFungibleTokensTest() throws ApiException {
        String authorization = null;
        String contractType = null;
        String technology = null;
        String network = null;
        String tokenName = null;
                NonFungibleTokenResponse response = api.getAllNonFungibleTokens(authorization, contractType, technology, network, tokenName);
        // TODO: test validations
    }
    
}
