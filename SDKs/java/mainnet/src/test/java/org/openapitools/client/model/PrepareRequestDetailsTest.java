/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AccountDetails;
import org.openapitools.client.model.AdditionalOwner;
import org.openapitools.client.model.AliasDetails;
import org.openapitools.client.model.Beneficiary;
import org.openapitools.client.model.Collector;
import org.openapitools.client.model.Creator;
import org.openapitools.client.model.Destination;
import org.openapitools.client.model.LockDetails;
import org.openapitools.client.model.Mandate;
import org.openapitools.client.model.Origin;
import org.openapitools.client.model.Owner;
import org.openapitools.client.model.Pagination;
import org.openapitools.client.model.Payee;
import org.openapitools.client.model.Payer;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Receiver;
import org.openapitools.client.model.Sender;
import org.openapitools.client.model.SignerAccount;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for PrepareRequestDetails
 */
public class PrepareRequestDetailsTest {
    private final PrepareRequestDetails model = new PrepareRequestDetails();

    /**
     * Model tests for PrepareRequestDetails
     */
    @Test
    public void testPrepareRequestDetails() {
        // TODO: test PrepareRequestDetails
    }

    /**
     * Test the property 'mandate'
     */
    @Test
    public void mandateTest() {
        // TODO: test mandate
    }

    /**
     * Test the property 'aliasDetails'
     */
    @Test
    public void aliasDetailsTest() {
        // TODO: test aliasDetails
    }

    /**
     * Test the property 'pagination'
     */
    @Test
    public void paginationTest() {
        // TODO: test pagination
    }

    /**
     * Test the property 'origin'
     */
    @Test
    public void originTest() {
        // TODO: test origin
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'tokenName'
     */
    @Test
    public void tokenNameTest() {
        // TODO: test tokenName
    }

    /**
     * Test the property 'blockSearchType'
     */
    @Test
    public void blockSearchTypeTest() {
        // TODO: test blockSearchType
    }

    /**
     * Test the property 'payer'
     */
    @Test
    public void payerTest() {
        // TODO: test payer
    }

    /**
     * Test the property 'collector'
     */
    @Test
    public void collectorTest() {
        // TODO: test collector
    }

    /**
     * Test the property 'payee'
     */
    @Test
    public void payeeTest() {
        // TODO: test payee
    }

    /**
     * Test the property 'additionalOwner'
     */
    @Test
    public void additionalOwnerTest() {
        // TODO: test additionalOwner
    }

    /**
     * Test the property 'owner'
     */
    @Test
    public void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'creator'
     */
    @Test
    public void creatorTest() {
        // TODO: test creator
    }

    /**
     * Test the property 'receiver'
     */
    @Test
    public void receiverTest() {
        // TODO: test receiver
    }

    /**
     * Test the property 'tokenId'
     */
    @Test
    public void tokenIdTest() {
        // TODO: test tokenId
    }

    /**
     * Test the property 'message'
     */
    @Test
    public void messageTest() {
        // TODO: test message
    }

    /**
     * Test the property 'lockDetails'
     */
    @Test
    public void lockDetailsTest() {
        // TODO: test lockDetails
    }

    /**
     * Test the property 'blockId'
     */
    @Test
    public void blockIdTest() {
        // TODO: test blockId
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        // TODO: test accountId
    }

    /**
     * Test the property 'tokenUnit'
     */
    @Test
    public void tokenUnitTest() {
        // TODO: test tokenUnit
    }

    /**
     * Test the property 'beneficiary'
     */
    @Test
    public void beneficiaryTest() {
        // TODO: test beneficiary
    }

    /**
     * Test the property 'sender'
     */
    @Test
    public void senderTest() {
        // TODO: test sender
    }

    /**
     * Test the property 'accountDetails'
     */
    @Test
    public void accountDetailsTest() {
        // TODO: test accountDetails
    }

    /**
     * Test the property 'overledgerSigningType'
     */
    @Test
    public void overledgerSigningTypeTest() {
        // TODO: test overledgerSigningType
    }

    /**
     * Test the property 'totalPaymentAmount'
     */
    @Test
    public void totalPaymentAmountTest() {
        // TODO: test totalPaymentAmount
    }

    /**
     * Test the property 'signerAccount'
     */
    @Test
    public void signerAccountTest() {
        // TODO: test signerAccount
    }

}
