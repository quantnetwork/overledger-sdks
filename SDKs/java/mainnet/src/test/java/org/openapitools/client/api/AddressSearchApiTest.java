/*
 * Quant Overledger API
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoExecSearchAddressSequenceResponseSchema;
import org.openapitools.client.model.AutoExecuteSearchAddressBalanceResponseSchema;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.ExecuteSearchBalanceResponse;
import org.openapitools.client.model.ExecuteSearchSequenceResponse;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.PrepareSearchResponseSchema;
import org.openapitools.client.model.PrepareSearchSchema;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddressSearchApi
 */
@Ignore
public class AddressSearchApiTest {

    private final AddressSearchApi api = new AddressSearchApi();

    
    /**
     * Prepare and automatically execute a search for an address balance on a DLT.
     *
     * Generates a request ID and automatically executes the address balance search on the requested DLT.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoExecuteSearchAddressBalanceRequestTest() throws ApiException {
        String authorization = null;
        String addressId = null;
        PrepareSearchSchema prepareSearchSchema = null;
                AutoExecuteSearchAddressBalanceResponseSchema response = api.autoExecuteSearchAddressBalanceRequest(authorization, addressId, prepareSearchSchema);
        // TODO: test validations
    }
    
    /**
     * Execute a search for an address balance on a DLT
     *
     * Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePreparedSearchRequestAddressBalanceTest() throws ApiException {
        String authorization = null;
        String requestId = null;
                ExecuteSearchBalanceResponse response = api.executePreparedSearchRequestAddressBalance(authorization, requestId);
        // TODO: test validations
    }
    
    /**
     * Execute a search for an address sequence on a DLT
     *
     * Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePreparedSearchRequestAddressSequenceTest() throws ApiException {
        String authorization = null;
        String requestId = null;
                ExecuteSearchSequenceResponse response = api.executePreparedSearchRequestAddressSequence(authorization, requestId);
        // TODO: test validations
    }
    
    /**
     * Prepare Search for an Address Balance.
     *
     * Perform an address balance search on the requested DLT. Returns a request ID to execute
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareAddressBalanceSearchRequestTest() throws ApiException {
        String authorization = null;
        String addressId = null;
        PrepareSearchSchema prepareSearchSchema = null;
                PrepareSearchResponseSchema response = api.prepareAddressBalanceSearchRequest(authorization, addressId, prepareSearchSchema);
        // TODO: test validations
    }
    
    /**
     * Prepare Search for an Address Sequence.
     *
     * Perform an address sequence search on the requested DLT.Returns a request ID to execute
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareAddressSequenceSearchRequestTest() throws ApiException {
        String authorization = null;
        String addressId = null;
        PrepareSearchSchema prepareSearchSchema = null;
                PrepareSearchResponseSchema response = api.prepareAddressSequenceSearchRequest(authorization, addressId, prepareSearchSchema);
        // TODO: test validations
    }
    
    /**
     * Prepare and automatically execute a search for an Address Sequence.
     *
     * Generates a request ID and automatically executes the address sequence search on the requested DLT.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareAddressSequenceSearchRequest1Test() throws ApiException {
        String authorization = null;
        String addressId = null;
        PrepareSearchSchema prepareSearchSchema = null;
                AutoExecSearchAddressSequenceResponseSchema response = api.prepareAddressSequenceSearchRequest1(authorization, addressId, prepareSearchSchema);
        // TODO: test validations
    }
    
}
