/*
 * Quant Overledger API
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ErrorList;
import org.openapitools.client.model.ExecuteTransactionRequest;
import org.openapitools.client.model.ExecuteTransactionResponse;
import org.openapitools.client.model.InternalServerErrorSchema;
import org.openapitools.client.model.PrepareNativeTransactionRequestSchema;
import org.openapitools.client.model.PreparePaymentTransactionRequestSchema;
import org.openapitools.client.model.PrepareSearchResponseSchema;
import org.openapitools.client.model.PrepareTransactionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreateTransactionApi
 */
@Ignore
public class CreateTransactionApiTest {

    private final CreateTransactionApi api = new CreateTransactionApi();

    
    /**
     * Execute a native transaction on the DLT
     *
     * Takes a request ID and submits a signed native transaction to the requested DLT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePreparedRequestNativeTransactionTest() throws ApiException {
        String authorization = null;
        ExecuteTransactionRequest executeTransactionRequest = null;
                ExecuteTransactionResponse response = api.executePreparedRequestNativeTransaction(authorization, executeTransactionRequest);
        // TODO: test validations
    }
    
    /**
     * Execute a transaction on the DLT
     *
     * Takes a request ID and submits a signed transaction to the requested DLT.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePreparedRequestTransactionTest() throws ApiException {
        String authorization = null;
        ExecuteTransactionRequest executeTransactionRequest = null;
                ExecuteTransactionResponse response = api.executePreparedRequestTransaction(authorization, executeTransactionRequest);
        // TODO: test validations
    }
    
    /**
     * Prepare a DLT native transaction
     *
     * Allows advanced developers to submit their own DLT native transactions via Overledger. Returns a request ID for executing a DLT native transaction on the requested DLT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareNativeTransactionTest() throws ApiException {
        String authorization = null;
        PrepareNativeTransactionRequestSchema prepareNativeTransactionRequestSchema = null;
                PrepareSearchResponseSchema response = api.prepareNativeTransaction(authorization, prepareNativeTransactionRequestSchema);
        // TODO: test validations
    }
    
    /**
     * Prepare a DLT transaction for signing
     *
     * Transforms a transaction request into a payload ready for signing for the requested DLT and returns a request ID for executing. Supported transaction types in this release are “Payment” (to send payments) and “Smart Contract Invoke” (to invoke arbitrary smart contract functions)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void prepareTransactionRequestTest() throws ApiException {
        String authorization = null;
        PreparePaymentTransactionRequestSchema preparePaymentTransactionRequestSchema = null;
                PrepareTransactionResponse response = api.prepareTransactionRequest(authorization, preparePaymentTransactionRequestSchema);
        // TODO: test validations
    }
    
}
