<?php
/**
 * AliasDetails
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AliasDetails Class Doc Comment
 *
 * @category Class
 * @description Alias Details of an account
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AliasDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AliasDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'unit' => 'string',
        'disposable_alias' => 'bool',
        'alias_hash' => 'string',
        'alias_type' => 'string',
        'esip_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'unit' => null,
        'disposable_alias' => null,
        'alias_hash' => null,
        'alias_type' => null,
        'esip_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'unit' => 'unit',
        'disposable_alias' => 'disposableAlias',
        'alias_hash' => 'aliasHash',
        'alias_type' => 'aliasType',
        'esip_id' => 'esipId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'unit' => 'setUnit',
        'disposable_alias' => 'setDisposableAlias',
        'alias_hash' => 'setAliasHash',
        'alias_type' => 'setAliasType',
        'esip_id' => 'setEsipId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'unit' => 'getUnit',
        'disposable_alias' => 'getDisposableAlias',
        'alias_hash' => 'getAliasHash',
        'alias_type' => 'getAliasType',
        'esip_id' => 'getEsipId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['disposable_alias'] = $data['disposable_alias'] ?? null;
        $this->container['alias_hash'] = $data['alias_hash'] ?? null;
        $this->container['alias_type'] = $data['alias_type'] ?? null;
        $this->container['esip_id'] = $data['esip_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) > 500)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 11)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 0)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['alias_hash']) && (mb_strlen($this->container['alias_hash']) > 500)) {
            $invalidProperties[] = "invalid value for 'alias_hash', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['alias_hash']) && (mb_strlen($this->container['alias_hash']) < 0)) {
            $invalidProperties[] = "invalid value for 'alias_hash', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['alias_type']) && (mb_strlen($this->container['alias_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'alias_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['alias_type']) && (mb_strlen($this->container['alias_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'alias_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['esip_id']) && (mb_strlen($this->container['esip_id']) > 500)) {
            $invalidProperties[] = "invalid value for 'esip_id', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['esip_id']) && (mb_strlen($this->container['esip_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'esip_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (!is_null($account_id) && (mb_strlen($account_id) > 500)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling AliasDetails., must be smaller than or equal to 500.');
        }
        if (!is_null($account_id) && (mb_strlen($account_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling AliasDetails., must be bigger than or equal to 0.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 11)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling AliasDetails., must be smaller than or equal to 11.');
        }
        if (!is_null($unit) && (mb_strlen($unit) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling AliasDetails., must be bigger than or equal to 0.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets disposable_alias
     *
     * @return bool|null
     */
    public function getDisposableAlias()
    {
        return $this->container['disposable_alias'];
    }

    /**
     * Sets disposable_alias
     *
     * @param bool|null $disposable_alias disposable_alias
     *
     * @return self
     */
    public function setDisposableAlias($disposable_alias)
    {
        $this->container['disposable_alias'] = $disposable_alias;

        return $this;
    }

    /**
     * Gets alias_hash
     *
     * @return string|null
     */
    public function getAliasHash()
    {
        return $this->container['alias_hash'];
    }

    /**
     * Sets alias_hash
     *
     * @param string|null $alias_hash alias_hash
     *
     * @return self
     */
    public function setAliasHash($alias_hash)
    {
        if (!is_null($alias_hash) && (mb_strlen($alias_hash) > 500)) {
            throw new \InvalidArgumentException('invalid length for $alias_hash when calling AliasDetails., must be smaller than or equal to 500.');
        }
        if (!is_null($alias_hash) && (mb_strlen($alias_hash) < 0)) {
            throw new \InvalidArgumentException('invalid length for $alias_hash when calling AliasDetails., must be bigger than or equal to 0.');
        }

        $this->container['alias_hash'] = $alias_hash;

        return $this;
    }

    /**
     * Gets alias_type
     *
     * @return string|null
     */
    public function getAliasType()
    {
        return $this->container['alias_type'];
    }

    /**
     * Sets alias_type
     *
     * @param string|null $alias_type alias_type
     *
     * @return self
     */
    public function setAliasType($alias_type)
    {
        if (!is_null($alias_type) && (mb_strlen($alias_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alias_type when calling AliasDetails., must be smaller than or equal to 50.');
        }
        if (!is_null($alias_type) && (mb_strlen($alias_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $alias_type when calling AliasDetails., must be bigger than or equal to 0.');
        }

        $this->container['alias_type'] = $alias_type;

        return $this;
    }

    /**
     * Gets esip_id
     *
     * @return string|null
     */
    public function getEsipId()
    {
        return $this->container['esip_id'];
    }

    /**
     * Sets esip_id
     *
     * @param string|null $esip_id esip_id
     *
     * @return self
     */
    public function setEsipId($esip_id)
    {
        if (!is_null($esip_id) && (mb_strlen($esip_id) > 500)) {
            throw new \InvalidArgumentException('invalid length for $esip_id when calling AliasDetails., must be smaller than or equal to 500.');
        }
        if (!is_null($esip_id) && (mb_strlen($esip_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $esip_id when calling AliasDetails., must be bigger than or equal to 0.');
        }

        $this->container['esip_id'] = $esip_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


