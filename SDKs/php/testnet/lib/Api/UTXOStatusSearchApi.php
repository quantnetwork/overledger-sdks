<?php
/**
 * UTXOStatusSearchApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UTXOStatusSearchApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UTXOStatusSearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autoExecuteSearchUtxoRequest
     *
     * Prepare and automatically execute a search for a UTXO on a DLT.
     *
     * @param  string $authorization authorization (required)
     * @param  string $utxo_id utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema prepare_search_schema (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema|\OpenAPI\Client\Model\ErrorDetails|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\InternalServerErrorSchema
     */
    public function autoExecuteSearchUtxoRequest($authorization, $utxo_id, $prepare_search_schema)
    {
        list($response) = $this->autoExecuteSearchUtxoRequestWithHttpInfo($authorization, $utxo_id, $prepare_search_schema);
        return $response;
    }

    /**
     * Operation autoExecuteSearchUtxoRequestWithHttpInfo
     *
     * Prepare and automatically execute a search for a UTXO on a DLT.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema|\OpenAPI\Client\Model\ErrorDetails|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\InternalServerErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoExecuteSearchUtxoRequestWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
    {
        $request = $this->autoExecuteSearchUtxoRequestRequest($authorization, $utxo_id, $prepare_search_schema);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\InternalServerErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InternalServerErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoExecuteSearchUtxoRequestAsync
     *
     * Prepare and automatically execute a search for a UTXO on a DLT.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoExecuteSearchUtxoRequestAsync($authorization, $utxo_id, $prepare_search_schema)
    {
        return $this->autoExecuteSearchUtxoRequestAsyncWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoExecuteSearchUtxoRequestAsyncWithHttpInfo
     *
     * Prepare and automatically execute a search for a UTXO on a DLT.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoExecuteSearchUtxoRequestAsyncWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
    {
        $returnType = '\OpenAPI\Client\Model\AutoExecuteSearchUTXOResponseSchema';
        $request = $this->autoExecuteSearchUtxoRequestRequest($authorization, $utxo_id, $prepare_search_schema);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoExecuteSearchUtxoRequest'
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autoExecuteSearchUtxoRequestRequest($authorization, $utxo_id, $prepare_search_schema)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling autoExecuteSearchUtxoRequest'
            );
        }
        if (strlen($authorization) > 5010) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must be smaller than or equal to 5010.');
        }
        if (strlen($authorization) < 0) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/", $authorization)) {
            throw new \InvalidArgumentException("invalid value for \"authorization\" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must conform to the pattern /^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/.");
        }

        // verify the required parameter 'utxo_id' is set
        if ($utxo_id === null || (is_array($utxo_id) && count($utxo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $utxo_id when calling autoExecuteSearchUtxoRequest'
            );
        }
        if (strlen($utxo_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$utxo_id" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must be smaller than or equal to 100.');
        }
        if (strlen($utxo_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$utxo_id" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^[a-zA-Z0-9-: ]{1,100}$/", $utxo_id)) {
            throw new \InvalidArgumentException("invalid value for \"utxo_id\" when calling UTXOStatusSearchApi.autoExecuteSearchUtxoRequest, must conform to the pattern /^[a-zA-Z0-9-: ]{1,100}$/.");
        }

        // verify the required parameter 'prepare_search_schema' is set
        if ($prepare_search_schema === null || (is_array($prepare_search_schema) && count($prepare_search_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prepare_search_schema when calling autoExecuteSearchUtxoRequest'
            );
        }

        $resourcePath = '/v2/autoexecution/search/utxo/{utxoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($utxo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'utxoId' . '}',
                ObjectSerializer::toPathValue($utxo_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($prepare_search_schema)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($prepare_search_schema));
            } else {
                $httpBody = $prepare_search_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeUTXOPreparedSearchRequest
     *
     * Execute a search for UTXO state on a DLT
     *
     * @param  string $authorization authorization (required)
     * @param  string $request_id request_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\ErrorDetails|\OpenAPI\Client\Model\InternalServerErrorSchema
     */
    public function executeUTXOPreparedSearchRequest($authorization, $request_id)
    {
        list($response) = $this->executeUTXOPreparedSearchRequestWithHttpInfo($authorization, $request_id);
        return $response;
    }

    /**
     * Operation executeUTXOPreparedSearchRequestWithHttpInfo
     *
     * Execute a search for UTXO state on a DLT
     *
     * @param  string $authorization (required)
     * @param  string $request_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\ErrorDetails|\OpenAPI\Client\Model\InternalServerErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeUTXOPreparedSearchRequestWithHttpInfo($authorization, $request_id)
    {
        $request = $this->executeUTXOPreparedSearchRequestRequest($authorization, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\InternalServerErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InternalServerErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeUTXOPreparedSearchRequestAsync
     *
     * Execute a search for UTXO state on a DLT
     *
     * @param  string $authorization (required)
     * @param  string $request_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeUTXOPreparedSearchRequestAsync($authorization, $request_id)
    {
        return $this->executeUTXOPreparedSearchRequestAsyncWithHttpInfo($authorization, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeUTXOPreparedSearchRequestAsyncWithHttpInfo
     *
     * Execute a search for UTXO state on a DLT
     *
     * @param  string $authorization (required)
     * @param  string $request_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeUTXOPreparedSearchRequestAsyncWithHttpInfo($authorization, $request_id)
    {
        $returnType = '\OpenAPI\Client\Model\ExecuteSearchUTXOResponseSchema';
        $request = $this->executeUTXOPreparedSearchRequestRequest($authorization, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeUTXOPreparedSearchRequest'
     *
     * @param  string $authorization (required)
     * @param  string $request_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function executeUTXOPreparedSearchRequestRequest($authorization, $request_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling executeUTXOPreparedSearchRequest'
            );
        }
        if (strlen($authorization) > 5010) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must be smaller than or equal to 5010.');
        }
        if (strlen($authorization) < 0) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/", $authorization)) {
            throw new \InvalidArgumentException("invalid value for \"authorization\" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must conform to the pattern /^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/.");
        }

        // verify the required parameter 'request_id' is set
        if ($request_id === null || (is_array($request_id) && count($request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_id when calling executeUTXOPreparedSearchRequest'
            );
        }
        if (strlen($request_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$request_id" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must be smaller than or equal to 36.');
        }
        if (strlen($request_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$request_id" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^[A-Za-z0-9-]{1,36}$/", $request_id)) {
            throw new \InvalidArgumentException("invalid value for \"request_id\" when calling UTXOStatusSearchApi.executeUTXOPreparedSearchRequest, must conform to the pattern /^[A-Za-z0-9-]{1,36}$/.");
        }


        $resourcePath = '/v2/execution/search/utxo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_id !== null) {
            if('form' === 'form' && is_array($request_id)) {
                foreach($request_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['requestId'] = $request_id;
            }
        }

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prepareSearchUTXOState
     *
     * Prepare Search for a UTXO State.
     *
     * @param  string $authorization authorization (required)
     * @param  string $utxo_id utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema prepare_search_schema (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PrepareSearchResponseSchema|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\InternalServerErrorSchema
     */
    public function prepareSearchUTXOState($authorization, $utxo_id, $prepare_search_schema)
    {
        list($response) = $this->prepareSearchUTXOStateWithHttpInfo($authorization, $utxo_id, $prepare_search_schema);
        return $response;
    }

    /**
     * Operation prepareSearchUTXOStateWithHttpInfo
     *
     * Prepare Search for a UTXO State.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PrepareSearchResponseSchema|\OpenAPI\Client\Model\ErrorList|\OpenAPI\Client\Model\InternalServerErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function prepareSearchUTXOStateWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
    {
        $request = $this->prepareSearchUTXOStateRequest($authorization, $utxo_id, $prepare_search_schema);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PrepareSearchResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PrepareSearchResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\InternalServerErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InternalServerErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PrepareSearchResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PrepareSearchResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InternalServerErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation prepareSearchUTXOStateAsync
     *
     * Prepare Search for a UTXO State.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareSearchUTXOStateAsync($authorization, $utxo_id, $prepare_search_schema)
    {
        return $this->prepareSearchUTXOStateAsyncWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prepareSearchUTXOStateAsyncWithHttpInfo
     *
     * Prepare Search for a UTXO State.
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareSearchUTXOStateAsyncWithHttpInfo($authorization, $utxo_id, $prepare_search_schema)
    {
        $returnType = '\OpenAPI\Client\Model\PrepareSearchResponseSchema';
        $request = $this->prepareSearchUTXOStateRequest($authorization, $utxo_id, $prepare_search_schema);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prepareSearchUTXOState'
     *
     * @param  string $authorization (required)
     * @param  string $utxo_id (required)
     * @param  \OpenAPI\Client\Model\PrepareSearchSchema $prepare_search_schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prepareSearchUTXOStateRequest($authorization, $utxo_id, $prepare_search_schema)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling prepareSearchUTXOState'
            );
        }
        if (strlen($authorization) > 5010) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must be smaller than or equal to 5010.');
        }
        if (strlen($authorization) < 0) {
            throw new \InvalidArgumentException('invalid length for "$authorization" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/", $authorization)) {
            throw new \InvalidArgumentException("invalid value for \"authorization\" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must conform to the pattern /^Bearer [A-Za-z0-9\\-_. ]{1,5010}$/.");
        }

        // verify the required parameter 'utxo_id' is set
        if ($utxo_id === null || (is_array($utxo_id) && count($utxo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $utxo_id when calling prepareSearchUTXOState'
            );
        }
        if (strlen($utxo_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$utxo_id" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must be smaller than or equal to 100.');
        }
        if (strlen($utxo_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$utxo_id" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^[a-zA-Z0-9-: ]{1,100}$/", $utxo_id)) {
            throw new \InvalidArgumentException("invalid value for \"utxo_id\" when calling UTXOStatusSearchApi.prepareSearchUTXOState, must conform to the pattern /^[a-zA-Z0-9-: ]{1,100}$/.");
        }

        // verify the required parameter 'prepare_search_schema' is set
        if ($prepare_search_schema === null || (is_array($prepare_search_schema) && count($prepare_search_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prepare_search_schema when calling prepareSearchUTXOState'
            );
        }

        $resourcePath = '/v2/preparation/search/utxo/{utxoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($utxo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'utxoId' . '}',
                ObjectSerializer::toPathValue($utxo_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($prepare_search_schema)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($prepare_search_schema));
            } else {
                $httpBody = $prepare_search_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
