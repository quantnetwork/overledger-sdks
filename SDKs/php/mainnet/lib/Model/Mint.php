<?php
/**
 * Mint
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Mint Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Mint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token_name' => 'string',
        'amount' => 'string',
        'unit' => 'string',
        'metadata' => 'string',
        'token_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token_name' => null,
        'amount' => null,
        'unit' => null,
        'metadata' => null,
        'token_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_name' => 'tokenName',
        'amount' => 'amount',
        'unit' => 'unit',
        'metadata' => 'metadata',
        'token_id' => 'tokenId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_name' => 'setTokenName',
        'amount' => 'setAmount',
        'unit' => 'setUnit',
        'metadata' => 'setMetadata',
        'token_id' => 'setTokenId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_name' => 'getTokenName',
        'amount' => 'getAmount',
        'unit' => 'getUnit',
        'metadata' => 'getMetadata',
        'token_id' => 'getTokenId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_name'] = $data['token_name'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['token_id'] = $data['token_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['token_name']) && (mb_strlen($this->container['token_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'token_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['token_name']) && (mb_strlen($this->container['token_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'token_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token_name']) && !preg_match("/^[A-Za-z0-9 ]{1,100}/", $this->container['token_name'])) {
            $invalidProperties[] = "invalid value for 'token_name', must be conform to the pattern /^[A-Za-z0-9 ]{1,100}/.";
        }

        if (!is_null($this->container['amount']) && (mb_strlen($this->container['amount']) > 100)) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['amount']) && (mb_strlen($this->container['amount']) < 0)) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['amount']) && !preg_match("/^[A-Za-z0-9. ]{1,100}/", $this->container['amount'])) {
            $invalidProperties[] = "invalid value for 'amount', must be conform to the pattern /^[A-Za-z0-9. ]{1,100}/.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 11)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 0)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['metadata']) && (mb_strlen($this->container['metadata']) > 150)) {
            $invalidProperties[] = "invalid value for 'metadata', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['metadata']) && (mb_strlen($this->container['metadata']) < 0)) {
            $invalidProperties[] = "invalid value for 'metadata', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['metadata']) && !preg_match("/^[\\S\\s]{1,150}$/", $this->container['metadata'])) {
            $invalidProperties[] = "invalid value for 'metadata', must be conform to the pattern /^[\\S\\s]{1,150}$/.";
        }

        if (!is_null($this->container['token_id']) && (mb_strlen($this->container['token_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'token_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['token_id']) && (mb_strlen($this->container['token_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'token_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token_id']) && !preg_match("/^[A-Za-z0-9. ]{1,100}/", $this->container['token_id'])) {
            $invalidProperties[] = "invalid value for 'token_id', must be conform to the pattern /^[A-Za-z0-9. ]{1,100}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_name
     *
     * @return string|null
     */
    public function getTokenName()
    {
        return $this->container['token_name'];
    }

    /**
     * Sets token_name
     *
     * @param string|null $token_name Name of the token
     *
     * @return self
     */
    public function setTokenName($token_name)
    {
        if (!is_null($token_name) && (mb_strlen($token_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $token_name when calling Mint., must be smaller than or equal to 100.');
        }
        if (!is_null($token_name) && (mb_strlen($token_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token_name when calling Mint., must be bigger than or equal to 0.');
        }
        if (!is_null($token_name) && (!preg_match("/^[A-Za-z0-9 ]{1,100}/", $token_name))) {
            throw new \InvalidArgumentException("invalid value for $token_name when calling Mint., must conform to the pattern /^[A-Za-z0-9 ]{1,100}/.");
        }

        $this->container['token_name'] = $token_name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount The amount of a currency
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (!is_null($amount) && (mb_strlen($amount) > 100)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling Mint., must be smaller than or equal to 100.');
        }
        if (!is_null($amount) && (mb_strlen($amount) < 0)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling Mint., must be bigger than or equal to 0.');
        }
        if (!is_null($amount) && (!preg_match("/^[A-Za-z0-9. ]{1,100}/", $amount))) {
            throw new \InvalidArgumentException("invalid value for $amount when calling Mint., must conform to the pattern /^[A-Za-z0-9. ]{1,100}/.");
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit The unit of this currency/token
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 11)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Mint., must be smaller than or equal to 11.');
        }
        if (!is_null($unit) && (mb_strlen($unit) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Mint., must be bigger than or equal to 0.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata (Optional) String of metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (!is_null($metadata) && (mb_strlen($metadata) > 150)) {
            throw new \InvalidArgumentException('invalid length for $metadata when calling Mint., must be smaller than or equal to 150.');
        }
        if (!is_null($metadata) && (mb_strlen($metadata) < 0)) {
            throw new \InvalidArgumentException('invalid length for $metadata when calling Mint., must be bigger than or equal to 0.');
        }
        if (!is_null($metadata) && (!preg_match("/^[\\S\\s]{1,150}$/", $metadata))) {
            throw new \InvalidArgumentException("invalid value for $metadata when calling Mint., must conform to the pattern /^[\\S\\s]{1,150}$/.");
        }

        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id Unique identifier for the specific token
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (!is_null($token_id) && (mb_strlen($token_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $token_id when calling Mint., must be smaller than or equal to 100.');
        }
        if (!is_null($token_id) && (mb_strlen($token_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token_id when calling Mint., must be bigger than or equal to 0.');
        }
        if (!is_null($token_id) && (!preg_match("/^[A-Za-z0-9. ]{1,100}/", $token_id))) {
            throw new \InvalidArgumentException("invalid value for $token_id when calling Mint., must conform to the pattern /^[A-Za-z0-9. ]{1,100}/.");
        }

        $this->container['token_id'] = $token_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


