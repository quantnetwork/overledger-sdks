<?php
/**
 * PrepareRequestDetails
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PrepareRequestDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PrepareRequestDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrepareRequestDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mandate' => '\OpenAPI\Client\Model\Mandate[]',
        'alias_details' => '\OpenAPI\Client\Model\AliasDetails',
        'pagination' => '\OpenAPI\Client\Model\Pagination',
        'origin' => '\OpenAPI\Client\Model\Origin[]',
        'destination' => '\OpenAPI\Client\Model\Destination[]',
        'token_name' => 'string',
        'block_search_type' => 'string',
        'payer' => '\OpenAPI\Client\Model\Payer[]',
        'collector' => '\OpenAPI\Client\Model\Collector',
        'payee' => '\OpenAPI\Client\Model\Payee[]',
        'additional_owner' => '\OpenAPI\Client\Model\AdditionalOwner',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'creator' => '\OpenAPI\Client\Model\Creator',
        'receiver' => '\OpenAPI\Client\Model\Receiver[]',
        'token_id' => 'string',
        'message' => 'string',
        'lock_details' => '\OpenAPI\Client\Model\LockDetails',
        'block_id' => 'string',
        'account_id' => 'string',
        'token_unit' => 'string',
        'beneficiary' => '\OpenAPI\Client\Model\Beneficiary',
        'sender' => '\OpenAPI\Client\Model\Sender[]',
        'account_details' => '\OpenAPI\Client\Model\AccountDetails',
        'overledger_signing_type' => 'string',
        'total_payment_amount' => '\OpenAPI\Client\Model\Payment',
        'signer_account' => '\OpenAPI\Client\Model\SignerAccount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mandate' => null,
        'alias_details' => null,
        'pagination' => null,
        'origin' => null,
        'destination' => null,
        'token_name' => null,
        'block_search_type' => null,
        'payer' => null,
        'collector' => null,
        'payee' => null,
        'additional_owner' => null,
        'owner' => null,
        'creator' => null,
        'receiver' => null,
        'token_id' => null,
        'message' => null,
        'lock_details' => null,
        'block_id' => null,
        'account_id' => null,
        'token_unit' => null,
        'beneficiary' => null,
        'sender' => null,
        'account_details' => null,
        'overledger_signing_type' => null,
        'total_payment_amount' => null,
        'signer_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mandate' => 'mandate',
        'alias_details' => 'aliasDetails',
        'pagination' => 'pagination',
        'origin' => 'origin',
        'destination' => 'destination',
        'token_name' => 'tokenName',
        'block_search_type' => 'blockSearchType',
        'payer' => 'payer',
        'collector' => 'collector',
        'payee' => 'payee',
        'additional_owner' => 'additionalOwner',
        'owner' => 'owner',
        'creator' => 'creator',
        'receiver' => 'receiver',
        'token_id' => 'tokenId',
        'message' => 'message',
        'lock_details' => 'lockDetails',
        'block_id' => 'blockId',
        'account_id' => 'accountId',
        'token_unit' => 'tokenUnit',
        'beneficiary' => 'beneficiary',
        'sender' => 'sender',
        'account_details' => 'accountDetails',
        'overledger_signing_type' => 'overledgerSigningType',
        'total_payment_amount' => 'totalPaymentAmount',
        'signer_account' => 'signerAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mandate' => 'setMandate',
        'alias_details' => 'setAliasDetails',
        'pagination' => 'setPagination',
        'origin' => 'setOrigin',
        'destination' => 'setDestination',
        'token_name' => 'setTokenName',
        'block_search_type' => 'setBlockSearchType',
        'payer' => 'setPayer',
        'collector' => 'setCollector',
        'payee' => 'setPayee',
        'additional_owner' => 'setAdditionalOwner',
        'owner' => 'setOwner',
        'creator' => 'setCreator',
        'receiver' => 'setReceiver',
        'token_id' => 'setTokenId',
        'message' => 'setMessage',
        'lock_details' => 'setLockDetails',
        'block_id' => 'setBlockId',
        'account_id' => 'setAccountId',
        'token_unit' => 'setTokenUnit',
        'beneficiary' => 'setBeneficiary',
        'sender' => 'setSender',
        'account_details' => 'setAccountDetails',
        'overledger_signing_type' => 'setOverledgerSigningType',
        'total_payment_amount' => 'setTotalPaymentAmount',
        'signer_account' => 'setSignerAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mandate' => 'getMandate',
        'alias_details' => 'getAliasDetails',
        'pagination' => 'getPagination',
        'origin' => 'getOrigin',
        'destination' => 'getDestination',
        'token_name' => 'getTokenName',
        'block_search_type' => 'getBlockSearchType',
        'payer' => 'getPayer',
        'collector' => 'getCollector',
        'payee' => 'getPayee',
        'additional_owner' => 'getAdditionalOwner',
        'owner' => 'getOwner',
        'creator' => 'getCreator',
        'receiver' => 'getReceiver',
        'token_id' => 'getTokenId',
        'message' => 'getMessage',
        'lock_details' => 'getLockDetails',
        'block_id' => 'getBlockId',
        'account_id' => 'getAccountId',
        'token_unit' => 'getTokenUnit',
        'beneficiary' => 'getBeneficiary',
        'sender' => 'getSender',
        'account_details' => 'getAccountDetails',
        'overledger_signing_type' => 'getOverledgerSigningType',
        'total_payment_amount' => 'getTotalPaymentAmount',
        'signer_account' => 'getSignerAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mandate'] = $data['mandate'] ?? null;
        $this->container['alias_details'] = $data['alias_details'] ?? null;
        $this->container['pagination'] = $data['pagination'] ?? null;
        $this->container['origin'] = $data['origin'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
        $this->container['token_name'] = $data['token_name'] ?? null;
        $this->container['block_search_type'] = $data['block_search_type'] ?? null;
        $this->container['payer'] = $data['payer'] ?? null;
        $this->container['collector'] = $data['collector'] ?? null;
        $this->container['payee'] = $data['payee'] ?? null;
        $this->container['additional_owner'] = $data['additional_owner'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['receiver'] = $data['receiver'] ?? null;
        $this->container['token_id'] = $data['token_id'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['lock_details'] = $data['lock_details'] ?? null;
        $this->container['block_id'] = $data['block_id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['token_unit'] = $data['token_unit'] ?? null;
        $this->container['beneficiary'] = $data['beneficiary'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['account_details'] = $data['account_details'] ?? null;
        $this->container['overledger_signing_type'] = $data['overledger_signing_type'] ?? null;
        $this->container['total_payment_amount'] = $data['total_payment_amount'] ?? null;
        $this->container['signer_account'] = $data['signer_account'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['mandate']) && (count($this->container['mandate']) > 100)) {
            $invalidProperties[] = "invalid value for 'mandate', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['mandate']) && (count($this->container['mandate']) < 0)) {
            $invalidProperties[] = "invalid value for 'mandate', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['origin']) && (count($this->container['origin']) > 100)) {
            $invalidProperties[] = "invalid value for 'origin', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['origin']) && (count($this->container['origin']) < 0)) {
            $invalidProperties[] = "invalid value for 'origin', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['destination']) && (count($this->container['destination']) > 100)) {
            $invalidProperties[] = "invalid value for 'destination', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['destination']) && (count($this->container['destination']) < 0)) {
            $invalidProperties[] = "invalid value for 'destination', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['token_name']) && (mb_strlen($this->container['token_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'token_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['token_name']) && (mb_strlen($this->container['token_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'token_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token_name']) && !preg_match("/^[A-Za-z0-9 ]{1,100}/", $this->container['token_name'])) {
            $invalidProperties[] = "invalid value for 'token_name', must be conform to the pattern /^[A-Za-z0-9 ]{1,100}/.";
        }

        if (!is_null($this->container['block_search_type']) && (mb_strlen($this->container['block_search_type']) > 30)) {
            $invalidProperties[] = "invalid value for 'block_search_type', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['block_search_type']) && (mb_strlen($this->container['block_search_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'block_search_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['block_search_type']) && !preg_match("/^[A-Z0-9_]{1,30}$/", $this->container['block_search_type'])) {
            $invalidProperties[] = "invalid value for 'block_search_type', must be conform to the pattern /^[A-Z0-9_]{1,30}$/.";
        }

        if (!is_null($this->container['payer']) && (count($this->container['payer']) > 100)) {
            $invalidProperties[] = "invalid value for 'payer', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['payer']) && (count($this->container['payer']) < 0)) {
            $invalidProperties[] = "invalid value for 'payer', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['payee']) && (count($this->container['payee']) > 100)) {
            $invalidProperties[] = "invalid value for 'payee', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['payee']) && (count($this->container['payee']) < 0)) {
            $invalidProperties[] = "invalid value for 'payee', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['token_id']) && (mb_strlen($this->container['token_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'token_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['token_id']) && (mb_strlen($this->container['token_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'token_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token_id']) && !preg_match("/^[A-Za-z0-9. ]{1,100}/", $this->container['token_id'])) {
            $invalidProperties[] = "invalid value for 'token_id', must be conform to the pattern /^[A-Za-z0-9. ]{1,100}/.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) > 150)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) < 0)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['message']) && !preg_match("/^[\\S\\s]{1,150}$/", $this->container['message'])) {
            $invalidProperties[] = "invalid value for 'message', must be conform to the pattern /^[\\S\\s]{1,150}$/.";
        }

        if (!is_null($this->container['block_id']) && (mb_strlen($this->container['block_id']) > 150)) {
            $invalidProperties[] = "invalid value for 'block_id', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['block_id']) && (mb_strlen($this->container['block_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'block_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['block_id']) && !preg_match("/^[a-zA-Z0-9]{1,150}$/", $this->container['block_id'])) {
            $invalidProperties[] = "invalid value for 'block_id', must be conform to the pattern /^[a-zA-Z0-9]{1,150}$/.";
        }

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) > 500)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['account_id']) && !preg_match("/^[a-zA-Z0-9:,\/.=\\-\\s]{1,500}/", $this->container['account_id'])) {
            $invalidProperties[] = "invalid value for 'account_id', must be conform to the pattern /^[a-zA-Z0-9:,\/.=\\-\\s]{1,500}/.";
        }

        if (!is_null($this->container['token_unit']) && (mb_strlen($this->container['token_unit']) > 11)) {
            $invalidProperties[] = "invalid value for 'token_unit', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['token_unit']) && (mb_strlen($this->container['token_unit']) < 0)) {
            $invalidProperties[] = "invalid value for 'token_unit', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['overledger_signing_type']) && (mb_strlen($this->container['overledger_signing_type']) > 30)) {
            $invalidProperties[] = "invalid value for 'overledger_signing_type', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['overledger_signing_type']) && (mb_strlen($this->container['overledger_signing_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'overledger_signing_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['overledger_signing_type']) && !preg_match("/^[A-Za-z- ]{1,30}/", $this->container['overledger_signing_type'])) {
            $invalidProperties[] = "invalid value for 'overledger_signing_type', must be conform to the pattern /^[A-Za-z- ]{1,30}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mandate
     *
     * @return \OpenAPI\Client\Model\Mandate[]|null
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \OpenAPI\Client\Model\Mandate[]|null $mandate mandate
     *
     * @return self
     */
    public function setMandate($mandate)
    {

        if (!is_null($mandate) && (count($mandate) > 100)) {
            throw new \InvalidArgumentException('invalid value for $mandate when calling PrepareRequestDetails., number of items must be less than or equal to 100.');
        }
        if (!is_null($mandate) && (count($mandate) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mandate when calling PrepareRequestDetails., number of items must be greater than or equal to 0.');
        }
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets alias_details
     *
     * @return \OpenAPI\Client\Model\AliasDetails|null
     */
    public function getAliasDetails()
    {
        return $this->container['alias_details'];
    }

    /**
     * Sets alias_details
     *
     * @param \OpenAPI\Client\Model\AliasDetails|null $alias_details alias_details
     *
     * @return self
     */
    public function setAliasDetails($alias_details)
    {
        $this->container['alias_details'] = $alias_details;

        return $this;
    }

    /**
     * Gets pagination
     *
     * @return \OpenAPI\Client\Model\Pagination|null
     */
    public function getPagination()
    {
        return $this->container['pagination'];
    }

    /**
     * Sets pagination
     *
     * @param \OpenAPI\Client\Model\Pagination|null $pagination pagination
     *
     * @return self
     */
    public function setPagination($pagination)
    {
        $this->container['pagination'] = $pagination;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Model\Origin[]|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Model\Origin[]|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {

        if (!is_null($origin) && (count($origin) > 100)) {
            throw new \InvalidArgumentException('invalid value for $origin when calling PrepareRequestDetails., number of items must be less than or equal to 100.');
        }
        if (!is_null($origin) && (count($origin) < 0)) {
            throw new \InvalidArgumentException('invalid length for $origin when calling PrepareRequestDetails., number of items must be greater than or equal to 0.');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \OpenAPI\Client\Model\Destination[]|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \OpenAPI\Client\Model\Destination[]|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {

        if (!is_null($destination) && (count($destination) > 100)) {
            throw new \InvalidArgumentException('invalid value for $destination when calling PrepareRequestDetails., number of items must be less than or equal to 100.');
        }
        if (!is_null($destination) && (count($destination) < 0)) {
            throw new \InvalidArgumentException('invalid length for $destination when calling PrepareRequestDetails., number of items must be greater than or equal to 0.');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets token_name
     *
     * @return string|null
     */
    public function getTokenName()
    {
        return $this->container['token_name'];
    }

    /**
     * Sets token_name
     *
     * @param string|null $token_name Name of the token
     *
     * @return self
     */
    public function setTokenName($token_name)
    {
        if (!is_null($token_name) && (mb_strlen($token_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $token_name when calling PrepareRequestDetails., must be smaller than or equal to 100.');
        }
        if (!is_null($token_name) && (mb_strlen($token_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token_name when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($token_name) && (!preg_match("/^[A-Za-z0-9 ]{1,100}/", $token_name))) {
            throw new \InvalidArgumentException("invalid value for $token_name when calling PrepareRequestDetails., must conform to the pattern /^[A-Za-z0-9 ]{1,100}/.");
        }

        $this->container['token_name'] = $token_name;

        return $this;
    }

    /**
     * Gets block_search_type
     *
     * @return string|null
     */
    public function getBlockSearchType()
    {
        return $this->container['block_search_type'];
    }

    /**
     * Sets block_search_type
     *
     * @param string|null $block_search_type block_search_type
     *
     * @return self
     */
    public function setBlockSearchType($block_search_type)
    {
        if (!is_null($block_search_type) && (mb_strlen($block_search_type) > 30)) {
            throw new \InvalidArgumentException('invalid length for $block_search_type when calling PrepareRequestDetails., must be smaller than or equal to 30.');
        }
        if (!is_null($block_search_type) && (mb_strlen($block_search_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $block_search_type when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($block_search_type) && (!preg_match("/^[A-Z0-9_]{1,30}$/", $block_search_type))) {
            throw new \InvalidArgumentException("invalid value for $block_search_type when calling PrepareRequestDetails., must conform to the pattern /^[A-Z0-9_]{1,30}$/.");
        }

        $this->container['block_search_type'] = $block_search_type;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \OpenAPI\Client\Model\Payer[]|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \OpenAPI\Client\Model\Payer[]|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {

        if (!is_null($payer) && (count($payer) > 100)) {
            throw new \InvalidArgumentException('invalid value for $payer when calling PrepareRequestDetails., number of items must be less than or equal to 100.');
        }
        if (!is_null($payer) && (count($payer) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payer when calling PrepareRequestDetails., number of items must be greater than or equal to 0.');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets collector
     *
     * @return \OpenAPI\Client\Model\Collector|null
     */
    public function getCollector()
    {
        return $this->container['collector'];
    }

    /**
     * Sets collector
     *
     * @param \OpenAPI\Client\Model\Collector|null $collector collector
     *
     * @return self
     */
    public function setCollector($collector)
    {
        $this->container['collector'] = $collector;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return \OpenAPI\Client\Model\Payee[]|null
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param \OpenAPI\Client\Model\Payee[]|null $payee payee
     *
     * @return self
     */
    public function setPayee($payee)
    {

        if (!is_null($payee) && (count($payee) > 100)) {
            throw new \InvalidArgumentException('invalid value for $payee when calling PrepareRequestDetails., number of items must be less than or equal to 100.');
        }
        if (!is_null($payee) && (count($payee) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payee when calling PrepareRequestDetails., number of items must be greater than or equal to 0.');
        }
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets additional_owner
     *
     * @return \OpenAPI\Client\Model\AdditionalOwner|null
     */
    public function getAdditionalOwner()
    {
        return $this->container['additional_owner'];
    }

    /**
     * Sets additional_owner
     *
     * @param \OpenAPI\Client\Model\AdditionalOwner|null $additional_owner additional_owner
     *
     * @return self
     */
    public function setAdditionalOwner($additional_owner)
    {
        $this->container['additional_owner'] = $additional_owner;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\Creator|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\Creator|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return \OpenAPI\Client\Model\Receiver[]|null
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param \OpenAPI\Client\Model\Receiver[]|null $receiver receiver
     *
     * @return self
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id Unique identifier for the specific token
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (!is_null($token_id) && (mb_strlen($token_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $token_id when calling PrepareRequestDetails., must be smaller than or equal to 100.');
        }
        if (!is_null($token_id) && (mb_strlen($token_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token_id when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($token_id) && (!preg_match("/^[A-Za-z0-9. ]{1,100}/", $token_id))) {
            throw new \InvalidArgumentException("invalid value for $token_id when calling PrepareRequestDetails., must conform to the pattern /^[A-Za-z0-9. ]{1,100}/.");
        }

        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (!is_null($message) && (mb_strlen($message) > 150)) {
            throw new \InvalidArgumentException('invalid length for $message when calling PrepareRequestDetails., must be smaller than or equal to 150.');
        }
        if (!is_null($message) && (mb_strlen($message) < 0)) {
            throw new \InvalidArgumentException('invalid length for $message when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($message) && (!preg_match("/^[\\S\\s]{1,150}$/", $message))) {
            throw new \InvalidArgumentException("invalid value for $message when calling PrepareRequestDetails., must conform to the pattern /^[\\S\\s]{1,150}$/.");
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets lock_details
     *
     * @return \OpenAPI\Client\Model\LockDetails|null
     */
    public function getLockDetails()
    {
        return $this->container['lock_details'];
    }

    /**
     * Sets lock_details
     *
     * @param \OpenAPI\Client\Model\LockDetails|null $lock_details lock_details
     *
     * @return self
     */
    public function setLockDetails($lock_details)
    {
        $this->container['lock_details'] = $lock_details;

        return $this;
    }

    /**
     * Gets block_id
     *
     * @return string|null
     */
    public function getBlockId()
    {
        return $this->container['block_id'];
    }

    /**
     * Sets block_id
     *
     * @param string|null $block_id block_id
     *
     * @return self
     */
    public function setBlockId($block_id)
    {
        if (!is_null($block_id) && (mb_strlen($block_id) > 150)) {
            throw new \InvalidArgumentException('invalid length for $block_id when calling PrepareRequestDetails., must be smaller than or equal to 150.');
        }
        if (!is_null($block_id) && (mb_strlen($block_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $block_id when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($block_id) && (!preg_match("/^[a-zA-Z0-9]{1,150}$/", $block_id))) {
            throw new \InvalidArgumentException("invalid value for $block_id when calling PrepareRequestDetails., must conform to the pattern /^[a-zA-Z0-9]{1,150}$/.");
        }

        $this->container['block_id'] = $block_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id The unique identifiers of the account
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (!is_null($account_id) && (mb_strlen($account_id) > 500)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling PrepareRequestDetails., must be smaller than or equal to 500.');
        }
        if (!is_null($account_id) && (mb_strlen($account_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($account_id) && (!preg_match("/^[a-zA-Z0-9:,\/.=\\-\\s]{1,500}/", $account_id))) {
            throw new \InvalidArgumentException("invalid value for $account_id when calling PrepareRequestDetails., must conform to the pattern /^[a-zA-Z0-9:,\/.=\\-\\s]{1,500}/.");
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets token_unit
     *
     * @return string|null
     */
    public function getTokenUnit()
    {
        return $this->container['token_unit'];
    }

    /**
     * Sets token_unit
     *
     * @param string|null $token_unit The unit of this token
     *
     * @return self
     */
    public function setTokenUnit($token_unit)
    {
        if (!is_null($token_unit) && (mb_strlen($token_unit) > 11)) {
            throw new \InvalidArgumentException('invalid length for $token_unit when calling PrepareRequestDetails., must be smaller than or equal to 11.');
        }
        if (!is_null($token_unit) && (mb_strlen($token_unit) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token_unit when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }

        $this->container['token_unit'] = $token_unit;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return \OpenAPI\Client\Model\Beneficiary|null
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param \OpenAPI\Client\Model\Beneficiary|null $beneficiary beneficiary
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \OpenAPI\Client\Model\Sender[]|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \OpenAPI\Client\Model\Sender[]|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets account_details
     *
     * @return \OpenAPI\Client\Model\AccountDetails|null
     */
    public function getAccountDetails()
    {
        return $this->container['account_details'];
    }

    /**
     * Sets account_details
     *
     * @param \OpenAPI\Client\Model\AccountDetails|null $account_details account_details
     *
     * @return self
     */
    public function setAccountDetails($account_details)
    {
        $this->container['account_details'] = $account_details;

        return $this;
    }

    /**
     * Gets overledger_signing_type
     *
     * @return string|null
     */
    public function getOverledgerSigningType()
    {
        return $this->container['overledger_signing_type'];
    }

    /**
     * Sets overledger_signing_type
     *
     * @param string|null $overledger_signing_type overledger_signing_type
     *
     * @return self
     */
    public function setOverledgerSigningType($overledger_signing_type)
    {
        if (!is_null($overledger_signing_type) && (mb_strlen($overledger_signing_type) > 30)) {
            throw new \InvalidArgumentException('invalid length for $overledger_signing_type when calling PrepareRequestDetails., must be smaller than or equal to 30.');
        }
        if (!is_null($overledger_signing_type) && (mb_strlen($overledger_signing_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $overledger_signing_type when calling PrepareRequestDetails., must be bigger than or equal to 0.');
        }
        if (!is_null($overledger_signing_type) && (!preg_match("/^[A-Za-z- ]{1,30}/", $overledger_signing_type))) {
            throw new \InvalidArgumentException("invalid value for $overledger_signing_type when calling PrepareRequestDetails., must conform to the pattern /^[A-Za-z- ]{1,30}/.");
        }

        $this->container['overledger_signing_type'] = $overledger_signing_type;

        return $this;
    }

    /**
     * Gets total_payment_amount
     *
     * @return \OpenAPI\Client\Model\Payment|null
     */
    public function getTotalPaymentAmount()
    {
        return $this->container['total_payment_amount'];
    }

    /**
     * Sets total_payment_amount
     *
     * @param \OpenAPI\Client\Model\Payment|null $total_payment_amount total_payment_amount
     *
     * @return self
     */
    public function setTotalPaymentAmount($total_payment_amount)
    {
        $this->container['total_payment_amount'] = $total_payment_amount;

        return $this;
    }

    /**
     * Gets signer_account
     *
     * @return \OpenAPI\Client\Model\SignerAccount|null
     */
    public function getSignerAccount()
    {
        return $this->container['signer_account'];
    }

    /**
     * Sets signer_account
     *
     * @param \OpenAPI\Client\Model\SignerAccount|null $signer_account signer_account
     *
     * @return self
     */
    public function setSignerAccount($signer_account)
    {
        $this->container['signer_account'] = $signer_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


