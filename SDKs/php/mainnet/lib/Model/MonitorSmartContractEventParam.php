<?php
/**
 * MonitorSmartContractEventParam
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MonitorSmartContractEventParam Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MonitorSmartContractEventParam implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MonitorSmartContractEventParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'selected_integer_length' => 'string',
        'type' => 'string',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'selected_integer_length' => null,
        'type' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'selected_integer_length' => 'selectedIntegerLength',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'selected_integer_length' => 'setSelectedIntegerLength',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'selected_integer_length' => 'getSelectedIntegerLength',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['selected_integer_length'] = $data['selected_integer_length'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['selected_integer_length']) && (mb_strlen($this->container['selected_integer_length']) > 30)) {
            $invalidProperties[] = "invalid value for 'selected_integer_length', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['selected_integer_length']) && (mb_strlen($this->container['selected_integer_length']) < 0)) {
            $invalidProperties[] = "invalid value for 'selected_integer_length', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['selected_integer_length']) && !preg_match("/^[a-zA-Z0-9]{1,30}$/", $this->container['selected_integer_length'])) {
            $invalidProperties[] = "invalid value for 'selected_integer_length', must be conform to the pattern /^[a-zA-Z0-9]{1,30}$/.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 30)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) < 0)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['type']) && !preg_match("/^[a-zA-Z]{1,30}$/", $this->container['type'])) {
            $invalidProperties[] = "invalid value for 'type', must be conform to the pattern /^[a-zA-Z]{1,30}$/.";
        }

        if (!is_null($this->container['value']) && (mb_strlen($this->container['value']) > 150)) {
            $invalidProperties[] = "invalid value for 'value', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['value']) && (mb_strlen($this->container['value']) < 0)) {
            $invalidProperties[] = "invalid value for 'value', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['value']) && !preg_match("/^[a-zA-Z0-9_ ]{1,150}$/", $this->container['value'])) {
            $invalidProperties[] = "invalid value for 'value', must be conform to the pattern /^[a-zA-Z0-9_ ]{1,150}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets selected_integer_length
     *
     * @return string|null
     */
    public function getSelectedIntegerLength()
    {
        return $this->container['selected_integer_length'];
    }

    /**
     * Sets selected_integer_length
     *
     * @param string|null $selected_integer_length selected_integer_length
     *
     * @return self
     */
    public function setSelectedIntegerLength($selected_integer_length)
    {
        if (!is_null($selected_integer_length) && (mb_strlen($selected_integer_length) > 30)) {
            throw new \InvalidArgumentException('invalid length for $selected_integer_length when calling MonitorSmartContractEventParam., must be smaller than or equal to 30.');
        }
        if (!is_null($selected_integer_length) && (mb_strlen($selected_integer_length) < 0)) {
            throw new \InvalidArgumentException('invalid length for $selected_integer_length when calling MonitorSmartContractEventParam., must be bigger than or equal to 0.');
        }
        if (!is_null($selected_integer_length) && (!preg_match("/^[a-zA-Z0-9]{1,30}$/", $selected_integer_length))) {
            throw new \InvalidArgumentException("invalid value for $selected_integer_length when calling MonitorSmartContractEventParam., must conform to the pattern /^[a-zA-Z0-9]{1,30}$/.");
        }

        $this->container['selected_integer_length'] = $selected_integer_length;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (!is_null($type) && (mb_strlen($type) > 30)) {
            throw new \InvalidArgumentException('invalid length for $type when calling MonitorSmartContractEventParam., must be smaller than or equal to 30.');
        }
        if (!is_null($type) && (mb_strlen($type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $type when calling MonitorSmartContractEventParam., must be bigger than or equal to 0.');
        }
        if (!is_null($type) && (!preg_match("/^[a-zA-Z]{1,30}$/", $type))) {
            throw new \InvalidArgumentException("invalid value for $type when calling MonitorSmartContractEventParam., must conform to the pattern /^[a-zA-Z]{1,30}$/.");
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (!is_null($value) && (mb_strlen($value) > 150)) {
            throw new \InvalidArgumentException('invalid length for $value when calling MonitorSmartContractEventParam., must be smaller than or equal to 150.');
        }
        if (!is_null($value) && (mb_strlen($value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $value when calling MonitorSmartContractEventParam., must be bigger than or equal to 0.');
        }
        if (!is_null($value) && (!preg_match("/^[a-zA-Z0-9_ ]{1,150}$/", $value))) {
            throw new \InvalidArgumentException("invalid value for $value when calling MonitorSmartContractEventParam., must conform to the pattern /^[a-zA-Z0-9_ ]{1,150}$/.");
        }

        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


