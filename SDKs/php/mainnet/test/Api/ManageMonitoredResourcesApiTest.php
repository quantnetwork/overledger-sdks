<?php
/**
 * ManageMonitoredResourcesApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ManageMonitoredResourcesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManageMonitoredResourcesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteEventMonitoring
     *
     * Stop monitoring a smart contract.
     *
     */
    public function testDeleteEventMonitoring()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteResourceMonitoringAddress
     *
     * Stop monitoring an address.
     *
     */
    public function testDeleteResourceMonitoringAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getListOfAddresses
     *
     * Retrieve a list of addresses being monitored.
     *
     */
    public function testGetListOfAddresses()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getListOfResources
     *
     * Retrieve a list of all resources being monitored.
     *
     */
    public function testGetListOfResources()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getListOfSmartContractEvents
     *
     * Retrieve a list of smart contracts being monitored.
     *
     */
    public function testGetListOfSmartContractEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMonitoredAddress
     *
     * Retrieve recorded updates for a specific monitored address.
     *
     */
    public function testGetMonitoredAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMonitoredSmartContractEventDetails
     *
     * Retrieve recorded updates for a specific monitored smart contract.
     *
     */
    public function testGetMonitoredSmartContractEventDetails()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateEventMonitoring
     *
     * Update the monitoring status of a smart contract.
     *
     */
    public function testUpdateEventMonitoring()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateResourceMonitoringAddress
     *
     * Update the monitoring status of an address.
     *
     */
    public function testUpdateResourceMonitoringAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
