=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CreateAQRC721TokenCollectionTransactionApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CreateAQRC721TokenCollectionTransactionApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CreateAQRC721TokenCollectionTransactionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CreateAQRC721TokenCollectionTransactionApi' do
    it 'should create an instance of CreateAQRC721TokenCollectionTransactionApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CreateAQRC721TokenCollectionTransactionApi)
    end
  end

  # unit tests for prepare_collect_request
  # Prepare a QRC721 token collection transaction for signing
  # Transforms a transaction request ready to be signed and returns a request ID for executing. The supported transaction types are “Approve Asset Collect” and “Collect Asset”. The “Approve Asset Collect” transaction type will allow you to approve someone to subsequently make a transaction that takes the NFT from your address into their own. The “Collect Asset” transaction type will create the transaction to pull the approved NFT from an account into the receiving account. Successfully prepared transactions can then be executed using the /execution/transaction API.
  # @param authorization 
  # @param prepare_payment_transaction_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [PrepareTransactionResponse]
  describe 'prepare_collect_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
