=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CreateAndPayFromAQRC20SharedAccountApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CreateAndPayFromAQRC20SharedAccountApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CreateAndPayFromAQRC20SharedAccountApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CreateAndPayFromAQRC20SharedAccountApi' do
    it 'should create an instance of CreateAndPayFromAQRC20SharedAccountApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CreateAndPayFromAQRC20SharedAccountApi)
    end
  end

  # unit tests for execute_prepared_request_transaction
  # Execute a transaction on a DLT
  # Takes a request ID and submits a signed transaction to the requested DLT.
  # @param authorization 
  # @param execute_transaction_request 
  # @param [Hash] opts the optional parameters
  # @return [ExecuteTransactionResponse]
  describe 'execute_prepared_request_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for prepare_secondary_owner_request
  # Prepare a request for a QRC20 shared account
  # Transforms a transaction request for a QRC20 shared account to be signed and returns a request ID for executing. The supported types for this API are “Add Account”, which will add someone as an operator of your account so that they can make payments on your behalf, \&quot;Remove Account\&quot; which will remove someone as an operator of your account so that they can no longer make payments on your behalf and “Create Credit” for account operators to make a QRC20 token payment on behalf of the account owner. Successfully prepared transactions can then be executed using the /execution/transaction API
  # @param authorization 
  # @param prepare_add_secondary_account_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [PrepareTransactionResponse]
  describe 'prepare_secondary_owner_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
