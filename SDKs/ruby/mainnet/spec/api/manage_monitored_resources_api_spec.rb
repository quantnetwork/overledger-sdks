=begin
#Quant Overledger API

#Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ManageMonitoredResourcesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ManageMonitoredResourcesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ManageMonitoredResourcesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ManageMonitoredResourcesApi' do
    it 'should create an instance of ManageMonitoredResourcesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ManageMonitoredResourcesApi)
    end
  end

  # unit tests for delete_event_monitoring
  # Stop monitoring a smart contract
  # Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
  # @param authorization 
  # @param resource_monitoring_id 
  # @param [Hash] opts the optional parameters
  # @return [SmartContractMonitoringSchema]
  describe 'delete_event_monitoring test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_monitoring_address
  # Stop monitoring an address
  # Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
  # @param authorization 
  # @param resource_monitoring_id 
  # @param [Hash] opts the optional parameters
  # @return [DeleteResourceMonitoringAddressSchema]
  describe 'delete_resource_monitoring_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_of_addresses
  # Retrieve a list of addresses being monitored
  # Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
  # @param authorization 
  # @param [Hash] opts the optional parameters
  # @return [Array<ResourceMonitoringAddressSchema>]
  describe 'get_list_of_addresses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_of_resources
  # Retrieve a list of all resources being monitored
  # Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
  # @param authorization 
  # @param [Hash] opts the optional parameters
  # @return [Array<SmartContractMonitoringSchema>]
  describe 'get_list_of_resources test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_of_smart_contract_events
  # Retrieve a list of smart contracts being monitored
  # Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
  # @param authorization 
  # @param [Hash] opts the optional parameters
  # @return [Array<SmartContractMonitoringSchema>]
  describe 'get_list_of_smart_contract_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_monitored_address
  # Retrieve recorded updates for a specific monitored address
  # Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
  # @param authorization 
  # @param resource_monitoring_id 
  # @param [Hash] opts the optional parameters
  # @return [AddressMonitoringDetailsSchema]
  describe 'get_monitored_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_monitored_smart_contract_event_details
  # Retrieve recorded updates for a specific monitored smart contract
  # Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
  # @param authorization 
  # @param resource_monitoring_id 
  # @param [Hash] opts the optional parameters
  # @return [SmartContractMonitoringDetailsSchema]
  describe 'get_monitored_smart_contract_event_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_event_monitoring
  # Update the monitoring status of a smart contract
  # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
  # @param authorization 
  # @param resource_monitoring_id 
  # @param status_update_monitoring_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [SmartContractMonitoringSchema]
  describe 'update_event_monitoring test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_resource_monitoring_address
  # Update the monitoring status of an address
  # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
  # @param authorization 
  # @param resource_monitoring_id 
  # @param status_update_monitoring_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [UpdateAddressMonitoringSchema]
  describe 'update_resource_monitoring_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
