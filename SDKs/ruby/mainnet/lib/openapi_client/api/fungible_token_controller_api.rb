=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module OpenapiClient
  class FungibleTokenControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param technology [String] 
    # @param network [String] 
    # @param unit [String] 
    # @param [Hash] opts the optional parameters
    # @return [Erc20DTO]
    def get_token(technology, network, unit, opts = {})
      data, _status_code, _headers = get_token_with_http_info(technology, network, unit, opts)
      data
    end

    # @param technology [String] 
    # @param network [String] 
    # @param unit [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Erc20DTO, Integer, Hash)>] Erc20DTO data, response status code and response headers
    def get_token_with_http_info(technology, network, unit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FungibleTokenControllerApi.get_token ...'
      end
      # verify the required parameter 'technology' is set
      if @api_client.config.client_side_validation && technology.nil?
        fail ArgumentError, "Missing the required parameter 'technology' when calling FungibleTokenControllerApi.get_token"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FungibleTokenControllerApi.get_token"
      end
      # verify the required parameter 'unit' is set
      if @api_client.config.client_side_validation && unit.nil?
        fail ArgumentError, "Missing the required parameter 'unit' when calling FungibleTokenControllerApi.get_token"
      end
      # resource path
      local_var_path = '/v2/token/fungible'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'technology'] = technology
      query_params[:'network'] = network
      query_params[:'unit'] = unit

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Erc20DTO'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FungibleTokenControllerApi.get_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FungibleTokenControllerApi#get_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
