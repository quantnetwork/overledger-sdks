=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module OpenapiClient
  class TransactionSearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Execute a search for a transaction on a DLT
    # Takes a request ID and searches for the transaction on the requested DLT
    # @param authorization [String] 
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ExecuteSearchTransactionResponse]
    def execute_prepared_search_request_transaction(authorization, request_id, opts = {})
      data, _status_code, _headers = execute_prepared_search_request_transaction_with_http_info(authorization, request_id, opts)
      data
    end

    # Execute a search for a transaction on a DLT
    # Takes a request ID and searches for the transaction on the requested DLT
    # @param authorization [String] 
    # @param request_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExecuteSearchTransactionResponse, Integer, Hash)>] ExecuteSearchTransactionResponse data, response status code and response headers
    def execute_prepared_search_request_transaction_with_http_info(authorization, request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionSearchApi.execute_prepared_search_request_transaction ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TransactionSearchApi.execute_prepared_search_request_transaction"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 4096
        fail ArgumentError, 'invalid value for "authorization" when calling TransactionSearchApi.execute_prepared_search_request_transaction, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling TransactionSearchApi.execute_prepared_search_request_transaction, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,4096}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling TransactionSearchApi.execute_prepared_search_request_transaction, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling TransactionSearchApi.execute_prepared_search_request_transaction"
      end
      if @api_client.config.client_side_validation && request_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "request_id" when calling TransactionSearchApi.execute_prepared_search_request_transaction, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && request_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "request_id" when calling TransactionSearchApi.execute_prepared_search_request_transaction, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && request_id !~ pattern
        fail ArgumentError, "invalid value for 'request_id' when calling TransactionSearchApi.execute_prepared_search_request_transaction, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/execution/search/transaction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestId'] = request_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExecuteSearchTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"TransactionSearchApi.execute_prepared_search_request_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionSearchApi#execute_prepared_search_request_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prepare a search for a transaction on a DLT
    # Searches for and returns data on transactions on a particular DLT. Returns a request ID for executing a transaction search on the requested DLT
    # @param authorization [String] 
    # @param transaction_id [String] 
    # @param prepare_search_schema [PrepareSearchSchema] 
    # @param [Hash] opts the optional parameters
    # @return [PrepareSearchResponseSchema]
    def prepare_search_request(authorization, transaction_id, prepare_search_schema, opts = {})
      data, _status_code, _headers = prepare_search_request_with_http_info(authorization, transaction_id, prepare_search_schema, opts)
      data
    end

    # Prepare a search for a transaction on a DLT
    # Searches for and returns data on transactions on a particular DLT. Returns a request ID for executing a transaction search on the requested DLT
    # @param authorization [String] 
    # @param transaction_id [String] 
    # @param prepare_search_schema [PrepareSearchSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrepareSearchResponseSchema, Integer, Hash)>] PrepareSearchResponseSchema data, response status code and response headers
    def prepare_search_request_with_http_info(authorization, transaction_id, prepare_search_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionSearchApi.prepare_search_request ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TransactionSearchApi.prepare_search_request"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 4096
        fail ArgumentError, 'invalid value for "authorization" when calling TransactionSearchApi.prepare_search_request, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling TransactionSearchApi.prepare_search_request, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,4096}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling TransactionSearchApi.prepare_search_request, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling TransactionSearchApi.prepare_search_request"
      end
      if @api_client.config.client_side_validation && transaction_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "transaction_id" when calling TransactionSearchApi.prepare_search_request, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && transaction_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "transaction_id" when calling TransactionSearchApi.prepare_search_request, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,100}$/)
      if @api_client.config.client_side_validation && transaction_id !~ pattern
        fail ArgumentError, "invalid value for 'transaction_id' when calling TransactionSearchApi.prepare_search_request, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'prepare_search_schema' is set
      if @api_client.config.client_side_validation && prepare_search_schema.nil?
        fail ArgumentError, "Missing the required parameter 'prepare_search_schema' when calling TransactionSearchApi.prepare_search_request"
      end
      # resource path
      local_var_path = '/v2/preparation/search/transaction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transactionId'] = transaction_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prepare_search_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'PrepareSearchResponseSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"TransactionSearchApi.prepare_search_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionSearchApi#prepare_search_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
