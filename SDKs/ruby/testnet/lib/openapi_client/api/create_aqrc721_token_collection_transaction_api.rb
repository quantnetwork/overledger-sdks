=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module OpenapiClient
  class CreateAQRC721TokenCollectionTransactionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Prepare a QRC721 token collection transaction for signing
    # Transforms a transaction request ready to be signed and returns a request ID for executing. The supported transaction types are “Approve Asset Collect” and “Collect Asset”. The “Approve Asset Collect” transaction type will allow you to approve someone to subsequently make a transaction that takes the NFT from your address into their own. The “Collect Asset” transaction type will create the transaction to pull the approved NFT from an account into the receiving account. Successfully prepared transactions can then be executed using the /execution/transaction API.
    # @param authorization [String] 
    # @param prepare_payment_transaction_request_schema [PreparePaymentTransactionRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [PrepareTransactionResponse]
    def prepare_collect_request(authorization, prepare_payment_transaction_request_schema, opts = {})
      data, _status_code, _headers = prepare_collect_request_with_http_info(authorization, prepare_payment_transaction_request_schema, opts)
      data
    end

    # Prepare a QRC721 token collection transaction for signing
    # Transforms a transaction request ready to be signed and returns a request ID for executing. The supported transaction types are “Approve Asset Collect” and “Collect Asset”. The “Approve Asset Collect” transaction type will allow you to approve someone to subsequently make a transaction that takes the NFT from your address into their own. The “Collect Asset” transaction type will create the transaction to pull the approved NFT from an account into the receiving account. Successfully prepared transactions can then be executed using the /execution/transaction API.
    # @param authorization [String] 
    # @param prepare_payment_transaction_request_schema [PreparePaymentTransactionRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrepareTransactionResponse, Integer, Hash)>] PrepareTransactionResponse data, response status code and response headers
    def prepare_collect_request_with_http_info(authorization, prepare_payment_transaction_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'prepare_payment_transaction_request_schema' is set
      if @api_client.config.client_side_validation && prepare_payment_transaction_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'prepare_payment_transaction_request_schema' when calling CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request"
      end
      # resource path
      local_var_path = '/v2/tokenise/preparation/transaction/qrc721/collect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prepare_payment_transaction_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'PrepareTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"CreateAQRC721TokenCollectionTransactionApi.prepare_collect_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreateAQRC721TokenCollectionTransactionApi#prepare_collect_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
