=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module OpenapiClient
  class ManageMonitoredResourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Stop monitoring a smart contract
    # Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SmartContractMonitoringSchema]
    def delete_event_monitoring(authorization, resource_monitoring_id, opts = {})
      data, _status_code, _headers = delete_event_monitoring_with_http_info(authorization, resource_monitoring_id, opts)
      data
    end

    # Stop monitoring a smart contract
    # Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmartContractMonitoringSchema, Integer, Hash)>] SmartContractMonitoringSchema data, response status code and response headers
    def delete_event_monitoring_with_http_info(authorization, resource_monitoring_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.delete_event_monitoring ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.delete_event_monitoring"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.delete_event_monitoring, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.delete_event_monitoring, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.delete_event_monitoring, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.delete_event_monitoring"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.delete_event_monitoring, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.delete_event_monitoring, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.delete_event_monitoring, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SmartContractMonitoringSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.delete_event_monitoring",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#delete_event_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop monitoring an address
    # Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteResourceMonitoringAddressSchema]
    def delete_resource_monitoring_address(authorization, resource_monitoring_id, opts = {})
      data, _status_code, _headers = delete_resource_monitoring_address_with_http_info(authorization, resource_monitoring_id, opts)
      data
    end

    # Stop monitoring an address
    # Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResourceMonitoringAddressSchema, Integer, Hash)>] DeleteResourceMonitoringAddressSchema data, response status code and response headers
    def delete_resource_monitoring_address_with_http_info(authorization, resource_monitoring_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.delete_resource_monitoring_address ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.delete_resource_monitoring_address, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResourceMonitoringAddressSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.delete_resource_monitoring_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#delete_resource_monitoring_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of addresses being monitored
    # Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ResourceMonitoringAddressSchema>]
    def get_list_of_addresses(authorization, opts = {})
      data, _status_code, _headers = get_list_of_addresses_with_http_info(authorization, opts)
      data
    end

    # Retrieve a list of addresses being monitored
    # Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ResourceMonitoringAddressSchema>, Integer, Hash)>] Array<ResourceMonitoringAddressSchema> data, response status code and response headers
    def get_list_of_addresses_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.get_list_of_addresses ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_addresses"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_addresses, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_addresses, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_addresses, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ResourceMonitoringAddressSchema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.get_list_of_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#get_list_of_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of all resources being monitored
    # Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<SmartContractMonitoringSchema>]
    def get_list_of_resources(authorization, opts = {})
      data, _status_code, _headers = get_list_of_resources_with_http_info(authorization, opts)
      data
    end

    # Retrieve a list of all resources being monitored
    # Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SmartContractMonitoringSchema>, Integer, Hash)>] Array<SmartContractMonitoringSchema> data, response status code and response headers
    def get_list_of_resources_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.get_list_of_resources ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_resources"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_resources, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_resources, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_resources, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SmartContractMonitoringSchema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.get_list_of_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#get_list_of_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of smart contracts being monitored
    # Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<SmartContractMonitoringSchema>]
    def get_list_of_smart_contract_events(authorization, opts = {})
      data, _status_code, _headers = get_list_of_smart_contract_events_with_http_info(authorization, opts)
      data
    end

    # Retrieve a list of smart contracts being monitored
    # Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SmartContractMonitoringSchema>, Integer, Hash)>] Array<SmartContractMonitoringSchema> data, response status code and response headers
    def get_list_of_smart_contract_events_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.get_list_of_smart_contract_events ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_smart_contract_events"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_smart_contract_events, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_list_of_smart_contract_events, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.get_list_of_smart_contract_events, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/smartcontractevents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SmartContractMonitoringSchema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.get_list_of_smart_contract_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#get_list_of_smart_contract_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve recorded updates for a specific monitored address
    # Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AddressMonitoringDetailsSchema]
    def get_monitored_address(authorization, resource_monitoring_id, opts = {})
      data, _status_code, _headers = get_monitored_address_with_http_info(authorization, resource_monitoring_id, opts)
      data
    end

    # Retrieve recorded updates for a specific monitored address
    # Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressMonitoringDetailsSchema, Integer, Hash)>] AddressMonitoringDetailsSchema data, response status code and response headers
    def get_monitored_address_with_http_info(authorization, resource_monitoring_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.get_monitored_address ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.get_monitored_address"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_monitored_address, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_monitored_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.get_monitored_address, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.get_monitored_address"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.get_monitored_address, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.get_monitored_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.get_monitored_address, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressMonitoringDetailsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.get_monitored_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#get_monitored_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve recorded updates for a specific monitored smart contract
    # Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SmartContractMonitoringDetailsSchema]
    def get_monitored_smart_contract_event_details(authorization, resource_monitoring_id, opts = {})
      data, _status_code, _headers = get_monitored_smart_contract_event_details_with_http_info(authorization, resource_monitoring_id, opts)
      data
    end

    # Retrieve recorded updates for a specific monitored smart contract
    # Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmartContractMonitoringDetailsSchema, Integer, Hash)>] SmartContractMonitoringDetailsSchema data, response status code and response headers
    def get_monitored_smart_contract_event_details_with_http_info(authorization, resource_monitoring_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SmartContractMonitoringDetailsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.get_monitored_smart_contract_event_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#get_monitored_smart_contract_event_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the monitoring status of a smart contract
    # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param status_update_monitoring_request_schema [StatusUpdateMonitoringRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [SmartContractMonitoringSchema]
    def update_event_monitoring(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts = {})
      data, _status_code, _headers = update_event_monitoring_with_http_info(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts)
      data
    end

    # Update the monitoring status of a smart contract
    # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param status_update_monitoring_request_schema [StatusUpdateMonitoringRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmartContractMonitoringSchema, Integer, Hash)>] SmartContractMonitoringSchema data, response status code and response headers
    def update_event_monitoring_with_http_info(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.update_event_monitoring ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.update_event_monitoring"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.update_event_monitoring, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.update_event_monitoring, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.update_event_monitoring, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.update_event_monitoring"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.update_event_monitoring, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.update_event_monitoring, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.update_event_monitoring, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'status_update_monitoring_request_schema' is set
      if @api_client.config.client_side_validation && status_update_monitoring_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'status_update_monitoring_request_schema' when calling ManageMonitoredResourcesApi.update_event_monitoring"
      end
      # resource path
      local_var_path = '/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(status_update_monitoring_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'SmartContractMonitoringSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.update_event_monitoring",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#update_event_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the monitoring status of an address
    # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param status_update_monitoring_request_schema [StatusUpdateMonitoringRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAddressMonitoringSchema]
    def update_resource_monitoring_address(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts = {})
      data, _status_code, _headers = update_resource_monitoring_address_with_http_info(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts)
      data
    end

    # Update the monitoring status of an address
    # Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
    # @param authorization [String] 
    # @param resource_monitoring_id [String] 
    # @param status_update_monitoring_request_schema [StatusUpdateMonitoringRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAddressMonitoringSchema, Integer, Hash)>] UpdateAddressMonitoringSchema data, response status code and response headers
    def update_resource_monitoring_address_with_http_info(authorization, resource_monitoring_id, status_update_monitoring_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageMonitoredResourcesApi.update_resource_monitoring_address ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ManageMonitoredResourcesApi.update_resource_monitoring_address"
      end
      if @api_client.config.client_side_validation && authorization.to_s.length > 5010
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, the character length must be smaller than or equal to 5010.'
      end

      if @api_client.config.client_side_validation && authorization.to_s.length < 0
        fail ArgumentError, 'invalid value for "authorization" when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^Bearer [A-Za-z0-9\-_. ]{1,5010}$/)
      if @api_client.config.client_side_validation && authorization !~ pattern
        fail ArgumentError, "invalid value for 'authorization' when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'resource_monitoring_id' is set
      if @api_client.config.client_side_validation && resource_monitoring_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.update_resource_monitoring_address"
      end
      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && resource_monitoring_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "resource_monitoring_id" when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-]{1,36}$/)
      if @api_client.config.client_side_validation && resource_monitoring_id !~ pattern
        fail ArgumentError, "invalid value for 'resource_monitoring_id' when calling ManageMonitoredResourcesApi.update_resource_monitoring_address, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'status_update_monitoring_request_schema' is set
      if @api_client.config.client_side_validation && status_update_monitoring_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'status_update_monitoring_request_schema' when calling ManageMonitoredResourcesApi.update_resource_monitoring_address"
      end
      # resource path
      local_var_path = '/v2/resourcemonitoring/address/{resourceMonitoringId}'.sub('{' + 'resourceMonitoringId' + '}', CGI.escape(resource_monitoring_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(status_update_monitoring_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAddressMonitoringSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2_Security_Scheme']

      new_options = opts.merge(
        :operation => :"ManageMonitoredResourcesApi.update_resource_monitoring_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageMonitoredResourcesApi#update_resource_monitoring_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
