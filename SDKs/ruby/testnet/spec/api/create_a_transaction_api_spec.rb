=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CreateATransactionApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CreateATransactionApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CreateATransactionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CreateATransactionApi' do
    it 'should create an instance of CreateATransactionApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CreateATransactionApi)
    end
  end

  # unit tests for execute_prepared_request_native_transaction
  # Execute a native transaction on the DLT
  # Takes a request ID and submits a signed native transaction to the requested DLT
  # @param authorization 
  # @param execute_transaction_request 
  # @param [Hash] opts the optional parameters
  # @return [ExecuteTransactionResponse]
  describe 'execute_prepared_request_native_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for execute_prepared_request_transaction
  # Execute a transaction on a DLT
  # Takes a request ID and submits a signed transaction to the requested DLT.
  # @param authorization 
  # @param execute_transaction_request 
  # @param [Hash] opts the optional parameters
  # @return [ExecuteTransactionResponse]
  describe 'execute_prepared_request_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for prepare_native_transaction
  # Prepare a DLT native transaction
  # Allows advanced developers to submit their own DLT native transactions via Overledger. Returns a request ID for executing a DLT native transaction on the requested DLT
  # @param authorization 
  # @param prepare_native_transaction_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [PrepareSearchResponseSchema]
  describe 'prepare_native_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for prepare_transaction_request1
  # Prepare a DLT transaction for signing
  # The first step of submitting a transaction to Overledger requires preparing the transaction for signing. This API transforms a transaction request into a payload that can be signed. It returns a request ID that is used to execute the transaction after it is signed.  There are three types of transactions supported: * Payment     * Send payments in the native token of the network     * Send payments with ERC20 fungible tokens supported by Overledger on Ethereum-compatible networks. To help you test ERC20 functionality we have deployed the QNT token on the Ethereum-based test networks we support. You can check the request samples to view an example of a Smart Contract Invoke which requests test QNT from our faucet contracts. Please note that the faucet Smart Contract ID is different for all the test networks. Here is a list of faucet ids per network:         * Ethereum Goerli Testnet: 0x8cFCC46A00d6E9e86aacFa74AC5f74e90Fb6994c  * Transfer     * Transfer ownership of ERC721 non-fungible tokens supported by Overledger on Ethereum * Contract Invoke     * Call any function on any contract deployed on Ethereum, Polygon, XDC Network or our Hyperledger Fabric Sandbox
  # @param authorization 
  # @param prepare_payment_transaction_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [PrepareTransactionResponse]
  describe 'prepare_transaction_request1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
