=begin
#Quant Overledger API

#Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::MonitorAResourceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MonitorAResourceApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::MonitorAResourceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MonitorAResourceApi' do
    it 'should create an instance of MonitorAResourceApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::MonitorAResourceApi)
    end
  end

  # unit tests for resource_monitoring_address
  # Monitor an address for incoming and outgoing transactions
  # Overledger creates a tracking record for the given address and records information each time the given address receives or sends transactions on the DLT
  # @param authorization 
  # @param address_monitoring_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [AddressMonitoringResponseSchema]
  describe 'resource_monitoring_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for track_and_subscribe_event
  # Monitor a smart contract for an event
  # Overledger creates a tracking record for the given smart contract and records information each time a transaction on the DLT triggers a specific event
  # @param authorization 
  # @param monitor_smart_contract_request_schema 
  # @param [Hash] opts the optional parameters
  # @return [CreateSmartContractMonitoringSchema]
  describe 'track_and_subscribe_event test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
