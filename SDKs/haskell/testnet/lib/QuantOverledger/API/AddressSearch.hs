{-
   Quant Overledger API

   Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.AddressSearch
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.AddressSearch where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** AddressSearch

-- *** autoExecuteSearchAddressBalanceRequest

-- | @POST \/v2\/autoexecution\/search\/address\/balance\/{addressId}@
-- 
-- Prepare and automatically execute a search for an address balance on a DLT.
-- 
-- Generates a request ID and automatically executes the address balance search on the requested DLT.
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
autoExecuteSearchAddressBalanceRequest
  :: (Consumes AutoExecuteSearchAddressBalanceRequest MimeJSON, MimeRender MimeJSON PrepareSearchSchema)
  => PrepareSearchSchema -- ^ "prepareSearchSchema"
  -> Authorization -- ^ "authorization"
  -> AddressId -- ^ "addressId"
  -> QuantOverledgerRequest AutoExecuteSearchAddressBalanceRequest MimeJSON AutoExecuteSearchAddressBalanceResponseSchema MimeJSON
autoExecuteSearchAddressBalanceRequest prepareSearchSchema (Authorization authorization) (AddressId addressId) =
  _mkRequest "POST" ["/v2/autoexecution/search/address/balance/",toPath addressId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareSearchSchema
    `addHeader` toHeader ("Authorization", authorization)

data AutoExecuteSearchAddressBalanceRequest 
instance HasBodyParam AutoExecuteSearchAddressBalanceRequest PrepareSearchSchema 

-- | @application/json@
instance Consumes AutoExecuteSearchAddressBalanceRequest MimeJSON

-- | @application/json@
instance Produces AutoExecuteSearchAddressBalanceRequest MimeJSON


-- *** executePreparedSearchRequestAddressBalance

-- | @POST \/v2\/execution\/search\/address\/balance@
-- 
-- Execute a search for an address balance on a DLT
-- 
-- Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
executePreparedSearchRequestAddressBalance
  :: Authorization -- ^ "authorization"
  -> RequestId -- ^ "requestId"
  -> QuantOverledgerRequest ExecutePreparedSearchRequestAddressBalance MimeNoContent ExecuteSearchBalanceResponse MimeJSON
executePreparedSearchRequestAddressBalance (Authorization authorization) (RequestId requestId) =
  _mkRequest "POST" ["/v2/execution/search/address/balance"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)
    `addQuery` toQuery ("requestId", Just requestId)

data ExecutePreparedSearchRequestAddressBalance  
-- | @application/json@
instance Produces ExecutePreparedSearchRequestAddressBalance MimeJSON


-- *** executePreparedSearchRequestAddressSequence

-- | @POST \/v2\/execution\/search\/address\/sequence@
-- 
-- Execute a search for an address sequence on a DLT
-- 
-- Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT's
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
executePreparedSearchRequestAddressSequence
  :: Authorization -- ^ "authorization"
  -> RequestId -- ^ "requestId"
  -> QuantOverledgerRequest ExecutePreparedSearchRequestAddressSequence MimeNoContent ExecuteSearchSequenceResponse MimeJSON
executePreparedSearchRequestAddressSequence (Authorization authorization) (RequestId requestId) =
  _mkRequest "POST" ["/v2/execution/search/address/sequence"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)
    `addQuery` toQuery ("requestId", Just requestId)

data ExecutePreparedSearchRequestAddressSequence  
-- | @application/json@
instance Produces ExecutePreparedSearchRequestAddressSequence MimeJSON


-- *** prepareAddressBalanceSearchRequest

-- | @POST \/v2\/preparation\/search\/address\/balance\/{addressId}@
-- 
-- Prepare Search for an Address Balance.
-- 
-- Perform an address balance search on the requested DLT. Returns a request ID to execute
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareAddressBalanceSearchRequest
  :: (Consumes PrepareAddressBalanceSearchRequest MimeJSON, MimeRender MimeJSON PrepareSearchSchema)
  => PrepareSearchSchema -- ^ "prepareSearchSchema"
  -> Authorization -- ^ "authorization"
  -> AddressId -- ^ "addressId"
  -> QuantOverledgerRequest PrepareAddressBalanceSearchRequest MimeJSON PrepareSearchResponseSchema MimeJSON
prepareAddressBalanceSearchRequest prepareSearchSchema (Authorization authorization) (AddressId addressId) =
  _mkRequest "POST" ["/v2/preparation/search/address/balance/",toPath addressId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareSearchSchema
    `addHeader` toHeader ("Authorization", authorization)

data PrepareAddressBalanceSearchRequest 
instance HasBodyParam PrepareAddressBalanceSearchRequest PrepareSearchSchema 

-- | @application/json@
instance Consumes PrepareAddressBalanceSearchRequest MimeJSON

-- | @application/json@
instance Produces PrepareAddressBalanceSearchRequest MimeJSON


-- *** prepareAddressSequenceSearchRequest

-- | @POST \/v2\/preparation\/search\/address\/sequence\/{addressId}@
-- 
-- Prepare Search for an Address Sequence.
-- 
-- Perform an address sequence search on the requested DLT.Returns a request ID to execute
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareAddressSequenceSearchRequest
  :: (Consumes PrepareAddressSequenceSearchRequest MimeJSON, MimeRender MimeJSON PrepareSearchSchema)
  => PrepareSearchSchema -- ^ "prepareSearchSchema"
  -> Authorization -- ^ "authorization"
  -> AddressId -- ^ "addressId"
  -> QuantOverledgerRequest PrepareAddressSequenceSearchRequest MimeJSON PrepareSearchResponseSchema MimeJSON
prepareAddressSequenceSearchRequest prepareSearchSchema (Authorization authorization) (AddressId addressId) =
  _mkRequest "POST" ["/v2/preparation/search/address/sequence/",toPath addressId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareSearchSchema
    `addHeader` toHeader ("Authorization", authorization)

data PrepareAddressSequenceSearchRequest 
instance HasBodyParam PrepareAddressSequenceSearchRequest PrepareSearchSchema 

-- | @application/json@
instance Consumes PrepareAddressSequenceSearchRequest MimeJSON

-- | @application/json@
instance Produces PrepareAddressSequenceSearchRequest MimeJSON


-- *** prepareAddressSequenceSearchRequest1

-- | @POST \/v2\/autoexecution\/search\/address\/sequence\/{addressId}@
-- 
-- Prepare and automatically execute a search for an Address Sequence.
-- 
-- Generates a request ID and automatically executes the address sequence search on the requested DLT.
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareAddressSequenceSearchRequest1
  :: (Consumes PrepareAddressSequenceSearchRequest1 MimeJSON, MimeRender MimeJSON PrepareSearchSchema)
  => PrepareSearchSchema -- ^ "prepareSearchSchema"
  -> Authorization -- ^ "authorization"
  -> AddressId -- ^ "addressId"
  -> QuantOverledgerRequest PrepareAddressSequenceSearchRequest1 MimeJSON AutoExecSearchAddressSequenceResponseSchema MimeJSON
prepareAddressSequenceSearchRequest1 prepareSearchSchema (Authorization authorization) (AddressId addressId) =
  _mkRequest "POST" ["/v2/autoexecution/search/address/sequence/",toPath addressId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareSearchSchema
    `addHeader` toHeader ("Authorization", authorization)

data PrepareAddressSequenceSearchRequest1 
instance HasBodyParam PrepareAddressSequenceSearchRequest1 PrepareSearchSchema 

-- | @application/json@
instance Consumes PrepareAddressSequenceSearchRequest1 MimeJSON

-- | @application/json@
instance Produces PrepareAddressSequenceSearchRequest1 MimeJSON

