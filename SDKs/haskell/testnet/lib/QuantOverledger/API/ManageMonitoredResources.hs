{-
   Quant Overledger API

   Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.ManageMonitoredResources
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.ManageMonitoredResources where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ManageMonitoredResources

-- *** deleteEventMonitoring

-- | @DELETE \/v2\/resourcemonitoring\/smartcontractevent\/{resourceMonitoringId}@
-- 
-- Stop monitoring a smart contract
-- 
-- Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
deleteEventMonitoring
  :: Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest DeleteEventMonitoring MimeNoContent SmartContractMonitoringSchema MimeJSON
deleteEventMonitoring (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "DELETE" ["/v2/resourcemonitoring/smartcontractevent/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data DeleteEventMonitoring  
-- | @application/json@
instance Produces DeleteEventMonitoring MimeJSON


-- *** deleteResourceMonitoringAddress

-- | @DELETE \/v2\/resourcemonitoring\/address\/{resourceMonitoringId}@
-- 
-- Stop monitoring an address
-- 
-- Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
deleteResourceMonitoringAddress
  :: Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest DeleteResourceMonitoringAddress MimeNoContent DeleteResourceMonitoringAddressSchema MimeJSON
deleteResourceMonitoringAddress (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "DELETE" ["/v2/resourcemonitoring/address/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data DeleteResourceMonitoringAddress  
-- | @application/json@
instance Produces DeleteResourceMonitoringAddress MimeJSON


-- *** getListOfAddresses

-- | @GET \/v2\/resourcemonitoring\/addresses@
-- 
-- Retrieve a list of addresses being monitored
-- 
-- Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
getListOfAddresses
  :: Authorization -- ^ "authorization"
  -> QuantOverledgerRequest GetListOfAddresses MimeNoContent [ResourceMonitoringAddressSchema] MimeJSON
getListOfAddresses (Authorization authorization) =
  _mkRequest "GET" ["/v2/resourcemonitoring/addresses"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data GetListOfAddresses  
-- | @application/json@
instance Produces GetListOfAddresses MimeJSON


-- *** getListOfResources

-- | @GET \/v2\/resourcemonitoring@
-- 
-- Retrieve a list of all resources being monitored
-- 
-- Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
getListOfResources
  :: Authorization -- ^ "authorization"
  -> QuantOverledgerRequest GetListOfResources MimeNoContent [SmartContractMonitoringSchema] MimeJSON
getListOfResources (Authorization authorization) =
  _mkRequest "GET" ["/v2/resourcemonitoring"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data GetListOfResources  
-- | @application/json@
instance Produces GetListOfResources MimeJSON


-- *** getListOfSmartContractEvents

-- | @GET \/v2\/resourcemonitoring\/smartcontractevents@
-- 
-- Retrieve a list of smart contracts being monitored
-- 
-- Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
getListOfSmartContractEvents
  :: Authorization -- ^ "authorization"
  -> QuantOverledgerRequest GetListOfSmartContractEvents MimeNoContent [SmartContractMonitoringSchema] MimeJSON
getListOfSmartContractEvents (Authorization authorization) =
  _mkRequest "GET" ["/v2/resourcemonitoring/smartcontractevents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data GetListOfSmartContractEvents  
-- | @application/json@
instance Produces GetListOfSmartContractEvents MimeJSON


-- *** getMonitoredAddress

-- | @GET \/v2\/resourcemonitoring\/address\/{resourceMonitoringId}@
-- 
-- Retrieve recorded updates for a specific monitored address
-- 
-- Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
getMonitoredAddress
  :: Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest GetMonitoredAddress MimeNoContent AddressMonitoringDetailsSchema MimeJSON
getMonitoredAddress (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "GET" ["/v2/resourcemonitoring/address/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data GetMonitoredAddress  
-- | @application/json@
instance Produces GetMonitoredAddress MimeJSON


-- *** getMonitoredSmartContractEventDetails

-- | @GET \/v2\/resourcemonitoring\/smartcontractevent\/{resourceMonitoringId}@
-- 
-- Retrieve recorded updates for a specific monitored smart contract
-- 
-- Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
getMonitoredSmartContractEventDetails
  :: Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest GetMonitoredSmartContractEventDetails MimeNoContent SmartContractMonitoringDetailsSchema MimeJSON
getMonitoredSmartContractEventDetails (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "GET" ["/v2/resourcemonitoring/smartcontractevent/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data GetMonitoredSmartContractEventDetails  
-- | @application/json@
instance Produces GetMonitoredSmartContractEventDetails MimeJSON


-- *** updateEventMonitoring

-- | @PATCH \/v2\/resourcemonitoring\/smartcontractevent\/{resourceMonitoringId}@
-- 
-- Update the monitoring status of a smart contract
-- 
-- Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
updateEventMonitoring
  :: (Consumes UpdateEventMonitoring MimeJSON, MimeRender MimeJSON StatusUpdateMonitoringRequestSchema)
  => StatusUpdateMonitoringRequestSchema -- ^ "statusUpdateMonitoringRequestSchema"
  -> Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest UpdateEventMonitoring MimeJSON SmartContractMonitoringSchema MimeJSON
updateEventMonitoring statusUpdateMonitoringRequestSchema (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "PATCH" ["/v2/resourcemonitoring/smartcontractevent/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` statusUpdateMonitoringRequestSchema
    `addHeader` toHeader ("Authorization", authorization)

data UpdateEventMonitoring 
instance HasBodyParam UpdateEventMonitoring StatusUpdateMonitoringRequestSchema 

-- | @application/json@
instance Consumes UpdateEventMonitoring MimeJSON

-- | @application/json@
instance Produces UpdateEventMonitoring MimeJSON


-- *** updateResourceMonitoringAddress

-- | @PATCH \/v2\/resourcemonitoring\/address\/{resourceMonitoringId}@
-- 
-- Update the monitoring status of an address
-- 
-- Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
updateResourceMonitoringAddress
  :: (Consumes UpdateResourceMonitoringAddress MimeJSON, MimeRender MimeJSON StatusUpdateMonitoringRequestSchema)
  => StatusUpdateMonitoringRequestSchema -- ^ "statusUpdateMonitoringRequestSchema"
  -> Authorization -- ^ "authorization"
  -> ResourceMonitoringId -- ^ "resourceMonitoringId"
  -> QuantOverledgerRequest UpdateResourceMonitoringAddress MimeJSON UpdateAddressMonitoringSchema MimeJSON
updateResourceMonitoringAddress statusUpdateMonitoringRequestSchema (Authorization authorization) (ResourceMonitoringId resourceMonitoringId) =
  _mkRequest "PATCH" ["/v2/resourcemonitoring/address/",toPath resourceMonitoringId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` statusUpdateMonitoringRequestSchema
    `addHeader` toHeader ("Authorization", authorization)

data UpdateResourceMonitoringAddress 
instance HasBodyParam UpdateResourceMonitoringAddress StatusUpdateMonitoringRequestSchema 

-- | @application/json@
instance Consumes UpdateResourceMonitoringAddress MimeJSON

-- | @application/json@
instance Produces UpdateResourceMonitoringAddress MimeJSON

