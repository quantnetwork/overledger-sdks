{-
   Quant Overledger API

   Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.SupportedNonFungibleTokens
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.SupportedNonFungibleTokens where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** SupportedNonFungibleTokens

-- *** getAllNonFungibleTokens

-- | @GET \/v2\/tokenise\/tokens\/nonfungible@
-- 
-- Retrieve a list of ERC721 and QRC721 tokens
-- 
-- Retrieves a list of non-fungible tokens supported by Overledger and which API's and functions you can use for each. You can retrieve all non-fungible token types for all locations without providing parameters. If you want to see what tokens are supported for a specific contract type you can pass in either ERC721 or QRC721 as a contract type parameter. You can then filter further by including the resource using technology and network parameters. You can also look for a specific token by passing in the tokenName as a parameter.
-- 
getAllNonFungibleTokens
  :: Authorization -- ^ "authorization"
  -> QuantOverledgerRequest GetAllNonFungibleTokens MimeNoContent NonFungibleTokenResponse MimeJSON
getAllNonFungibleTokens (Authorization authorization) =
  _mkRequest "GET" ["/v2/tokenise/tokens/nonfungible"]
    `addHeader` toHeader ("Authorization", authorization)

data GetAllNonFungibleTokens  
instance HasOptionalParam GetAllNonFungibleTokens ContractType where
  applyOptionalParam req (ContractType xs) =
    req `addQuery` toQuery ("contractType", Just xs)
instance HasOptionalParam GetAllNonFungibleTokens Technology where
  applyOptionalParam req (Technology xs) =
    req `addQuery` toQuery ("technology", Just xs)
instance HasOptionalParam GetAllNonFungibleTokens Network where
  applyOptionalParam req (Network xs) =
    req `addQuery` toQuery ("network", Just xs)
instance HasOptionalParam GetAllNonFungibleTokens TokenName where
  applyOptionalParam req (TokenName xs) =
    req `addQuery` toQuery ("tokenName", Just xs)
-- | @application/json@
instance Produces GetAllNonFungibleTokens MimeJSON

