{-
   Quant Overledger API

   Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.ManageQRC721TokenSupply
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.ManageQRC721TokenSupply where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ManageQRC721TokenSupply

-- *** prepareSupplyRequest

-- | @POST \/v2\/tokenise\/preparation\/transaction\/qrc721\/supply@
-- 
-- Prepare a transaction to manage QRC721 token supply
-- 
-- Transforms a transaction request to manage QRC721 token supply ready to be signed and returns a request ID for executing. The supported types for this API are “Mint Tokens”, which will allow you to issue an new NFT for your QRC721 token, and \"Burn Tokens\" which will allow you to destroy your QRC721 token. Successfully prepared transactions can then be executed using the /execution/transaction API
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareSupplyRequest
  :: (Consumes PrepareSupplyRequest MimeJSON, MimeRender MimeJSON PrepareMintTransactionRequestSchemaQrc721)
  => PrepareMintTransactionRequestSchemaQrc721 -- ^ "prepareMintTransactionRequestSchemaQrc721"
  -> Authorization -- ^ "authorization"
  -> QuantOverledgerRequest PrepareSupplyRequest MimeJSON PrepareTransactionResponse MimeJSON
prepareSupplyRequest prepareMintTransactionRequestSchemaQrc721 (Authorization authorization) =
  _mkRequest "POST" ["/v2/tokenise/preparation/transaction/qrc721/supply"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareMintTransactionRequestSchemaQrc721
    `addHeader` toHeader ("Authorization", authorization)

data PrepareSupplyRequest 
instance HasBodyParam PrepareSupplyRequest PrepareMintTransactionRequestSchemaQrc721 

-- | @application/json@
instance Consumes PrepareSupplyRequest MimeJSON

-- | @application/json@
instance Produces PrepareSupplyRequest MimeJSON

