{-
   Quant Overledger API

   Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.ManageSubscription
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.ManageSubscription where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ManageSubscription

-- *** deleteSubscription

-- | @DELETE \/v2\/webhook\/subscription\/{subscriptionId}@
-- 
-- Remove a subscription created by your application
-- 
-- Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
deleteSubscription
  :: Authorization -- ^ "authorization"
  -> SubscriptionId -- ^ "subscriptionId"
  -> QuantOverledgerRequest DeleteSubscription MimeNoContent SubscriptionDeletionResponse MimeJSON
deleteSubscription (Authorization authorization) (SubscriptionId subscriptionId) =
  _mkRequest "DELETE" ["/v2/webhook/subscription/",toPath subscriptionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data DeleteSubscription  
-- | @application/json@
instance Produces DeleteSubscription MimeJSON


-- *** listSubscriptions

-- | @GET \/v2\/webhook\/subscriptions@
-- 
-- Retrieve a list of subscriptions created by your application
-- 
-- Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
listSubscriptions
  :: Authorization -- ^ "authorization"
  -> QuantOverledgerRequest ListSubscriptions MimeNoContent [ListSubscriptionResponseSchema] MimeJSON
listSubscriptions (Authorization authorization) =
  _mkRequest "GET" ["/v2/webhook/subscriptions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `addHeader` toHeader ("Authorization", authorization)

data ListSubscriptions  
-- | @application/json@
instance Produces ListSubscriptions MimeJSON


-- *** updateSubscription

-- | @PATCH \/v2\/webhook\/subscription\/{subscriptionId}@
-- 
-- Update a specific subscription created by your application
-- 
-- Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
updateSubscription
  :: (Consumes UpdateSubscription MimeJSON, MimeRender MimeJSON UpdateSubscriptionRequestSchema)
  => UpdateSubscriptionRequestSchema -- ^ "updateSubscriptionRequestSchema"
  -> Authorization -- ^ "authorization"
  -> SubscriptionId -- ^ "subscriptionId"
  -> QuantOverledgerRequest UpdateSubscription MimeJSON SubscriptionUpdateResponse MimeJSON
updateSubscription updateSubscriptionRequestSchema (Authorization authorization) (SubscriptionId subscriptionId) =
  _mkRequest "PATCH" ["/v2/webhook/subscription/",toPath subscriptionId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` updateSubscriptionRequestSchema
    `addHeader` toHeader ("Authorization", authorization)

data UpdateSubscription 
instance HasBodyParam UpdateSubscription UpdateSubscriptionRequestSchema 

-- | @application/json@
instance Consumes UpdateSubscription MimeJSON

-- | @application/json@
instance Produces UpdateSubscription MimeJSON

