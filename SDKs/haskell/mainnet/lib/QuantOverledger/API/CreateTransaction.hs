{-
   Quant Overledger API

   Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

   OpenAPI Version: 3.0.1
   Quant Overledger API API version: 2.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : QuantOverledger.API.CreateTransaction
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module QuantOverledger.API.CreateTransaction where

import QuantOverledger.Core
import QuantOverledger.MimeTypes
import QuantOverledger.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** CreateTransaction

-- *** executePreparedRequestNativeTransaction

-- | @POST \/v2\/execution\/nativetransaction@
-- 
-- Execute a native transaction on the DLT
-- 
-- Takes a request ID and submits a signed native transaction to the requested DLT
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
executePreparedRequestNativeTransaction
  :: (Consumes ExecutePreparedRequestNativeTransaction MimeJSON, MimeRender MimeJSON ExecuteTransactionRequest)
  => ExecuteTransactionRequest -- ^ "executeTransactionRequest"
  -> Authorization -- ^ "authorization"
  -> QuantOverledgerRequest ExecutePreparedRequestNativeTransaction MimeJSON ExecuteTransactionResponse MimeJSON
executePreparedRequestNativeTransaction executeTransactionRequest (Authorization authorization) =
  _mkRequest "POST" ["/v2/execution/nativetransaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` executeTransactionRequest
    `addHeader` toHeader ("Authorization", authorization)

data ExecutePreparedRequestNativeTransaction 
instance HasBodyParam ExecutePreparedRequestNativeTransaction ExecuteTransactionRequest 

-- | @application/json@
instance Consumes ExecutePreparedRequestNativeTransaction MimeJSON

-- | @application/json@
instance Produces ExecutePreparedRequestNativeTransaction MimeJSON


-- *** executePreparedRequestTransaction

-- | @POST \/v2\/execution\/transaction@
-- 
-- Execute a transaction on the DLT
-- 
-- Takes a request ID and submits a signed transaction to the requested DLT.
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
executePreparedRequestTransaction
  :: (Consumes ExecutePreparedRequestTransaction MimeJSON, MimeRender MimeJSON ExecuteTransactionRequest)
  => ExecuteTransactionRequest -- ^ "executeTransactionRequest"
  -> Authorization -- ^ "authorization"
  -> QuantOverledgerRequest ExecutePreparedRequestTransaction MimeJSON ExecuteTransactionResponse MimeJSON
executePreparedRequestTransaction executeTransactionRequest (Authorization authorization) =
  _mkRequest "POST" ["/v2/execution/transaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` executeTransactionRequest
    `addHeader` toHeader ("Authorization", authorization)

data ExecutePreparedRequestTransaction 
instance HasBodyParam ExecutePreparedRequestTransaction ExecuteTransactionRequest 

-- | @application/json@
instance Consumes ExecutePreparedRequestTransaction MimeJSON

-- | @application/json@
instance Produces ExecutePreparedRequestTransaction MimeJSON


-- *** prepareNativeTransaction

-- | @POST \/v2\/preparation\/nativetransaction@
-- 
-- Prepare a DLT native transaction
-- 
-- Allows advanced developers to submit their own DLT native transactions via Overledger. Returns a request ID for executing a DLT native transaction on the requested DLT
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareNativeTransaction
  :: (Consumes PrepareNativeTransaction MimeJSON, MimeRender MimeJSON PrepareNativeTransactionRequestSchema)
  => PrepareNativeTransactionRequestSchema -- ^ "prepareNativeTransactionRequestSchema"
  -> Authorization -- ^ "authorization"
  -> QuantOverledgerRequest PrepareNativeTransaction MimeJSON PrepareSearchResponseSchema MimeJSON
prepareNativeTransaction prepareNativeTransactionRequestSchema (Authorization authorization) =
  _mkRequest "POST" ["/v2/preparation/nativetransaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` prepareNativeTransactionRequestSchema
    `addHeader` toHeader ("Authorization", authorization)

data PrepareNativeTransaction 
instance HasBodyParam PrepareNativeTransaction PrepareNativeTransactionRequestSchema 

-- | @application/json@
instance Consumes PrepareNativeTransaction MimeJSON

-- | @application/json@
instance Produces PrepareNativeTransaction MimeJSON


-- *** prepareTransactionRequest

-- | @POST \/v2\/preparation\/transaction@
-- 
-- Prepare a DLT transaction for signing
-- 
-- Transforms a transaction request into a payload ready for signing for the requested DLT and returns a request ID for executing. Supported transaction types in this release are \"Payment\" (to send payments) and \"Smart Contract Invoke\" (to invoke arbitrary smart contract functions).   Warning: Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail.
-- 
-- AuthMethod: 'AuthOAuthOAuth2SecurityScheme'
-- 
prepareTransactionRequest
  :: (Consumes PrepareTransactionRequest MimeJSON, MimeRender MimeJSON PreparePaymentTransactionRequestSchema)
  => PreparePaymentTransactionRequestSchema -- ^ "preparePaymentTransactionRequestSchema"
  -> Authorization -- ^ "authorization"
  -> QuantOverledgerRequest PrepareTransactionRequest MimeJSON PrepareTransactionResponse MimeJSON
prepareTransactionRequest preparePaymentTransactionRequestSchema (Authorization authorization) =
  _mkRequest "POST" ["/v2/preparation/transaction"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOAuth2SecurityScheme)
    `setBodyParam` preparePaymentTransactionRequestSchema
    `addHeader` toHeader ("Authorization", authorization)

data PrepareTransactionRequest 
instance HasBodyParam PrepareTransactionRequest PreparePaymentTransactionRequestSchema 

-- | @application/json@
instance Consumes PrepareTransactionRequest MimeJSON

-- | @application/json@
instance Produces PrepareTransactionRequest MimeJSON

