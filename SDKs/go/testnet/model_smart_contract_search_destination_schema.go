/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractSearchDestinationSchema struct for SmartContractSearchDestinationSchema
type SmartContractSearchDestinationSchema struct {
	SmartContract *SmartContractSearchSchema `json:"smartContract,omitempty"`
}

// NewSmartContractSearchDestinationSchema instantiates a new SmartContractSearchDestinationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractSearchDestinationSchema() *SmartContractSearchDestinationSchema {
	this := SmartContractSearchDestinationSchema{}
	return &this
}

// NewSmartContractSearchDestinationSchemaWithDefaults instantiates a new SmartContractSearchDestinationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractSearchDestinationSchemaWithDefaults() *SmartContractSearchDestinationSchema {
	this := SmartContractSearchDestinationSchema{}
	return &this
}

// GetSmartContract returns the SmartContract field value if set, zero value otherwise.
func (o *SmartContractSearchDestinationSchema) GetSmartContract() SmartContractSearchSchema {
	if o == nil || o.SmartContract == nil {
		var ret SmartContractSearchSchema
		return ret
	}
	return *o.SmartContract
}

// GetSmartContractOk returns a tuple with the SmartContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractSearchDestinationSchema) GetSmartContractOk() (*SmartContractSearchSchema, bool) {
	if o == nil || o.SmartContract == nil {
		return nil, false
	}
	return o.SmartContract, true
}

// HasSmartContract returns a boolean if a field has been set.
func (o *SmartContractSearchDestinationSchema) HasSmartContract() bool {
	if o != nil && o.SmartContract != nil {
		return true
	}

	return false
}

// SetSmartContract gets a reference to the given SmartContractSearchSchema and assigns it to the SmartContract field.
func (o *SmartContractSearchDestinationSchema) SetSmartContract(v SmartContractSearchSchema) {
	o.SmartContract = &v
}

func (o SmartContractSearchDestinationSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SmartContract != nil {
		toSerialize["smartContract"] = o.SmartContract
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractSearchDestinationSchema struct {
	value *SmartContractSearchDestinationSchema
	isSet bool
}

func (v NullableSmartContractSearchDestinationSchema) Get() *SmartContractSearchDestinationSchema {
	return v.value
}

func (v *NullableSmartContractSearchDestinationSchema) Set(val *SmartContractSearchDestinationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractSearchDestinationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractSearchDestinationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractSearchDestinationSchema(val *SmartContractSearchDestinationSchema) *NullableSmartContractSearchDestinationSchema {
	return &NullableSmartContractSearchDestinationSchema{value: val, isSet: true}
}

func (v NullableSmartContractSearchDestinationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractSearchDestinationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


