/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteSearchUTXOResponse struct for ExecuteSearchUTXOResponse
type ExecuteSearchUTXOResponse struct {
	UtxoId *string `json:"utxoId,omitempty"`
	Destination *[]Destination `json:"destination,omitempty"`
	Location *Location `json:"location,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Status *Status `json:"status,omitempty"`
	NativeData *map[string]interface{} `json:"nativeData,omitempty"`
}

// NewExecuteSearchUTXOResponse instantiates a new ExecuteSearchUTXOResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteSearchUTXOResponse() *ExecuteSearchUTXOResponse {
	this := ExecuteSearchUTXOResponse{}
	return &this
}

// NewExecuteSearchUTXOResponseWithDefaults instantiates a new ExecuteSearchUTXOResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteSearchUTXOResponseWithDefaults() *ExecuteSearchUTXOResponse {
	this := ExecuteSearchUTXOResponse{}
	return &this
}

// GetUtxoId returns the UtxoId field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetUtxoId() string {
	if o == nil || o.UtxoId == nil {
		var ret string
		return ret
	}
	return *o.UtxoId
}

// GetUtxoIdOk returns a tuple with the UtxoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetUtxoIdOk() (*string, bool) {
	if o == nil || o.UtxoId == nil {
		return nil, false
	}
	return o.UtxoId, true
}

// HasUtxoId returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasUtxoId() bool {
	if o != nil && o.UtxoId != nil {
		return true
	}

	return false
}

// SetUtxoId gets a reference to the given string and assigns it to the UtxoId field.
func (o *ExecuteSearchUTXOResponse) SetUtxoId(v string) {
	o.UtxoId = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetDestination() []Destination {
	if o == nil || o.Destination == nil {
		var ret []Destination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetDestinationOk() (*[]Destination, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []Destination and assigns it to the Destination field.
func (o *ExecuteSearchUTXOResponse) SetDestination(v []Destination) {
	o.Destination = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ExecuteSearchUTXOResponse) SetLocation(v Location) {
	o.Location = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *ExecuteSearchUTXOResponse) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *ExecuteSearchUTXOResponse) SetStatus(v Status) {
	o.Status = &v
}

// GetNativeData returns the NativeData field value if set, zero value otherwise.
func (o *ExecuteSearchUTXOResponse) GetNativeData() map[string]interface{} {
	if o == nil || o.NativeData == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NativeData
}

// GetNativeDataOk returns a tuple with the NativeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSearchUTXOResponse) GetNativeDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.NativeData == nil {
		return nil, false
	}
	return o.NativeData, true
}

// HasNativeData returns a boolean if a field has been set.
func (o *ExecuteSearchUTXOResponse) HasNativeData() bool {
	if o != nil && o.NativeData != nil {
		return true
	}

	return false
}

// SetNativeData gets a reference to the given map[string]interface{} and assigns it to the NativeData field.
func (o *ExecuteSearchUTXOResponse) SetNativeData(v map[string]interface{}) {
	o.NativeData = &v
}

func (o ExecuteSearchUTXOResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UtxoId != nil {
		toSerialize["utxoId"] = o.UtxoId
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.NativeData != nil {
		toSerialize["nativeData"] = o.NativeData
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteSearchUTXOResponse struct {
	value *ExecuteSearchUTXOResponse
	isSet bool
}

func (v NullableExecuteSearchUTXOResponse) Get() *ExecuteSearchUTXOResponse {
	return v.value
}

func (v *NullableExecuteSearchUTXOResponse) Set(val *ExecuteSearchUTXOResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteSearchUTXOResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteSearchUTXOResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteSearchUTXOResponse(val *ExecuteSearchUTXOResponse) *NullableExecuteSearchUTXOResponse {
	return &NullableExecuteSearchUTXOResponse{value: val, isSet: true}
}

func (v NullableExecuteSearchUTXOResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteSearchUTXOResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


