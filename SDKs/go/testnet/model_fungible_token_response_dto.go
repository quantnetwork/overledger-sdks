/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FungibleTokenResponseDTO struct for FungibleTokenResponseDTO
type FungibleTokenResponseDTO struct {
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	Unit *string `json:"unit,omitempty"`
	DecimalPlaces *int32 `json:"decimalPlaces,omitempty"`
	Functions *[]FunctionDTO `json:"functions,omitempty"`
	ContractType *string `json:"contractType,omitempty"`
	Location *LocationDTO `json:"location,omitempty"`
	SmartContractId *string `json:"smartContractId,omitempty"`
}

// NewFungibleTokenResponseDTO instantiates a new FungibleTokenResponseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFungibleTokenResponseDTO() *FungibleTokenResponseDTO {
	this := FungibleTokenResponseDTO{}
	return &this
}

// NewFungibleTokenResponseDTOWithDefaults instantiates a new FungibleTokenResponseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFungibleTokenResponseDTOWithDefaults() *FungibleTokenResponseDTO {
	this := FungibleTokenResponseDTO{}
	return &this
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || o.DocumentationUrl == nil {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl != nil {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *FungibleTokenResponseDTO) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *FungibleTokenResponseDTO) SetUnit(v string) {
	o.Unit = &v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetDecimalPlaces() int32 {
	if o == nil || o.DecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.DecimalPlaces == nil {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasDecimalPlaces() bool {
	if o != nil && o.DecimalPlaces != nil {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *FungibleTokenResponseDTO) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetFunctions() []FunctionDTO {
	if o == nil || o.Functions == nil {
		var ret []FunctionDTO
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetFunctionsOk() (*[]FunctionDTO, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []FunctionDTO and assigns it to the Functions field.
func (o *FungibleTokenResponseDTO) SetFunctions(v []FunctionDTO) {
	o.Functions = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetContractType() string {
	if o == nil || o.ContractType == nil {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetContractTypeOk() (*string, bool) {
	if o == nil || o.ContractType == nil {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasContractType() bool {
	if o != nil && o.ContractType != nil {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *FungibleTokenResponseDTO) SetContractType(v string) {
	o.ContractType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetLocation() LocationDTO {
	if o == nil || o.Location == nil {
		var ret LocationDTO
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetLocationOk() (*LocationDTO, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given LocationDTO and assigns it to the Location field.
func (o *FungibleTokenResponseDTO) SetLocation(v LocationDTO) {
	o.Location = &v
}

// GetSmartContractId returns the SmartContractId field value if set, zero value otherwise.
func (o *FungibleTokenResponseDTO) GetSmartContractId() string {
	if o == nil || o.SmartContractId == nil {
		var ret string
		return ret
	}
	return *o.SmartContractId
}

// GetSmartContractIdOk returns a tuple with the SmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FungibleTokenResponseDTO) GetSmartContractIdOk() (*string, bool) {
	if o == nil || o.SmartContractId == nil {
		return nil, false
	}
	return o.SmartContractId, true
}

// HasSmartContractId returns a boolean if a field has been set.
func (o *FungibleTokenResponseDTO) HasSmartContractId() bool {
	if o != nil && o.SmartContractId != nil {
		return true
	}

	return false
}

// SetSmartContractId gets a reference to the given string and assigns it to the SmartContractId field.
func (o *FungibleTokenResponseDTO) SetSmartContractId(v string) {
	o.SmartContractId = &v
}

func (o FungibleTokenResponseDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentationUrl != nil {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.DecimalPlaces != nil {
		toSerialize["decimalPlaces"] = o.DecimalPlaces
	}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.ContractType != nil {
		toSerialize["contractType"] = o.ContractType
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.SmartContractId != nil {
		toSerialize["smartContractId"] = o.SmartContractId
	}
	return json.Marshal(toSerialize)
}

type NullableFungibleTokenResponseDTO struct {
	value *FungibleTokenResponseDTO
	isSet bool
}

func (v NullableFungibleTokenResponseDTO) Get() *FungibleTokenResponseDTO {
	return v.value
}

func (v *NullableFungibleTokenResponseDTO) Set(val *FungibleTokenResponseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFungibleTokenResponseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFungibleTokenResponseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFungibleTokenResponseDTO(val *FungibleTokenResponseDTO) *NullableFungibleTokenResponseDTO {
	return &NullableFungibleTokenResponseDTO{value: val, isSet: true}
}

func (v NullableFungibleTokenResponseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFungibleTokenResponseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


