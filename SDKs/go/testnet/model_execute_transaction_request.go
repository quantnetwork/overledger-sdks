/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteTransactionRequest struct for ExecuteTransactionRequest
type ExecuteTransactionRequest struct {
	// The ID assigned to a preparation request in Overledger
	RequestId string `json:"requestId"`
	// The raw data after transaction signing
	Signed string `json:"signed"`
}

// NewExecuteTransactionRequest instantiates a new ExecuteTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteTransactionRequest(requestId string, signed string) *ExecuteTransactionRequest {
	this := ExecuteTransactionRequest{}
	this.RequestId = requestId
	this.Signed = signed
	return &this
}

// NewExecuteTransactionRequestWithDefaults instantiates a new ExecuteTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteTransactionRequestWithDefaults() *ExecuteTransactionRequest {
	this := ExecuteTransactionRequest{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *ExecuteTransactionRequest) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionRequest) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *ExecuteTransactionRequest) SetRequestId(v string) {
	o.RequestId = v
}

// GetSigned returns the Signed field value
func (o *ExecuteTransactionRequest) GetSigned() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signed
}

// GetSignedOk returns a tuple with the Signed field value
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionRequest) GetSignedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Signed, true
}

// SetSigned sets field value
func (o *ExecuteTransactionRequest) SetSigned(v string) {
	o.Signed = v
}

func (o ExecuteTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if true {
		toSerialize["signed"] = o.Signed
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteTransactionRequest struct {
	value *ExecuteTransactionRequest
	isSet bool
}

func (v NullableExecuteTransactionRequest) Get() *ExecuteTransactionRequest {
	return v.value
}

func (v *NullableExecuteTransactionRequest) Set(val *ExecuteTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteTransactionRequest(val *ExecuteTransactionRequest) *NullableExecuteTransactionRequest {
	return &NullableExecuteTransactionRequest{value: val, isSet: true}
}

func (v NullableExecuteTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


