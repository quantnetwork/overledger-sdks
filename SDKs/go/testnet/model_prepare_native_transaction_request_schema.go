/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrepareNativeTransactionRequestSchema struct for PrepareNativeTransactionRequestSchema
type PrepareNativeTransactionRequestSchema struct {
	Location *Location `json:"location,omitempty"`
	// The type of the object
	Type *string `json:"type,omitempty"`
}

// NewPrepareNativeTransactionRequestSchema instantiates a new PrepareNativeTransactionRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareNativeTransactionRequestSchema() *PrepareNativeTransactionRequestSchema {
	this := PrepareNativeTransactionRequestSchema{}
	return &this
}

// NewPrepareNativeTransactionRequestSchemaWithDefaults instantiates a new PrepareNativeTransactionRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareNativeTransactionRequestSchemaWithDefaults() *PrepareNativeTransactionRequestSchema {
	this := PrepareNativeTransactionRequestSchema{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PrepareNativeTransactionRequestSchema) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareNativeTransactionRequestSchema) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PrepareNativeTransactionRequestSchema) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *PrepareNativeTransactionRequestSchema) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PrepareNativeTransactionRequestSchema) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareNativeTransactionRequestSchema) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PrepareNativeTransactionRequestSchema) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PrepareNativeTransactionRequestSchema) SetType(v string) {
	o.Type = &v
}

func (o PrepareNativeTransactionRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareNativeTransactionRequestSchema struct {
	value *PrepareNativeTransactionRequestSchema
	isSet bool
}

func (v NullablePrepareNativeTransactionRequestSchema) Get() *PrepareNativeTransactionRequestSchema {
	return v.value
}

func (v *NullablePrepareNativeTransactionRequestSchema) Set(val *PrepareNativeTransactionRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareNativeTransactionRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareNativeTransactionRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareNativeTransactionRequestSchema(val *PrepareNativeTransactionRequestSchema) *NullablePrepareNativeTransactionRequestSchema {
	return &NullablePrepareNativeTransactionRequestSchema{value: val, isSet: true}
}

func (v NullablePrepareNativeTransactionRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareNativeTransactionRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


