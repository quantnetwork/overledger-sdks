/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractMonitoringDetailsSchema struct for SmartContractMonitoringDetailsSchema
type SmartContractMonitoringDetailsSchema struct {
	SmartContractEventDetails *ResourceMonitoringSmartContractEventDetails `json:"smartContractEventDetails,omitempty"`
	Location *Location `json:"location,omitempty"`
	SmartContractEventHistory *[]SmartContractEventHistory `json:"smartContractEventHistory,omitempty"`
	Type *string `json:"type,omitempty"`
	Status *Status `json:"status,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewSmartContractMonitoringDetailsSchema instantiates a new SmartContractMonitoringDetailsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractMonitoringDetailsSchema() *SmartContractMonitoringDetailsSchema {
	this := SmartContractMonitoringDetailsSchema{}
	return &this
}

// NewSmartContractMonitoringDetailsSchemaWithDefaults instantiates a new SmartContractMonitoringDetailsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractMonitoringDetailsSchemaWithDefaults() *SmartContractMonitoringDetailsSchema {
	this := SmartContractMonitoringDetailsSchema{}
	return &this
}

// GetSmartContractEventDetails returns the SmartContractEventDetails field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetSmartContractEventDetails() ResourceMonitoringSmartContractEventDetails {
	if o == nil || o.SmartContractEventDetails == nil {
		var ret ResourceMonitoringSmartContractEventDetails
		return ret
	}
	return *o.SmartContractEventDetails
}

// GetSmartContractEventDetailsOk returns a tuple with the SmartContractEventDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetSmartContractEventDetailsOk() (*ResourceMonitoringSmartContractEventDetails, bool) {
	if o == nil || o.SmartContractEventDetails == nil {
		return nil, false
	}
	return o.SmartContractEventDetails, true
}

// HasSmartContractEventDetails returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasSmartContractEventDetails() bool {
	if o != nil && o.SmartContractEventDetails != nil {
		return true
	}

	return false
}

// SetSmartContractEventDetails gets a reference to the given ResourceMonitoringSmartContractEventDetails and assigns it to the SmartContractEventDetails field.
func (o *SmartContractMonitoringDetailsSchema) SetSmartContractEventDetails(v ResourceMonitoringSmartContractEventDetails) {
	o.SmartContractEventDetails = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *SmartContractMonitoringDetailsSchema) SetLocation(v Location) {
	o.Location = &v
}

// GetSmartContractEventHistory returns the SmartContractEventHistory field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetSmartContractEventHistory() []SmartContractEventHistory {
	if o == nil || o.SmartContractEventHistory == nil {
		var ret []SmartContractEventHistory
		return ret
	}
	return *o.SmartContractEventHistory
}

// GetSmartContractEventHistoryOk returns a tuple with the SmartContractEventHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetSmartContractEventHistoryOk() (*[]SmartContractEventHistory, bool) {
	if o == nil || o.SmartContractEventHistory == nil {
		return nil, false
	}
	return o.SmartContractEventHistory, true
}

// HasSmartContractEventHistory returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasSmartContractEventHistory() bool {
	if o != nil && o.SmartContractEventHistory != nil {
		return true
	}

	return false
}

// SetSmartContractEventHistory gets a reference to the given []SmartContractEventHistory and assigns it to the SmartContractEventHistory field.
func (o *SmartContractMonitoringDetailsSchema) SetSmartContractEventHistory(v []SmartContractEventHistory) {
	o.SmartContractEventHistory = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SmartContractMonitoringDetailsSchema) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *SmartContractMonitoringDetailsSchema) SetStatus(v Status) {
	o.Status = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SmartContractMonitoringDetailsSchema) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringDetailsSchema) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SmartContractMonitoringDetailsSchema) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *SmartContractMonitoringDetailsSchema) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o SmartContractMonitoringDetailsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SmartContractEventDetails != nil {
		toSerialize["smartContractEventDetails"] = o.SmartContractEventDetails
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.SmartContractEventHistory != nil {
		toSerialize["smartContractEventHistory"] = o.SmartContractEventHistory
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractMonitoringDetailsSchema struct {
	value *SmartContractMonitoringDetailsSchema
	isSet bool
}

func (v NullableSmartContractMonitoringDetailsSchema) Get() *SmartContractMonitoringDetailsSchema {
	return v.value
}

func (v *NullableSmartContractMonitoringDetailsSchema) Set(val *SmartContractMonitoringDetailsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractMonitoringDetailsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractMonitoringDetailsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractMonitoringDetailsSchema(val *SmartContractMonitoringDetailsSchema) *NullableSmartContractMonitoringDetailsSchema {
	return &NullableSmartContractMonitoringDetailsSchema{value: val, isSet: true}
}

func (v NullableSmartContractMonitoringDetailsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractMonitoringDetailsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


