/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceMonitoringSmartContractEventDetails struct for ResourceMonitoringSmartContractEventDetails
type ResourceMonitoringSmartContractEventDetails struct {
	EventName *string `json:"eventName,omitempty"`
	EventParameters *string `json:"eventParameters,omitempty"`
	SmartContractId *string `json:"smartContractId,omitempty"`
}

// NewResourceMonitoringSmartContractEventDetails instantiates a new ResourceMonitoringSmartContractEventDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMonitoringSmartContractEventDetails() *ResourceMonitoringSmartContractEventDetails {
	this := ResourceMonitoringSmartContractEventDetails{}
	return &this
}

// NewResourceMonitoringSmartContractEventDetailsWithDefaults instantiates a new ResourceMonitoringSmartContractEventDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMonitoringSmartContractEventDetailsWithDefaults() *ResourceMonitoringSmartContractEventDetails {
	this := ResourceMonitoringSmartContractEventDetails{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *ResourceMonitoringSmartContractEventDetails) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringSmartContractEventDetails) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *ResourceMonitoringSmartContractEventDetails) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *ResourceMonitoringSmartContractEventDetails) SetEventName(v string) {
	o.EventName = &v
}

// GetEventParameters returns the EventParameters field value if set, zero value otherwise.
func (o *ResourceMonitoringSmartContractEventDetails) GetEventParameters() string {
	if o == nil || o.EventParameters == nil {
		var ret string
		return ret
	}
	return *o.EventParameters
}

// GetEventParametersOk returns a tuple with the EventParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringSmartContractEventDetails) GetEventParametersOk() (*string, bool) {
	if o == nil || o.EventParameters == nil {
		return nil, false
	}
	return o.EventParameters, true
}

// HasEventParameters returns a boolean if a field has been set.
func (o *ResourceMonitoringSmartContractEventDetails) HasEventParameters() bool {
	if o != nil && o.EventParameters != nil {
		return true
	}

	return false
}

// SetEventParameters gets a reference to the given string and assigns it to the EventParameters field.
func (o *ResourceMonitoringSmartContractEventDetails) SetEventParameters(v string) {
	o.EventParameters = &v
}

// GetSmartContractId returns the SmartContractId field value if set, zero value otherwise.
func (o *ResourceMonitoringSmartContractEventDetails) GetSmartContractId() string {
	if o == nil || o.SmartContractId == nil {
		var ret string
		return ret
	}
	return *o.SmartContractId
}

// GetSmartContractIdOk returns a tuple with the SmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringSmartContractEventDetails) GetSmartContractIdOk() (*string, bool) {
	if o == nil || o.SmartContractId == nil {
		return nil, false
	}
	return o.SmartContractId, true
}

// HasSmartContractId returns a boolean if a field has been set.
func (o *ResourceMonitoringSmartContractEventDetails) HasSmartContractId() bool {
	if o != nil && o.SmartContractId != nil {
		return true
	}

	return false
}

// SetSmartContractId gets a reference to the given string and assigns it to the SmartContractId field.
func (o *ResourceMonitoringSmartContractEventDetails) SetSmartContractId(v string) {
	o.SmartContractId = &v
}

func (o ResourceMonitoringSmartContractEventDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	if o.EventParameters != nil {
		toSerialize["eventParameters"] = o.EventParameters
	}
	if o.SmartContractId != nil {
		toSerialize["smartContractId"] = o.SmartContractId
	}
	return json.Marshal(toSerialize)
}

type NullableResourceMonitoringSmartContractEventDetails struct {
	value *ResourceMonitoringSmartContractEventDetails
	isSet bool
}

func (v NullableResourceMonitoringSmartContractEventDetails) Get() *ResourceMonitoringSmartContractEventDetails {
	return v.value
}

func (v *NullableResourceMonitoringSmartContractEventDetails) Set(val *ResourceMonitoringSmartContractEventDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMonitoringSmartContractEventDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMonitoringSmartContractEventDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMonitoringSmartContractEventDetails(val *ResourceMonitoringSmartContractEventDetails) *NullableResourceMonitoringSmartContractEventDetails {
	return &NullableResourceMonitoringSmartContractEventDetails{value: val, isSet: true}
}

func (v NullableResourceMonitoringSmartContractEventDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMonitoringSmartContractEventDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


