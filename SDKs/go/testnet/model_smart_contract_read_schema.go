/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractReadSchema Computer program storage in a DLT system where the outcome is recorded on the distributed ledger
type SmartContractReadSchema struct {
	Function *SmartContractReadFunctionSchema `json:"function,omitempty"`
	SmartContractId *string `json:"smartContractId,omitempty"`
}

// NewSmartContractReadSchema instantiates a new SmartContractReadSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractReadSchema() *SmartContractReadSchema {
	this := SmartContractReadSchema{}
	return &this
}

// NewSmartContractReadSchemaWithDefaults instantiates a new SmartContractReadSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractReadSchemaWithDefaults() *SmartContractReadSchema {
	this := SmartContractReadSchema{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *SmartContractReadSchema) GetFunction() SmartContractReadFunctionSchema {
	if o == nil || o.Function == nil {
		var ret SmartContractReadFunctionSchema
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractReadSchema) GetFunctionOk() (*SmartContractReadFunctionSchema, bool) {
	if o == nil || o.Function == nil {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *SmartContractReadSchema) HasFunction() bool {
	if o != nil && o.Function != nil {
		return true
	}

	return false
}

// SetFunction gets a reference to the given SmartContractReadFunctionSchema and assigns it to the Function field.
func (o *SmartContractReadSchema) SetFunction(v SmartContractReadFunctionSchema) {
	o.Function = &v
}

// GetSmartContractId returns the SmartContractId field value if set, zero value otherwise.
func (o *SmartContractReadSchema) GetSmartContractId() string {
	if o == nil || o.SmartContractId == nil {
		var ret string
		return ret
	}
	return *o.SmartContractId
}

// GetSmartContractIdOk returns a tuple with the SmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractReadSchema) GetSmartContractIdOk() (*string, bool) {
	if o == nil || o.SmartContractId == nil {
		return nil, false
	}
	return o.SmartContractId, true
}

// HasSmartContractId returns a boolean if a field has been set.
func (o *SmartContractReadSchema) HasSmartContractId() bool {
	if o != nil && o.SmartContractId != nil {
		return true
	}

	return false
}

// SetSmartContractId gets a reference to the given string and assigns it to the SmartContractId field.
func (o *SmartContractReadSchema) SetSmartContractId(v string) {
	o.SmartContractId = &v
}

func (o SmartContractReadSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Function != nil {
		toSerialize["function"] = o.Function
	}
	if o.SmartContractId != nil {
		toSerialize["smartContractId"] = o.SmartContractId
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractReadSchema struct {
	value *SmartContractReadSchema
	isSet bool
}

func (v NullableSmartContractReadSchema) Get() *SmartContractReadSchema {
	return v.value
}

func (v *NullableSmartContractReadSchema) Set(val *SmartContractReadSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractReadSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractReadSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractReadSchema(val *SmartContractReadSchema) *NullableSmartContractReadSchema {
	return &NullableSmartContractReadSchema{value: val, isSet: true}
}

func (v NullableSmartContractReadSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractReadSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


