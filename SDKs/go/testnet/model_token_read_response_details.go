/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenReadResponseDetails struct for TokenReadResponseDetails
type TokenReadResponseDetails struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Value *map[string]interface{} `json:"value,omitempty"`
}

// NewTokenReadResponseDetails instantiates a new TokenReadResponseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenReadResponseDetails() *TokenReadResponseDetails {
	this := TokenReadResponseDetails{}
	return &this
}

// NewTokenReadResponseDetailsWithDefaults instantiates a new TokenReadResponseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenReadResponseDetailsWithDefaults() *TokenReadResponseDetails {
	this := TokenReadResponseDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenReadResponseDetails) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenReadResponseDetails) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenReadResponseDetails) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenReadResponseDetails) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TokenReadResponseDetails) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenReadResponseDetails) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TokenReadResponseDetails) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TokenReadResponseDetails) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TokenReadResponseDetails) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenReadResponseDetails) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TokenReadResponseDetails) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *TokenReadResponseDetails) SetValue(v map[string]interface{}) {
	o.Value = &v
}

func (o TokenReadResponseDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTokenReadResponseDetails struct {
	value *TokenReadResponseDetails
	isSet bool
}

func (v NullableTokenReadResponseDetails) Get() *TokenReadResponseDetails {
	return v.value
}

func (v *NullableTokenReadResponseDetails) Set(val *TokenReadResponseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenReadResponseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenReadResponseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenReadResponseDetails(val *TokenReadResponseDetails) *NullableTokenReadResponseDetails {
	return &NullableTokenReadResponseDetails{value: val, isSet: true}
}

func (v NullableTokenReadResponseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenReadResponseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


