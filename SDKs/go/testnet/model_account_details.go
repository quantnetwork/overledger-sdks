/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountDetails Account Details of the tokens
type AccountDetails struct {
	ParentAccountId *string `json:"parentAccountId,omitempty"`
	AccountId *string `json:"accountId,omitempty"`
	Unit *string `json:"unit,omitempty"`
	OwningInstitutionId *string `json:"owningInstitutionId,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
}

// NewAccountDetails instantiates a new AccountDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountDetails() *AccountDetails {
	this := AccountDetails{}
	return &this
}

// NewAccountDetailsWithDefaults instantiates a new AccountDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountDetailsWithDefaults() *AccountDetails {
	this := AccountDetails{}
	return &this
}

// GetParentAccountId returns the ParentAccountId field value if set, zero value otherwise.
func (o *AccountDetails) GetParentAccountId() string {
	if o == nil || o.ParentAccountId == nil {
		var ret string
		return ret
	}
	return *o.ParentAccountId
}

// GetParentAccountIdOk returns a tuple with the ParentAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDetails) GetParentAccountIdOk() (*string, bool) {
	if o == nil || o.ParentAccountId == nil {
		return nil, false
	}
	return o.ParentAccountId, true
}

// HasParentAccountId returns a boolean if a field has been set.
func (o *AccountDetails) HasParentAccountId() bool {
	if o != nil && o.ParentAccountId != nil {
		return true
	}

	return false
}

// SetParentAccountId gets a reference to the given string and assigns it to the ParentAccountId field.
func (o *AccountDetails) SetParentAccountId(v string) {
	o.ParentAccountId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AccountDetails) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDetails) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AccountDetails) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *AccountDetails) SetAccountId(v string) {
	o.AccountId = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AccountDetails) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDetails) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *AccountDetails) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AccountDetails) SetUnit(v string) {
	o.Unit = &v
}

// GetOwningInstitutionId returns the OwningInstitutionId field value if set, zero value otherwise.
func (o *AccountDetails) GetOwningInstitutionId() string {
	if o == nil || o.OwningInstitutionId == nil {
		var ret string
		return ret
	}
	return *o.OwningInstitutionId
}

// GetOwningInstitutionIdOk returns a tuple with the OwningInstitutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDetails) GetOwningInstitutionIdOk() (*string, bool) {
	if o == nil || o.OwningInstitutionId == nil {
		return nil, false
	}
	return o.OwningInstitutionId, true
}

// HasOwningInstitutionId returns a boolean if a field has been set.
func (o *AccountDetails) HasOwningInstitutionId() bool {
	if o != nil && o.OwningInstitutionId != nil {
		return true
	}

	return false
}

// SetOwningInstitutionId gets a reference to the given string and assigns it to the OwningInstitutionId field.
func (o *AccountDetails) SetOwningInstitutionId(v string) {
	o.OwningInstitutionId = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *AccountDetails) GetAccountType() string {
	if o == nil || o.AccountType == nil {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDetails) GetAccountTypeOk() (*string, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *AccountDetails) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *AccountDetails) SetAccountType(v string) {
	o.AccountType = &v
}

func (o AccountDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ParentAccountId != nil {
		toSerialize["parentAccountId"] = o.ParentAccountId
	}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.OwningInstitutionId != nil {
		toSerialize["owningInstitutionId"] = o.OwningInstitutionId
	}
	if o.AccountType != nil {
		toSerialize["accountType"] = o.AccountType
	}
	return json.Marshal(toSerialize)
}

type NullableAccountDetails struct {
	value *AccountDetails
	isSet bool
}

func (v NullableAccountDetails) Get() *AccountDetails {
	return v.value
}

func (v *NullableAccountDetails) Set(val *AccountDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDetails(val *AccountDetails) *NullableAccountDetails {
	return &NullableAccountDetails{value: val, isSet: true}
}

func (v NullableAccountDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


