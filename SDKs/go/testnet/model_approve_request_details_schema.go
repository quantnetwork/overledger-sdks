/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApproveRequestDetailsSchema struct for ApproveRequestDetailsSchema
type ApproveRequestDetailsSchema struct {
	// Who are the payers of this transaction
	Payer *[]PayerCreditSchema `json:"payer,omitempty"`
	// Who are the payees of this transaction
	Mandate *[]PayeeCreditSchema `json:"mandate,omitempty"`
	OverledgerSigningType *string `json:"overledgerSigningType,omitempty"`
}

// NewApproveRequestDetailsSchema instantiates a new ApproveRequestDetailsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproveRequestDetailsSchema() *ApproveRequestDetailsSchema {
	this := ApproveRequestDetailsSchema{}
	return &this
}

// NewApproveRequestDetailsSchemaWithDefaults instantiates a new ApproveRequestDetailsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproveRequestDetailsSchemaWithDefaults() *ApproveRequestDetailsSchema {
	this := ApproveRequestDetailsSchema{}
	return &this
}

// GetPayer returns the Payer field value if set, zero value otherwise.
func (o *ApproveRequestDetailsSchema) GetPayer() []PayerCreditSchema {
	if o == nil || o.Payer == nil {
		var ret []PayerCreditSchema
		return ret
	}
	return *o.Payer
}

// GetPayerOk returns a tuple with the Payer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproveRequestDetailsSchema) GetPayerOk() (*[]PayerCreditSchema, bool) {
	if o == nil || o.Payer == nil {
		return nil, false
	}
	return o.Payer, true
}

// HasPayer returns a boolean if a field has been set.
func (o *ApproveRequestDetailsSchema) HasPayer() bool {
	if o != nil && o.Payer != nil {
		return true
	}

	return false
}

// SetPayer gets a reference to the given []PayerCreditSchema and assigns it to the Payer field.
func (o *ApproveRequestDetailsSchema) SetPayer(v []PayerCreditSchema) {
	o.Payer = &v
}

// GetMandate returns the Mandate field value if set, zero value otherwise.
func (o *ApproveRequestDetailsSchema) GetMandate() []PayeeCreditSchema {
	if o == nil || o.Mandate == nil {
		var ret []PayeeCreditSchema
		return ret
	}
	return *o.Mandate
}

// GetMandateOk returns a tuple with the Mandate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproveRequestDetailsSchema) GetMandateOk() (*[]PayeeCreditSchema, bool) {
	if o == nil || o.Mandate == nil {
		return nil, false
	}
	return o.Mandate, true
}

// HasMandate returns a boolean if a field has been set.
func (o *ApproveRequestDetailsSchema) HasMandate() bool {
	if o != nil && o.Mandate != nil {
		return true
	}

	return false
}

// SetMandate gets a reference to the given []PayeeCreditSchema and assigns it to the Mandate field.
func (o *ApproveRequestDetailsSchema) SetMandate(v []PayeeCreditSchema) {
	o.Mandate = &v
}

// GetOverledgerSigningType returns the OverledgerSigningType field value if set, zero value otherwise.
func (o *ApproveRequestDetailsSchema) GetOverledgerSigningType() string {
	if o == nil || o.OverledgerSigningType == nil {
		var ret string
		return ret
	}
	return *o.OverledgerSigningType
}

// GetOverledgerSigningTypeOk returns a tuple with the OverledgerSigningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproveRequestDetailsSchema) GetOverledgerSigningTypeOk() (*string, bool) {
	if o == nil || o.OverledgerSigningType == nil {
		return nil, false
	}
	return o.OverledgerSigningType, true
}

// HasOverledgerSigningType returns a boolean if a field has been set.
func (o *ApproveRequestDetailsSchema) HasOverledgerSigningType() bool {
	if o != nil && o.OverledgerSigningType != nil {
		return true
	}

	return false
}

// SetOverledgerSigningType gets a reference to the given string and assigns it to the OverledgerSigningType field.
func (o *ApproveRequestDetailsSchema) SetOverledgerSigningType(v string) {
	o.OverledgerSigningType = &v
}

func (o ApproveRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Payer != nil {
		toSerialize["payer"] = o.Payer
	}
	if o.Mandate != nil {
		toSerialize["mandate"] = o.Mandate
	}
	if o.OverledgerSigningType != nil {
		toSerialize["overledgerSigningType"] = o.OverledgerSigningType
	}
	return json.Marshal(toSerialize)
}

type NullableApproveRequestDetailsSchema struct {
	value *ApproveRequestDetailsSchema
	isSet bool
}

func (v NullableApproveRequestDetailsSchema) Get() *ApproveRequestDetailsSchema {
	return v.value
}

func (v *NullableApproveRequestDetailsSchema) Set(val *ApproveRequestDetailsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApproveRequestDetailsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApproveRequestDetailsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproveRequestDetailsSchema(val *ApproveRequestDetailsSchema) *NullableApproveRequestDetailsSchema {
	return &NullableApproveRequestDetailsSchema{value: val, isSet: true}
}

func (v NullableApproveRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproveRequestDetailsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


