/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TierFunctionDTO struct for TierFunctionDTO
type TierFunctionDTO struct {
	FunctionName *string `json:"functionName,omitempty"`
	Api *string `json:"api,omitempty"`
}

// NewTierFunctionDTO instantiates a new TierFunctionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierFunctionDTO() *TierFunctionDTO {
	this := TierFunctionDTO{}
	return &this
}

// NewTierFunctionDTOWithDefaults instantiates a new TierFunctionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierFunctionDTOWithDefaults() *TierFunctionDTO {
	this := TierFunctionDTO{}
	return &this
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *TierFunctionDTO) GetFunctionName() string {
	if o == nil || o.FunctionName == nil {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierFunctionDTO) GetFunctionNameOk() (*string, bool) {
	if o == nil || o.FunctionName == nil {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *TierFunctionDTO) HasFunctionName() bool {
	if o != nil && o.FunctionName != nil {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *TierFunctionDTO) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *TierFunctionDTO) GetApi() string {
	if o == nil || o.Api == nil {
		var ret string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierFunctionDTO) GetApiOk() (*string, bool) {
	if o == nil || o.Api == nil {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *TierFunctionDTO) HasApi() bool {
	if o != nil && o.Api != nil {
		return true
	}

	return false
}

// SetApi gets a reference to the given string and assigns it to the Api field.
func (o *TierFunctionDTO) SetApi(v string) {
	o.Api = &v
}

func (o TierFunctionDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FunctionName != nil {
		toSerialize["functionName"] = o.FunctionName
	}
	if o.Api != nil {
		toSerialize["api"] = o.Api
	}
	return json.Marshal(toSerialize)
}

type NullableTierFunctionDTO struct {
	value *TierFunctionDTO
	isSet bool
}

func (v NullableTierFunctionDTO) Get() *TierFunctionDTO {
	return v.value
}

func (v *NullableTierFunctionDTO) Set(val *TierFunctionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTierFunctionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTierFunctionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierFunctionDTO(val *TierFunctionDTO) *NullableTierFunctionDTO {
	return &NullableTierFunctionDTO{value: val, isSet: true}
}

func (v NullableTierFunctionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierFunctionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


