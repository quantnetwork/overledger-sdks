/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DestinationPaymentSchema List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
type DestinationPaymentSchema struct {
	// Unique identifier of the destination/recipient
	DestinationId string `json:"destinationId"`
	Payment PaymentSchema `json:"payment"`
}

// NewDestinationPaymentSchema instantiates a new DestinationPaymentSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationPaymentSchema(destinationId string, payment PaymentSchema) *DestinationPaymentSchema {
	this := DestinationPaymentSchema{}
	this.DestinationId = destinationId
	this.Payment = payment
	return &this
}

// NewDestinationPaymentSchemaWithDefaults instantiates a new DestinationPaymentSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationPaymentSchemaWithDefaults() *DestinationPaymentSchema {
	this := DestinationPaymentSchema{}
	return &this
}

// GetDestinationId returns the DestinationId field value
func (o *DestinationPaymentSchema) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *DestinationPaymentSchema) GetDestinationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *DestinationPaymentSchema) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetPayment returns the Payment field value
func (o *DestinationPaymentSchema) GetPayment() PaymentSchema {
	if o == nil {
		var ret PaymentSchema
		return ret
	}

	return o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value
// and a boolean to check if the value has been set.
func (o *DestinationPaymentSchema) GetPaymentOk() (*PaymentSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Payment, true
}

// SetPayment sets field value
func (o *DestinationPaymentSchema) SetPayment(v PaymentSchema) {
	o.Payment = v
}

func (o DestinationPaymentSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationId"] = o.DestinationId
	}
	if true {
		toSerialize["payment"] = o.Payment
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationPaymentSchema struct {
	value *DestinationPaymentSchema
	isSet bool
}

func (v NullableDestinationPaymentSchema) Get() *DestinationPaymentSchema {
	return v.value
}

func (v *NullableDestinationPaymentSchema) Set(val *DestinationPaymentSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationPaymentSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationPaymentSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationPaymentSchema(val *DestinationPaymentSchema) *NullableDestinationPaymentSchema {
	return &NullableDestinationPaymentSchema{value: val, isSet: true}
}

func (v NullableDestinationPaymentSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationPaymentSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


