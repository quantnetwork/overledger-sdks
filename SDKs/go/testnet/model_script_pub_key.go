/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScriptPubKey struct for ScriptPubKey
type ScriptPubKey struct {
	Addresses *[]string `json:"addresses,omitempty"`
	Asm *string `json:"asm,omitempty"`
	Hex *string `json:"hex,omitempty"`
	Type *string `json:"type,omitempty"`
	ReqSigs *string `json:"reqSigs,omitempty"`
}

// NewScriptPubKey instantiates a new ScriptPubKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptPubKey() *ScriptPubKey {
	this := ScriptPubKey{}
	return &this
}

// NewScriptPubKeyWithDefaults instantiates a new ScriptPubKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptPubKeyWithDefaults() *ScriptPubKey {
	this := ScriptPubKey{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ScriptPubKey) GetAddresses() []string {
	if o == nil || o.Addresses == nil {
		var ret []string
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptPubKey) GetAddressesOk() (*[]string, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ScriptPubKey) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *ScriptPubKey) SetAddresses(v []string) {
	o.Addresses = &v
}

// GetAsm returns the Asm field value if set, zero value otherwise.
func (o *ScriptPubKey) GetAsm() string {
	if o == nil || o.Asm == nil {
		var ret string
		return ret
	}
	return *o.Asm
}

// GetAsmOk returns a tuple with the Asm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptPubKey) GetAsmOk() (*string, bool) {
	if o == nil || o.Asm == nil {
		return nil, false
	}
	return o.Asm, true
}

// HasAsm returns a boolean if a field has been set.
func (o *ScriptPubKey) HasAsm() bool {
	if o != nil && o.Asm != nil {
		return true
	}

	return false
}

// SetAsm gets a reference to the given string and assigns it to the Asm field.
func (o *ScriptPubKey) SetAsm(v string) {
	o.Asm = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *ScriptPubKey) GetHex() string {
	if o == nil || o.Hex == nil {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptPubKey) GetHexOk() (*string, bool) {
	if o == nil || o.Hex == nil {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *ScriptPubKey) HasHex() bool {
	if o != nil && o.Hex != nil {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *ScriptPubKey) SetHex(v string) {
	o.Hex = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScriptPubKey) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptPubKey) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScriptPubKey) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScriptPubKey) SetType(v string) {
	o.Type = &v
}

// GetReqSigs returns the ReqSigs field value if set, zero value otherwise.
func (o *ScriptPubKey) GetReqSigs() string {
	if o == nil || o.ReqSigs == nil {
		var ret string
		return ret
	}
	return *o.ReqSigs
}

// GetReqSigsOk returns a tuple with the ReqSigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptPubKey) GetReqSigsOk() (*string, bool) {
	if o == nil || o.ReqSigs == nil {
		return nil, false
	}
	return o.ReqSigs, true
}

// HasReqSigs returns a boolean if a field has been set.
func (o *ScriptPubKey) HasReqSigs() bool {
	if o != nil && o.ReqSigs != nil {
		return true
	}

	return false
}

// SetReqSigs gets a reference to the given string and assigns it to the ReqSigs field.
func (o *ScriptPubKey) SetReqSigs(v string) {
	o.ReqSigs = &v
}

func (o ScriptPubKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.Asm != nil {
		toSerialize["asm"] = o.Asm
	}
	if o.Hex != nil {
		toSerialize["hex"] = o.Hex
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ReqSigs != nil {
		toSerialize["reqSigs"] = o.ReqSigs
	}
	return json.Marshal(toSerialize)
}

type NullableScriptPubKey struct {
	value *ScriptPubKey
	isSet bool
}

func (v NullableScriptPubKey) Get() *ScriptPubKey {
	return v.value
}

func (v *NullableScriptPubKey) Set(val *ScriptPubKey) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptPubKey) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptPubKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptPubKey(val *ScriptPubKey) *NullableScriptPubKey {
	return &NullableScriptPubKey{value: val, isSet: true}
}

func (v NullableScriptPubKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptPubKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


