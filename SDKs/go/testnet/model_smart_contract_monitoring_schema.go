/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractMonitoringSchema struct for SmartContractMonitoringSchema
type SmartContractMonitoringSchema struct {
	SmartContractEventMonitoringDetails *ResourceMonitoringSmartContractEventDetails `json:"smartContractEventMonitoringDetails,omitempty"`
	ResourceMonitoring *ResourceMonitoringDetails `json:"resourceMonitoring,omitempty"`
}

// NewSmartContractMonitoringSchema instantiates a new SmartContractMonitoringSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractMonitoringSchema() *SmartContractMonitoringSchema {
	this := SmartContractMonitoringSchema{}
	return &this
}

// NewSmartContractMonitoringSchemaWithDefaults instantiates a new SmartContractMonitoringSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractMonitoringSchemaWithDefaults() *SmartContractMonitoringSchema {
	this := SmartContractMonitoringSchema{}
	return &this
}

// GetSmartContractEventMonitoringDetails returns the SmartContractEventMonitoringDetails field value if set, zero value otherwise.
func (o *SmartContractMonitoringSchema) GetSmartContractEventMonitoringDetails() ResourceMonitoringSmartContractEventDetails {
	if o == nil || o.SmartContractEventMonitoringDetails == nil {
		var ret ResourceMonitoringSmartContractEventDetails
		return ret
	}
	return *o.SmartContractEventMonitoringDetails
}

// GetSmartContractEventMonitoringDetailsOk returns a tuple with the SmartContractEventMonitoringDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringSchema) GetSmartContractEventMonitoringDetailsOk() (*ResourceMonitoringSmartContractEventDetails, bool) {
	if o == nil || o.SmartContractEventMonitoringDetails == nil {
		return nil, false
	}
	return o.SmartContractEventMonitoringDetails, true
}

// HasSmartContractEventMonitoringDetails returns a boolean if a field has been set.
func (o *SmartContractMonitoringSchema) HasSmartContractEventMonitoringDetails() bool {
	if o != nil && o.SmartContractEventMonitoringDetails != nil {
		return true
	}

	return false
}

// SetSmartContractEventMonitoringDetails gets a reference to the given ResourceMonitoringSmartContractEventDetails and assigns it to the SmartContractEventMonitoringDetails field.
func (o *SmartContractMonitoringSchema) SetSmartContractEventMonitoringDetails(v ResourceMonitoringSmartContractEventDetails) {
	o.SmartContractEventMonitoringDetails = &v
}

// GetResourceMonitoring returns the ResourceMonitoring field value if set, zero value otherwise.
func (o *SmartContractMonitoringSchema) GetResourceMonitoring() ResourceMonitoringDetails {
	if o == nil || o.ResourceMonitoring == nil {
		var ret ResourceMonitoringDetails
		return ret
	}
	return *o.ResourceMonitoring
}

// GetResourceMonitoringOk returns a tuple with the ResourceMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractMonitoringSchema) GetResourceMonitoringOk() (*ResourceMonitoringDetails, bool) {
	if o == nil || o.ResourceMonitoring == nil {
		return nil, false
	}
	return o.ResourceMonitoring, true
}

// HasResourceMonitoring returns a boolean if a field has been set.
func (o *SmartContractMonitoringSchema) HasResourceMonitoring() bool {
	if o != nil && o.ResourceMonitoring != nil {
		return true
	}

	return false
}

// SetResourceMonitoring gets a reference to the given ResourceMonitoringDetails and assigns it to the ResourceMonitoring field.
func (o *SmartContractMonitoringSchema) SetResourceMonitoring(v ResourceMonitoringDetails) {
	o.ResourceMonitoring = &v
}

func (o SmartContractMonitoringSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SmartContractEventMonitoringDetails != nil {
		toSerialize["smartContractEventMonitoringDetails"] = o.SmartContractEventMonitoringDetails
	}
	if o.ResourceMonitoring != nil {
		toSerialize["resourceMonitoring"] = o.ResourceMonitoring
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractMonitoringSchema struct {
	value *SmartContractMonitoringSchema
	isSet bool
}

func (v NullableSmartContractMonitoringSchema) Get() *SmartContractMonitoringSchema {
	return v.value
}

func (v *NullableSmartContractMonitoringSchema) Set(val *SmartContractMonitoringSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractMonitoringSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractMonitoringSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractMonitoringSchema(val *SmartContractMonitoringSchema) *NullableSmartContractMonitoringSchema {
	return &NullableSmartContractMonitoringSchema{value: val, isSet: true}
}

func (v NullableSmartContractMonitoringSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractMonitoringSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


