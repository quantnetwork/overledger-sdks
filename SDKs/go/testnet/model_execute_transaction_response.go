/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteTransactionResponse struct for ExecuteTransactionResponse
type ExecuteTransactionResponse struct {
	Urgency *string `json:"urgency,omitempty"`
	// The ID assigned to a preparation request in Overledger
	RequestId *string `json:"requestId,omitempty"`
	OverledgerTransactionId *string `json:"overledgerTransactionId,omitempty"`
	Location *Location `json:"location,omitempty"`
	// The type of the transaction executed
	Type *string `json:"type,omitempty"`
	// The ID assigned by Overledger to a transaction submitted to a DLT via Overledger
	TransactionId *string `json:"transactionId,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// NewExecuteTransactionResponse instantiates a new ExecuteTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteTransactionResponse() *ExecuteTransactionResponse {
	this := ExecuteTransactionResponse{}
	return &this
}

// NewExecuteTransactionResponseWithDefaults instantiates a new ExecuteTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteTransactionResponseWithDefaults() *ExecuteTransactionResponse {
	this := ExecuteTransactionResponse{}
	return &this
}

// GetUrgency returns the Urgency field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetUrgency() string {
	if o == nil || o.Urgency == nil {
		var ret string
		return ret
	}
	return *o.Urgency
}

// GetUrgencyOk returns a tuple with the Urgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetUrgencyOk() (*string, bool) {
	if o == nil || o.Urgency == nil {
		return nil, false
	}
	return o.Urgency, true
}

// HasUrgency returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasUrgency() bool {
	if o != nil && o.Urgency != nil {
		return true
	}

	return false
}

// SetUrgency gets a reference to the given string and assigns it to the Urgency field.
func (o *ExecuteTransactionResponse) SetUrgency(v string) {
	o.Urgency = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ExecuteTransactionResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetOverledgerTransactionId returns the OverledgerTransactionId field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetOverledgerTransactionId() string {
	if o == nil || o.OverledgerTransactionId == nil {
		var ret string
		return ret
	}
	return *o.OverledgerTransactionId
}

// GetOverledgerTransactionIdOk returns a tuple with the OverledgerTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetOverledgerTransactionIdOk() (*string, bool) {
	if o == nil || o.OverledgerTransactionId == nil {
		return nil, false
	}
	return o.OverledgerTransactionId, true
}

// HasOverledgerTransactionId returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasOverledgerTransactionId() bool {
	if o != nil && o.OverledgerTransactionId != nil {
		return true
	}

	return false
}

// SetOverledgerTransactionId gets a reference to the given string and assigns it to the OverledgerTransactionId field.
func (o *ExecuteTransactionResponse) SetOverledgerTransactionId(v string) {
	o.OverledgerTransactionId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ExecuteTransactionResponse) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExecuteTransactionResponse) SetType(v string) {
	o.Type = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ExecuteTransactionResponse) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecuteTransactionResponse) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteTransactionResponse) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecuteTransactionResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *ExecuteTransactionResponse) SetStatus(v Status) {
	o.Status = &v
}

func (o ExecuteTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Urgency != nil {
		toSerialize["urgency"] = o.Urgency
	}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	if o.OverledgerTransactionId != nil {
		toSerialize["overledgerTransactionId"] = o.OverledgerTransactionId
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteTransactionResponse struct {
	value *ExecuteTransactionResponse
	isSet bool
}

func (v NullableExecuteTransactionResponse) Get() *ExecuteTransactionResponse {
	return v.value
}

func (v *NullableExecuteTransactionResponse) Set(val *ExecuteTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteTransactionResponse(val *ExecuteTransactionResponse) *NullableExecuteTransactionResponse {
	return &NullableExecuteTransactionResponse{value: val, isSet: true}
}

func (v NullableExecuteTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


