/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LinkedBlocks struct for LinkedBlocks
type LinkedBlocks struct {
	Parent *string `json:"parent,omitempty"`
	Child *string `json:"child,omitempty"`
}

// NewLinkedBlocks instantiates a new LinkedBlocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedBlocks() *LinkedBlocks {
	this := LinkedBlocks{}
	return &this
}

// NewLinkedBlocksWithDefaults instantiates a new LinkedBlocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedBlocksWithDefaults() *LinkedBlocks {
	this := LinkedBlocks{}
	return &this
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *LinkedBlocks) GetParent() string {
	if o == nil || o.Parent == nil {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedBlocks) GetParentOk() (*string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *LinkedBlocks) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *LinkedBlocks) SetParent(v string) {
	o.Parent = &v
}

// GetChild returns the Child field value if set, zero value otherwise.
func (o *LinkedBlocks) GetChild() string {
	if o == nil || o.Child == nil {
		var ret string
		return ret
	}
	return *o.Child
}

// GetChildOk returns a tuple with the Child field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedBlocks) GetChildOk() (*string, bool) {
	if o == nil || o.Child == nil {
		return nil, false
	}
	return o.Child, true
}

// HasChild returns a boolean if a field has been set.
func (o *LinkedBlocks) HasChild() bool {
	if o != nil && o.Child != nil {
		return true
	}

	return false
}

// SetChild gets a reference to the given string and assigns it to the Child field.
func (o *LinkedBlocks) SetChild(v string) {
	o.Child = &v
}

func (o LinkedBlocks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Child != nil {
		toSerialize["child"] = o.Child
	}
	return json.Marshal(toSerialize)
}

type NullableLinkedBlocks struct {
	value *LinkedBlocks
	isSet bool
}

func (v NullableLinkedBlocks) Get() *LinkedBlocks {
	return v.value
}

func (v *NullableLinkedBlocks) Set(val *LinkedBlocks) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedBlocks) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedBlocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedBlocks(val *LinkedBlocks) *NullableLinkedBlocks {
	return &NullableLinkedBlocks{value: val, isSet: true}
}

func (v NullableLinkedBlocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedBlocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


