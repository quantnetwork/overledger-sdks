/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrepareSearchResponseSchema struct for PrepareSearchResponseSchema
type PrepareSearchResponseSchema struct {
	GatewayFee *Fee `json:"gatewayFee,omitempty"`
	// The ID assigned to a preparation request in Overledger
	RequestId *string `json:"requestId,omitempty"`
}

// NewPrepareSearchResponseSchema instantiates a new PrepareSearchResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareSearchResponseSchema() *PrepareSearchResponseSchema {
	this := PrepareSearchResponseSchema{}
	return &this
}

// NewPrepareSearchResponseSchemaWithDefaults instantiates a new PrepareSearchResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareSearchResponseSchemaWithDefaults() *PrepareSearchResponseSchema {
	this := PrepareSearchResponseSchema{}
	return &this
}

// GetGatewayFee returns the GatewayFee field value if set, zero value otherwise.
func (o *PrepareSearchResponseSchema) GetGatewayFee() Fee {
	if o == nil || o.GatewayFee == nil {
		var ret Fee
		return ret
	}
	return *o.GatewayFee
}

// GetGatewayFeeOk returns a tuple with the GatewayFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareSearchResponseSchema) GetGatewayFeeOk() (*Fee, bool) {
	if o == nil || o.GatewayFee == nil {
		return nil, false
	}
	return o.GatewayFee, true
}

// HasGatewayFee returns a boolean if a field has been set.
func (o *PrepareSearchResponseSchema) HasGatewayFee() bool {
	if o != nil && o.GatewayFee != nil {
		return true
	}

	return false
}

// SetGatewayFee gets a reference to the given Fee and assigns it to the GatewayFee field.
func (o *PrepareSearchResponseSchema) SetGatewayFee(v Fee) {
	o.GatewayFee = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *PrepareSearchResponseSchema) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareSearchResponseSchema) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *PrepareSearchResponseSchema) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *PrepareSearchResponseSchema) SetRequestId(v string) {
	o.RequestId = &v
}

func (o PrepareSearchResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GatewayFee != nil {
		toSerialize["gatewayFee"] = o.GatewayFee
	}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareSearchResponseSchema struct {
	value *PrepareSearchResponseSchema
	isSet bool
}

func (v NullablePrepareSearchResponseSchema) Get() *PrepareSearchResponseSchema {
	return v.value
}

func (v *NullablePrepareSearchResponseSchema) Set(val *PrepareSearchResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareSearchResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareSearchResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareSearchResponseSchema(val *PrepareSearchResponseSchema) *NullablePrepareSearchResponseSchema {
	return &NullablePrepareSearchResponseSchema{value: val, isSet: true}
}

func (v NullablePrepareSearchResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareSearchResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


