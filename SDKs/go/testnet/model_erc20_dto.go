/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Erc20DTO struct for Erc20DTO
type Erc20DTO struct {
	IsQrc20 *bool `json:"isQrc20,omitempty"`
	TokenUnit *string `json:"tokenUnit,omitempty"`
	DecimalPlaces *int32 `json:"decimalPlaces,omitempty"`
	Functions *[]TierFunctionDTO `json:"functions,omitempty"`
	TokenName *string `json:"tokenName,omitempty"`
	SmartContractAddress *string `json:"smartContractAddress,omitempty"`
	Location *LocationDTO `json:"location,omitempty"`
	Version *string `json:"version,omitempty"`
	Url *string `json:"url,omitempty"`
	AuditDate *string `json:"auditDate,omitempty"`
}

// NewErc20DTO instantiates a new Erc20DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErc20DTO() *Erc20DTO {
	this := Erc20DTO{}
	return &this
}

// NewErc20DTOWithDefaults instantiates a new Erc20DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErc20DTOWithDefaults() *Erc20DTO {
	this := Erc20DTO{}
	return &this
}

// GetIsQrc20 returns the IsQrc20 field value if set, zero value otherwise.
func (o *Erc20DTO) GetIsQrc20() bool {
	if o == nil || o.IsQrc20 == nil {
		var ret bool
		return ret
	}
	return *o.IsQrc20
}

// GetIsQrc20Ok returns a tuple with the IsQrc20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetIsQrc20Ok() (*bool, bool) {
	if o == nil || o.IsQrc20 == nil {
		return nil, false
	}
	return o.IsQrc20, true
}

// HasIsQrc20 returns a boolean if a field has been set.
func (o *Erc20DTO) HasIsQrc20() bool {
	if o != nil && o.IsQrc20 != nil {
		return true
	}

	return false
}

// SetIsQrc20 gets a reference to the given bool and assigns it to the IsQrc20 field.
func (o *Erc20DTO) SetIsQrc20(v bool) {
	o.IsQrc20 = &v
}

// GetTokenUnit returns the TokenUnit field value if set, zero value otherwise.
func (o *Erc20DTO) GetTokenUnit() string {
	if o == nil || o.TokenUnit == nil {
		var ret string
		return ret
	}
	return *o.TokenUnit
}

// GetTokenUnitOk returns a tuple with the TokenUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetTokenUnitOk() (*string, bool) {
	if o == nil || o.TokenUnit == nil {
		return nil, false
	}
	return o.TokenUnit, true
}

// HasTokenUnit returns a boolean if a field has been set.
func (o *Erc20DTO) HasTokenUnit() bool {
	if o != nil && o.TokenUnit != nil {
		return true
	}

	return false
}

// SetTokenUnit gets a reference to the given string and assigns it to the TokenUnit field.
func (o *Erc20DTO) SetTokenUnit(v string) {
	o.TokenUnit = &v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *Erc20DTO) GetDecimalPlaces() int32 {
	if o == nil || o.DecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.DecimalPlaces == nil {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *Erc20DTO) HasDecimalPlaces() bool {
	if o != nil && o.DecimalPlaces != nil {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *Erc20DTO) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *Erc20DTO) GetFunctions() []TierFunctionDTO {
	if o == nil || o.Functions == nil {
		var ret []TierFunctionDTO
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetFunctionsOk() (*[]TierFunctionDTO, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *Erc20DTO) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []TierFunctionDTO and assigns it to the Functions field.
func (o *Erc20DTO) SetFunctions(v []TierFunctionDTO) {
	o.Functions = &v
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *Erc20DTO) GetTokenName() string {
	if o == nil || o.TokenName == nil {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetTokenNameOk() (*string, bool) {
	if o == nil || o.TokenName == nil {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *Erc20DTO) HasTokenName() bool {
	if o != nil && o.TokenName != nil {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *Erc20DTO) SetTokenName(v string) {
	o.TokenName = &v
}

// GetSmartContractAddress returns the SmartContractAddress field value if set, zero value otherwise.
func (o *Erc20DTO) GetSmartContractAddress() string {
	if o == nil || o.SmartContractAddress == nil {
		var ret string
		return ret
	}
	return *o.SmartContractAddress
}

// GetSmartContractAddressOk returns a tuple with the SmartContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetSmartContractAddressOk() (*string, bool) {
	if o == nil || o.SmartContractAddress == nil {
		return nil, false
	}
	return o.SmartContractAddress, true
}

// HasSmartContractAddress returns a boolean if a field has been set.
func (o *Erc20DTO) HasSmartContractAddress() bool {
	if o != nil && o.SmartContractAddress != nil {
		return true
	}

	return false
}

// SetSmartContractAddress gets a reference to the given string and assigns it to the SmartContractAddress field.
func (o *Erc20DTO) SetSmartContractAddress(v string) {
	o.SmartContractAddress = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Erc20DTO) GetLocation() LocationDTO {
	if o == nil || o.Location == nil {
		var ret LocationDTO
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetLocationOk() (*LocationDTO, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Erc20DTO) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given LocationDTO and assigns it to the Location field.
func (o *Erc20DTO) SetLocation(v LocationDTO) {
	o.Location = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Erc20DTO) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Erc20DTO) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Erc20DTO) SetVersion(v string) {
	o.Version = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Erc20DTO) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Erc20DTO) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Erc20DTO) SetUrl(v string) {
	o.Url = &v
}

// GetAuditDate returns the AuditDate field value if set, zero value otherwise.
func (o *Erc20DTO) GetAuditDate() string {
	if o == nil || o.AuditDate == nil {
		var ret string
		return ret
	}
	return *o.AuditDate
}

// GetAuditDateOk returns a tuple with the AuditDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Erc20DTO) GetAuditDateOk() (*string, bool) {
	if o == nil || o.AuditDate == nil {
		return nil, false
	}
	return o.AuditDate, true
}

// HasAuditDate returns a boolean if a field has been set.
func (o *Erc20DTO) HasAuditDate() bool {
	if o != nil && o.AuditDate != nil {
		return true
	}

	return false
}

// SetAuditDate gets a reference to the given string and assigns it to the AuditDate field.
func (o *Erc20DTO) SetAuditDate(v string) {
	o.AuditDate = &v
}

func (o Erc20DTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsQrc20 != nil {
		toSerialize["isQrc20"] = o.IsQrc20
	}
	if o.TokenUnit != nil {
		toSerialize["tokenUnit"] = o.TokenUnit
	}
	if o.DecimalPlaces != nil {
		toSerialize["decimalPlaces"] = o.DecimalPlaces
	}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.TokenName != nil {
		toSerialize["tokenName"] = o.TokenName
	}
	if o.SmartContractAddress != nil {
		toSerialize["smartContractAddress"] = o.SmartContractAddress
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.AuditDate != nil {
		toSerialize["auditDate"] = o.AuditDate
	}
	return json.Marshal(toSerialize)
}

type NullableErc20DTO struct {
	value *Erc20DTO
	isSet bool
}

func (v NullableErc20DTO) Get() *Erc20DTO {
	return v.value
}

func (v *NullableErc20DTO) Set(val *Erc20DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableErc20DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableErc20DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErc20DTO(val *Erc20DTO) *NullableErc20DTO {
	return &NullableErc20DTO{value: val, isSet: true}
}

func (v NullableErc20DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErc20DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


