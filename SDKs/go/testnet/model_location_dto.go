/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LocationDTO struct for LocationDTO
type LocationDTO struct {
	Technology *string `json:"technology,omitempty"`
	Network *string `json:"network,omitempty"`
}

// NewLocationDTO instantiates a new LocationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationDTO() *LocationDTO {
	this := LocationDTO{}
	return &this
}

// NewLocationDTOWithDefaults instantiates a new LocationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationDTOWithDefaults() *LocationDTO {
	this := LocationDTO{}
	return &this
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *LocationDTO) GetTechnology() string {
	if o == nil || o.Technology == nil {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDTO) GetTechnologyOk() (*string, bool) {
	if o == nil || o.Technology == nil {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *LocationDTO) HasTechnology() bool {
	if o != nil && o.Technology != nil {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *LocationDTO) SetTechnology(v string) {
	o.Technology = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *LocationDTO) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDTO) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *LocationDTO) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *LocationDTO) SetNetwork(v string) {
	o.Network = &v
}

func (o LocationDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Technology != nil {
		toSerialize["technology"] = o.Technology
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableLocationDTO struct {
	value *LocationDTO
	isSet bool
}

func (v NullableLocationDTO) Get() *LocationDTO {
	return v.value
}

func (v *NullableLocationDTO) Set(val *LocationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationDTO(val *LocationDTO) *NullableLocationDTO {
	return &NullableLocationDTO{value: val, isSet: true}
}

func (v NullableLocationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


