/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorList struct for ErrorList
type ErrorList struct {
	Errors *[]Error `json:"errors,omitempty"`
	ErrorCount *int32 `json:"errorCount,omitempty"`
}

// NewErrorList instantiates a new ErrorList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorList() *ErrorList {
	this := ErrorList{}
	return &this
}

// NewErrorListWithDefaults instantiates a new ErrorList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorListWithDefaults() *ErrorList {
	this := ErrorList{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ErrorList) GetErrors() []Error {
	if o == nil || o.Errors == nil {
		var ret []Error
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorList) GetErrorsOk() (*[]Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ErrorList) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *ErrorList) SetErrors(v []Error) {
	o.Errors = &v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *ErrorList) GetErrorCount() int32 {
	if o == nil || o.ErrorCount == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorList) GetErrorCountOk() (*int32, bool) {
	if o == nil || o.ErrorCount == nil {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *ErrorList) HasErrorCount() bool {
	if o != nil && o.ErrorCount != nil {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int32 and assigns it to the ErrorCount field.
func (o *ErrorList) SetErrorCount(v int32) {
	o.ErrorCount = &v
}

func (o ErrorList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.ErrorCount != nil {
		toSerialize["errorCount"] = o.ErrorCount
	}
	return json.Marshal(toSerialize)
}

type NullableErrorList struct {
	value *ErrorList
	isSet bool
}

func (v NullableErrorList) Get() *ErrorList {
	return v.value
}

func (v *NullableErrorList) Set(val *ErrorList) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorList) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorList(val *ErrorList) *NullableErrorList {
	return &NullableErrorList{value: val, isSet: true}
}

func (v NullableErrorList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


