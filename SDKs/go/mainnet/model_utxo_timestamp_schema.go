/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UTXOTimestampSchema struct for UTXOTimestampSchema
type UTXOTimestampSchema struct {
	Nano *string `json:"nano,omitempty"`
	EpochSecond *string `json:"epochSecond,omitempty"`
}

// NewUTXOTimestampSchema instantiates a new UTXOTimestampSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUTXOTimestampSchema() *UTXOTimestampSchema {
	this := UTXOTimestampSchema{}
	return &this
}

// NewUTXOTimestampSchemaWithDefaults instantiates a new UTXOTimestampSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUTXOTimestampSchemaWithDefaults() *UTXOTimestampSchema {
	this := UTXOTimestampSchema{}
	return &this
}

// GetNano returns the Nano field value if set, zero value otherwise.
func (o *UTXOTimestampSchema) GetNano() string {
	if o == nil || o.Nano == nil {
		var ret string
		return ret
	}
	return *o.Nano
}

// GetNanoOk returns a tuple with the Nano field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UTXOTimestampSchema) GetNanoOk() (*string, bool) {
	if o == nil || o.Nano == nil {
		return nil, false
	}
	return o.Nano, true
}

// HasNano returns a boolean if a field has been set.
func (o *UTXOTimestampSchema) HasNano() bool {
	if o != nil && o.Nano != nil {
		return true
	}

	return false
}

// SetNano gets a reference to the given string and assigns it to the Nano field.
func (o *UTXOTimestampSchema) SetNano(v string) {
	o.Nano = &v
}

// GetEpochSecond returns the EpochSecond field value if set, zero value otherwise.
func (o *UTXOTimestampSchema) GetEpochSecond() string {
	if o == nil || o.EpochSecond == nil {
		var ret string
		return ret
	}
	return *o.EpochSecond
}

// GetEpochSecondOk returns a tuple with the EpochSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UTXOTimestampSchema) GetEpochSecondOk() (*string, bool) {
	if o == nil || o.EpochSecond == nil {
		return nil, false
	}
	return o.EpochSecond, true
}

// HasEpochSecond returns a boolean if a field has been set.
func (o *UTXOTimestampSchema) HasEpochSecond() bool {
	if o != nil && o.EpochSecond != nil {
		return true
	}

	return false
}

// SetEpochSecond gets a reference to the given string and assigns it to the EpochSecond field.
func (o *UTXOTimestampSchema) SetEpochSecond(v string) {
	o.EpochSecond = &v
}

func (o UTXOTimestampSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nano != nil {
		toSerialize["nano"] = o.Nano
	}
	if o.EpochSecond != nil {
		toSerialize["epochSecond"] = o.EpochSecond
	}
	return json.Marshal(toSerialize)
}

type NullableUTXOTimestampSchema struct {
	value *UTXOTimestampSchema
	isSet bool
}

func (v NullableUTXOTimestampSchema) Get() *UTXOTimestampSchema {
	return v.value
}

func (v *NullableUTXOTimestampSchema) Set(val *UTXOTimestampSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUTXOTimestampSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUTXOTimestampSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUTXOTimestampSchema(val *UTXOTimestampSchema) *NullableUTXOTimestampSchema {
	return &NullableUTXOTimestampSchema{value: val, isSet: true}
}

func (v NullableUTXOTimestampSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUTXOTimestampSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


