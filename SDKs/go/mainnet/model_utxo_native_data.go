/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UTXONativeData struct for UTXONativeData
type UTXONativeData struct {
	Vout *[]Vout `json:"vout,omitempty"`
}

// NewUTXONativeData instantiates a new UTXONativeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUTXONativeData() *UTXONativeData {
	this := UTXONativeData{}
	return &this
}

// NewUTXONativeDataWithDefaults instantiates a new UTXONativeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUTXONativeDataWithDefaults() *UTXONativeData {
	this := UTXONativeData{}
	return &this
}

// GetVout returns the Vout field value if set, zero value otherwise.
func (o *UTXONativeData) GetVout() []Vout {
	if o == nil || o.Vout == nil {
		var ret []Vout
		return ret
	}
	return *o.Vout
}

// GetVoutOk returns a tuple with the Vout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UTXONativeData) GetVoutOk() (*[]Vout, bool) {
	if o == nil || o.Vout == nil {
		return nil, false
	}
	return o.Vout, true
}

// HasVout returns a boolean if a field has been set.
func (o *UTXONativeData) HasVout() bool {
	if o != nil && o.Vout != nil {
		return true
	}

	return false
}

// SetVout gets a reference to the given []Vout and assigns it to the Vout field.
func (o *UTXONativeData) SetVout(v []Vout) {
	o.Vout = &v
}

func (o UTXONativeData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Vout != nil {
		toSerialize["vout"] = o.Vout
	}
	return json.Marshal(toSerialize)
}

type NullableUTXONativeData struct {
	value *UTXONativeData
	isSet bool
}

func (v NullableUTXONativeData) Get() *UTXONativeData {
	return v.value
}

func (v *NullableUTXONativeData) Set(val *UTXONativeData) {
	v.value = val
	v.isSet = true
}

func (v NullableUTXONativeData) IsSet() bool {
	return v.isSet
}

func (v *NullableUTXONativeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUTXONativeData(val *UTXONativeData) *NullableUTXONativeData {
	return &NullableUTXONativeData{value: val, isSet: true}
}

func (v NullableUTXONativeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUTXONativeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


