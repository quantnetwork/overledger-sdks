/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonFungibleTokenDTO struct for NonFungibleTokenDTO
type NonFungibleTokenDTO struct {
	Functions *[]TierFunctionDTO `json:"functions,omitempty"`
	TokenName *string `json:"tokenName,omitempty"`
	SmartContractAddress *string `json:"smartContractAddress,omitempty"`
	Location *LocationDTO `json:"location,omitempty"`
	Id *string `json:"id,omitempty"`
	TokenType *string `json:"tokenType,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewNonFungibleTokenDTO instantiates a new NonFungibleTokenDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonFungibleTokenDTO() *NonFungibleTokenDTO {
	this := NonFungibleTokenDTO{}
	return &this
}

// NewNonFungibleTokenDTOWithDefaults instantiates a new NonFungibleTokenDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonFungibleTokenDTOWithDefaults() *NonFungibleTokenDTO {
	this := NonFungibleTokenDTO{}
	return &this
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetFunctions() []TierFunctionDTO {
	if o == nil || o.Functions == nil {
		var ret []TierFunctionDTO
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetFunctionsOk() (*[]TierFunctionDTO, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []TierFunctionDTO and assigns it to the Functions field.
func (o *NonFungibleTokenDTO) SetFunctions(v []TierFunctionDTO) {
	o.Functions = &v
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetTokenName() string {
	if o == nil || o.TokenName == nil {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetTokenNameOk() (*string, bool) {
	if o == nil || o.TokenName == nil {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasTokenName() bool {
	if o != nil && o.TokenName != nil {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *NonFungibleTokenDTO) SetTokenName(v string) {
	o.TokenName = &v
}

// GetSmartContractAddress returns the SmartContractAddress field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetSmartContractAddress() string {
	if o == nil || o.SmartContractAddress == nil {
		var ret string
		return ret
	}
	return *o.SmartContractAddress
}

// GetSmartContractAddressOk returns a tuple with the SmartContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetSmartContractAddressOk() (*string, bool) {
	if o == nil || o.SmartContractAddress == nil {
		return nil, false
	}
	return o.SmartContractAddress, true
}

// HasSmartContractAddress returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasSmartContractAddress() bool {
	if o != nil && o.SmartContractAddress != nil {
		return true
	}

	return false
}

// SetSmartContractAddress gets a reference to the given string and assigns it to the SmartContractAddress field.
func (o *NonFungibleTokenDTO) SetSmartContractAddress(v string) {
	o.SmartContractAddress = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetLocation() LocationDTO {
	if o == nil || o.Location == nil {
		var ret LocationDTO
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetLocationOk() (*LocationDTO, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given LocationDTO and assigns it to the Location field.
func (o *NonFungibleTokenDTO) SetLocation(v LocationDTO) {
	o.Location = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NonFungibleTokenDTO) SetId(v string) {
	o.Id = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *NonFungibleTokenDTO) SetTokenType(v string) {
	o.TokenType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NonFungibleTokenDTO) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenDTO) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NonFungibleTokenDTO) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NonFungibleTokenDTO) SetUrl(v string) {
	o.Url = &v
}

func (o NonFungibleTokenDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.TokenName != nil {
		toSerialize["tokenName"] = o.TokenName
	}
	if o.SmartContractAddress != nil {
		toSerialize["smartContractAddress"] = o.SmartContractAddress
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TokenType != nil {
		toSerialize["tokenType"] = o.TokenType
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableNonFungibleTokenDTO struct {
	value *NonFungibleTokenDTO
	isSet bool
}

func (v NullableNonFungibleTokenDTO) Get() *NonFungibleTokenDTO {
	return v.value
}

func (v *NullableNonFungibleTokenDTO) Set(val *NonFungibleTokenDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNonFungibleTokenDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNonFungibleTokenDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonFungibleTokenDTO(val *NonFungibleTokenDTO) *NullableNonFungibleTokenDTO {
	return &NullableNonFungibleTokenDTO{value: val, isSet: true}
}

func (v NullableNonFungibleTokenDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonFungibleTokenDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


