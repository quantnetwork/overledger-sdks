/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorResponseMessage struct for ErrorResponseMessage
type ErrorResponseMessage struct {
	Code *int32 `json:"code,omitempty"`
	ErrorMessageExtraDetails *map[string]interface{} `json:"errorMessageExtraDetails,omitempty"`
	SubCode *int32 `json:"subCode,omitempty"`
	LogTraceId *string `json:"logTraceId,omitempty"`
	Type *string `json:"type,omitempty"`
	Title *string `json:"title,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewErrorResponseMessage instantiates a new ErrorResponseMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseMessage() *ErrorResponseMessage {
	this := ErrorResponseMessage{}
	return &this
}

// NewErrorResponseMessageWithDefaults instantiates a new ErrorResponseMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseMessageWithDefaults() *ErrorResponseMessage {
	this := ErrorResponseMessage{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *ErrorResponseMessage) SetCode(v int32) {
	o.Code = &v
}

// GetErrorMessageExtraDetails returns the ErrorMessageExtraDetails field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetErrorMessageExtraDetails() map[string]interface{} {
	if o == nil || o.ErrorMessageExtraDetails == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ErrorMessageExtraDetails
}

// GetErrorMessageExtraDetailsOk returns a tuple with the ErrorMessageExtraDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetErrorMessageExtraDetailsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ErrorMessageExtraDetails == nil {
		return nil, false
	}
	return o.ErrorMessageExtraDetails, true
}

// HasErrorMessageExtraDetails returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasErrorMessageExtraDetails() bool {
	if o != nil && o.ErrorMessageExtraDetails != nil {
		return true
	}

	return false
}

// SetErrorMessageExtraDetails gets a reference to the given map[string]interface{} and assigns it to the ErrorMessageExtraDetails field.
func (o *ErrorResponseMessage) SetErrorMessageExtraDetails(v map[string]interface{}) {
	o.ErrorMessageExtraDetails = &v
}

// GetSubCode returns the SubCode field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetSubCode() int32 {
	if o == nil || o.SubCode == nil {
		var ret int32
		return ret
	}
	return *o.SubCode
}

// GetSubCodeOk returns a tuple with the SubCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetSubCodeOk() (*int32, bool) {
	if o == nil || o.SubCode == nil {
		return nil, false
	}
	return o.SubCode, true
}

// HasSubCode returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasSubCode() bool {
	if o != nil && o.SubCode != nil {
		return true
	}

	return false
}

// SetSubCode gets a reference to the given int32 and assigns it to the SubCode field.
func (o *ErrorResponseMessage) SetSubCode(v int32) {
	o.SubCode = &v
}

// GetLogTraceId returns the LogTraceId field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetLogTraceId() string {
	if o == nil || o.LogTraceId == nil {
		var ret string
		return ret
	}
	return *o.LogTraceId
}

// GetLogTraceIdOk returns a tuple with the LogTraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetLogTraceIdOk() (*string, bool) {
	if o == nil || o.LogTraceId == nil {
		return nil, false
	}
	return o.LogTraceId, true
}

// HasLogTraceId returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasLogTraceId() bool {
	if o != nil && o.LogTraceId != nil {
		return true
	}

	return false
}

// SetLogTraceId gets a reference to the given string and assigns it to the LogTraceId field.
func (o *ErrorResponseMessage) SetLogTraceId(v string) {
	o.LogTraceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ErrorResponseMessage) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ErrorResponseMessage) SetTitle(v string) {
	o.Title = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorResponseMessage) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseMessage) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorResponseMessage) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorResponseMessage) SetMessage(v string) {
	o.Message = &v
}

func (o ErrorResponseMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.ErrorMessageExtraDetails != nil {
		toSerialize["errorMessageExtraDetails"] = o.ErrorMessageExtraDetails
	}
	if o.SubCode != nil {
		toSerialize["subCode"] = o.SubCode
	}
	if o.LogTraceId != nil {
		toSerialize["logTraceId"] = o.LogTraceId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableErrorResponseMessage struct {
	value *ErrorResponseMessage
	isSet bool
}

func (v NullableErrorResponseMessage) Get() *ErrorResponseMessage {
	return v.value
}

func (v *NullableErrorResponseMessage) Set(val *ErrorResponseMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseMessage(val *ErrorResponseMessage) *NullableErrorResponseMessage {
	return &NullableErrorResponseMessage{value: val, isSet: true}
}

func (v NullableErrorResponseMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


