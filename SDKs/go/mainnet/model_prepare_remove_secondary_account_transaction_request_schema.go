/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrepareRemoveSecondaryAccountTransactionRequestSchema struct for PrepareRemoveSecondaryAccountTransactionRequestSchema
type PrepareRemoveSecondaryAccountTransactionRequestSchema struct {
	RemoveSecondaryAccountDetailsSchema *RemoveSecondaryAccountDetailsSchema `json:"removeSecondaryAccountDetailsSchema,omitempty"`
}

// NewPrepareRemoveSecondaryAccountTransactionRequestSchema instantiates a new PrepareRemoveSecondaryAccountTransactionRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareRemoveSecondaryAccountTransactionRequestSchema() *PrepareRemoveSecondaryAccountTransactionRequestSchema {
	this := PrepareRemoveSecondaryAccountTransactionRequestSchema{}
	return &this
}

// NewPrepareRemoveSecondaryAccountTransactionRequestSchemaWithDefaults instantiates a new PrepareRemoveSecondaryAccountTransactionRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareRemoveSecondaryAccountTransactionRequestSchemaWithDefaults() *PrepareRemoveSecondaryAccountTransactionRequestSchema {
	this := PrepareRemoveSecondaryAccountTransactionRequestSchema{}
	return &this
}

// GetRemoveSecondaryAccountDetailsSchema returns the RemoveSecondaryAccountDetailsSchema field value if set, zero value otherwise.
func (o *PrepareRemoveSecondaryAccountTransactionRequestSchema) GetRemoveSecondaryAccountDetailsSchema() RemoveSecondaryAccountDetailsSchema {
	if o == nil || o.RemoveSecondaryAccountDetailsSchema == nil {
		var ret RemoveSecondaryAccountDetailsSchema
		return ret
	}
	return *o.RemoveSecondaryAccountDetailsSchema
}

// GetRemoveSecondaryAccountDetailsSchemaOk returns a tuple with the RemoveSecondaryAccountDetailsSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareRemoveSecondaryAccountTransactionRequestSchema) GetRemoveSecondaryAccountDetailsSchemaOk() (*RemoveSecondaryAccountDetailsSchema, bool) {
	if o == nil || o.RemoveSecondaryAccountDetailsSchema == nil {
		return nil, false
	}
	return o.RemoveSecondaryAccountDetailsSchema, true
}

// HasRemoveSecondaryAccountDetailsSchema returns a boolean if a field has been set.
func (o *PrepareRemoveSecondaryAccountTransactionRequestSchema) HasRemoveSecondaryAccountDetailsSchema() bool {
	if o != nil && o.RemoveSecondaryAccountDetailsSchema != nil {
		return true
	}

	return false
}

// SetRemoveSecondaryAccountDetailsSchema gets a reference to the given RemoveSecondaryAccountDetailsSchema and assigns it to the RemoveSecondaryAccountDetailsSchema field.
func (o *PrepareRemoveSecondaryAccountTransactionRequestSchema) SetRemoveSecondaryAccountDetailsSchema(v RemoveSecondaryAccountDetailsSchema) {
	o.RemoveSecondaryAccountDetailsSchema = &v
}

func (o PrepareRemoveSecondaryAccountTransactionRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoveSecondaryAccountDetailsSchema != nil {
		toSerialize["removeSecondaryAccountDetailsSchema"] = o.RemoveSecondaryAccountDetailsSchema
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareRemoveSecondaryAccountTransactionRequestSchema struct {
	value *PrepareRemoveSecondaryAccountTransactionRequestSchema
	isSet bool
}

func (v NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) Get() *PrepareRemoveSecondaryAccountTransactionRequestSchema {
	return v.value
}

func (v *NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) Set(val *PrepareRemoveSecondaryAccountTransactionRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareRemoveSecondaryAccountTransactionRequestSchema(val *PrepareRemoveSecondaryAccountTransactionRequestSchema) *NullablePrepareRemoveSecondaryAccountTransactionRequestSchema {
	return &NullablePrepareRemoveSecondaryAccountTransactionRequestSchema{value: val, isSet: true}
}

func (v NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareRemoveSecondaryAccountTransactionRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


