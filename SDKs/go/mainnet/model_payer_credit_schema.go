/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PayerCreditSchema Who are the payers of this transaction
type PayerCreditSchema struct {
	// Unique Identifier of the payer
	PayerId *string `json:"payerId,omitempty"`
}

// NewPayerCreditSchema instantiates a new PayerCreditSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayerCreditSchema() *PayerCreditSchema {
	this := PayerCreditSchema{}
	return &this
}

// NewPayerCreditSchemaWithDefaults instantiates a new PayerCreditSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayerCreditSchemaWithDefaults() *PayerCreditSchema {
	this := PayerCreditSchema{}
	return &this
}

// GetPayerId returns the PayerId field value if set, zero value otherwise.
func (o *PayerCreditSchema) GetPayerId() string {
	if o == nil || o.PayerId == nil {
		var ret string
		return ret
	}
	return *o.PayerId
}

// GetPayerIdOk returns a tuple with the PayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayerCreditSchema) GetPayerIdOk() (*string, bool) {
	if o == nil || o.PayerId == nil {
		return nil, false
	}
	return o.PayerId, true
}

// HasPayerId returns a boolean if a field has been set.
func (o *PayerCreditSchema) HasPayerId() bool {
	if o != nil && o.PayerId != nil {
		return true
	}

	return false
}

// SetPayerId gets a reference to the given string and assigns it to the PayerId field.
func (o *PayerCreditSchema) SetPayerId(v string) {
	o.PayerId = &v
}

func (o PayerCreditSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PayerId != nil {
		toSerialize["payerId"] = o.PayerId
	}
	return json.Marshal(toSerialize)
}

type NullablePayerCreditSchema struct {
	value *PayerCreditSchema
	isSet bool
}

func (v NullablePayerCreditSchema) Get() *PayerCreditSchema {
	return v.value
}

func (v *NullablePayerCreditSchema) Set(val *PayerCreditSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePayerCreditSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePayerCreditSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayerCreditSchema(val *PayerCreditSchema) *NullablePayerCreditSchema {
	return &NullablePayerCreditSchema{value: val, isSet: true}
}

func (v NullablePayerCreditSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayerCreditSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


