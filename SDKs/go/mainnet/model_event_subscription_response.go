/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventSubscriptionResponse struct for EventSubscriptionResponse
type EventSubscriptionResponse struct {
	// Name of the token
	TokenName *string `json:"tokenName,omitempty"`
	SubscriptionDetails *EventSubscriptionResponseDetails `json:"subscriptionDetails,omitempty"`
	Location *Location `json:"location,omitempty"`
	// Type of event
	Type *string `json:"type,omitempty"`
}

// NewEventSubscriptionResponse instantiates a new EventSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSubscriptionResponse() *EventSubscriptionResponse {
	this := EventSubscriptionResponse{}
	return &this
}

// NewEventSubscriptionResponseWithDefaults instantiates a new EventSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSubscriptionResponseWithDefaults() *EventSubscriptionResponse {
	this := EventSubscriptionResponse{}
	return &this
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *EventSubscriptionResponse) GetTokenName() string {
	if o == nil || o.TokenName == nil {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscriptionResponse) GetTokenNameOk() (*string, bool) {
	if o == nil || o.TokenName == nil {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *EventSubscriptionResponse) HasTokenName() bool {
	if o != nil && o.TokenName != nil {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *EventSubscriptionResponse) SetTokenName(v string) {
	o.TokenName = &v
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *EventSubscriptionResponse) GetSubscriptionDetails() EventSubscriptionResponseDetails {
	if o == nil || o.SubscriptionDetails == nil {
		var ret EventSubscriptionResponseDetails
		return ret
	}
	return *o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscriptionResponse) GetSubscriptionDetailsOk() (*EventSubscriptionResponseDetails, bool) {
	if o == nil || o.SubscriptionDetails == nil {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *EventSubscriptionResponse) HasSubscriptionDetails() bool {
	if o != nil && o.SubscriptionDetails != nil {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given EventSubscriptionResponseDetails and assigns it to the SubscriptionDetails field.
func (o *EventSubscriptionResponse) SetSubscriptionDetails(v EventSubscriptionResponseDetails) {
	o.SubscriptionDetails = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EventSubscriptionResponse) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscriptionResponse) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EventSubscriptionResponse) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *EventSubscriptionResponse) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventSubscriptionResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscriptionResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventSubscriptionResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventSubscriptionResponse) SetType(v string) {
	o.Type = &v
}

func (o EventSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenName != nil {
		toSerialize["tokenName"] = o.TokenName
	}
	if o.SubscriptionDetails != nil {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEventSubscriptionResponse struct {
	value *EventSubscriptionResponse
	isSet bool
}

func (v NullableEventSubscriptionResponse) Get() *EventSubscriptionResponse {
	return v.value
}

func (v *NullableEventSubscriptionResponse) Set(val *EventSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSubscriptionResponse(val *EventSubscriptionResponse) *NullableEventSubscriptionResponse {
	return &NullableEventSubscriptionResponse{value: val, isSet: true}
}

func (v NullableEventSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


