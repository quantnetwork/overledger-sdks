/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateSubscriptionResponseSchema struct for CreateSubscriptionResponseSchema
type CreateSubscriptionResponseSchema struct {
	ScubscriptionDetails *SubscriptionDetailsSchema `json:"scubscriptionDetails,omitempty"`
	SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// NewCreateSubscriptionResponseSchema instantiates a new CreateSubscriptionResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubscriptionResponseSchema() *CreateSubscriptionResponseSchema {
	this := CreateSubscriptionResponseSchema{}
	return &this
}

// NewCreateSubscriptionResponseSchemaWithDefaults instantiates a new CreateSubscriptionResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubscriptionResponseSchemaWithDefaults() *CreateSubscriptionResponseSchema {
	this := CreateSubscriptionResponseSchema{}
	return &this
}

// GetScubscriptionDetails returns the ScubscriptionDetails field value if set, zero value otherwise.
func (o *CreateSubscriptionResponseSchema) GetScubscriptionDetails() SubscriptionDetailsSchema {
	if o == nil || o.ScubscriptionDetails == nil {
		var ret SubscriptionDetailsSchema
		return ret
	}
	return *o.ScubscriptionDetails
}

// GetScubscriptionDetailsOk returns a tuple with the ScubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionResponseSchema) GetScubscriptionDetailsOk() (*SubscriptionDetailsSchema, bool) {
	if o == nil || o.ScubscriptionDetails == nil {
		return nil, false
	}
	return o.ScubscriptionDetails, true
}

// HasScubscriptionDetails returns a boolean if a field has been set.
func (o *CreateSubscriptionResponseSchema) HasScubscriptionDetails() bool {
	if o != nil && o.ScubscriptionDetails != nil {
		return true
	}

	return false
}

// SetScubscriptionDetails gets a reference to the given SubscriptionDetailsSchema and assigns it to the ScubscriptionDetails field.
func (o *CreateSubscriptionResponseSchema) SetScubscriptionDetails(v SubscriptionDetailsSchema) {
	o.ScubscriptionDetails = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *CreateSubscriptionResponseSchema) GetSubscriptionId() string {
	if o == nil || o.SubscriptionId == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionResponseSchema) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || o.SubscriptionId == nil {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *CreateSubscriptionResponseSchema) HasSubscriptionId() bool {
	if o != nil && o.SubscriptionId != nil {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *CreateSubscriptionResponseSchema) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

func (o CreateSubscriptionResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScubscriptionDetails != nil {
		toSerialize["scubscriptionDetails"] = o.ScubscriptionDetails
	}
	if o.SubscriptionId != nil {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSubscriptionResponseSchema struct {
	value *CreateSubscriptionResponseSchema
	isSet bool
}

func (v NullableCreateSubscriptionResponseSchema) Get() *CreateSubscriptionResponseSchema {
	return v.value
}

func (v *NullableCreateSubscriptionResponseSchema) Set(val *CreateSubscriptionResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionResponseSchema(val *CreateSubscriptionResponseSchema) *NullableCreateSubscriptionResponseSchema {
	return &NullableCreateSubscriptionResponseSchema{value: val, isSet: true}
}

func (v NullableCreateSubscriptionResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


