/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MonitorSmartContractRequestSchema struct for MonitorSmartContractRequestSchema
type MonitorSmartContractRequestSchema struct {
	CallBackURL *string `json:"callBackURL,omitempty"`
	EventParams *[]MonitorSmartContractEventParam `json:"eventParams,omitempty"`
	EventName *string `json:"eventName,omitempty"`
	Location *Location `json:"location,omitempty"`
	SmartContractId *string `json:"smartContractId,omitempty"`
}

// NewMonitorSmartContractRequestSchema instantiates a new MonitorSmartContractRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorSmartContractRequestSchema() *MonitorSmartContractRequestSchema {
	this := MonitorSmartContractRequestSchema{}
	return &this
}

// NewMonitorSmartContractRequestSchemaWithDefaults instantiates a new MonitorSmartContractRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorSmartContractRequestSchemaWithDefaults() *MonitorSmartContractRequestSchema {
	this := MonitorSmartContractRequestSchema{}
	return &this
}

// GetCallBackURL returns the CallBackURL field value if set, zero value otherwise.
func (o *MonitorSmartContractRequestSchema) GetCallBackURL() string {
	if o == nil || o.CallBackURL == nil {
		var ret string
		return ret
	}
	return *o.CallBackURL
}

// GetCallBackURLOk returns a tuple with the CallBackURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSmartContractRequestSchema) GetCallBackURLOk() (*string, bool) {
	if o == nil || o.CallBackURL == nil {
		return nil, false
	}
	return o.CallBackURL, true
}

// HasCallBackURL returns a boolean if a field has been set.
func (o *MonitorSmartContractRequestSchema) HasCallBackURL() bool {
	if o != nil && o.CallBackURL != nil {
		return true
	}

	return false
}

// SetCallBackURL gets a reference to the given string and assigns it to the CallBackURL field.
func (o *MonitorSmartContractRequestSchema) SetCallBackURL(v string) {
	o.CallBackURL = &v
}

// GetEventParams returns the EventParams field value if set, zero value otherwise.
func (o *MonitorSmartContractRequestSchema) GetEventParams() []MonitorSmartContractEventParam {
	if o == nil || o.EventParams == nil {
		var ret []MonitorSmartContractEventParam
		return ret
	}
	return *o.EventParams
}

// GetEventParamsOk returns a tuple with the EventParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSmartContractRequestSchema) GetEventParamsOk() (*[]MonitorSmartContractEventParam, bool) {
	if o == nil || o.EventParams == nil {
		return nil, false
	}
	return o.EventParams, true
}

// HasEventParams returns a boolean if a field has been set.
func (o *MonitorSmartContractRequestSchema) HasEventParams() bool {
	if o != nil && o.EventParams != nil {
		return true
	}

	return false
}

// SetEventParams gets a reference to the given []MonitorSmartContractEventParam and assigns it to the EventParams field.
func (o *MonitorSmartContractRequestSchema) SetEventParams(v []MonitorSmartContractEventParam) {
	o.EventParams = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *MonitorSmartContractRequestSchema) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSmartContractRequestSchema) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *MonitorSmartContractRequestSchema) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *MonitorSmartContractRequestSchema) SetEventName(v string) {
	o.EventName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *MonitorSmartContractRequestSchema) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSmartContractRequestSchema) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *MonitorSmartContractRequestSchema) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *MonitorSmartContractRequestSchema) SetLocation(v Location) {
	o.Location = &v
}

// GetSmartContractId returns the SmartContractId field value if set, zero value otherwise.
func (o *MonitorSmartContractRequestSchema) GetSmartContractId() string {
	if o == nil || o.SmartContractId == nil {
		var ret string
		return ret
	}
	return *o.SmartContractId
}

// GetSmartContractIdOk returns a tuple with the SmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorSmartContractRequestSchema) GetSmartContractIdOk() (*string, bool) {
	if o == nil || o.SmartContractId == nil {
		return nil, false
	}
	return o.SmartContractId, true
}

// HasSmartContractId returns a boolean if a field has been set.
func (o *MonitorSmartContractRequestSchema) HasSmartContractId() bool {
	if o != nil && o.SmartContractId != nil {
		return true
	}

	return false
}

// SetSmartContractId gets a reference to the given string and assigns it to the SmartContractId field.
func (o *MonitorSmartContractRequestSchema) SetSmartContractId(v string) {
	o.SmartContractId = &v
}

func (o MonitorSmartContractRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CallBackURL != nil {
		toSerialize["callBackURL"] = o.CallBackURL
	}
	if o.EventParams != nil {
		toSerialize["eventParams"] = o.EventParams
	}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.SmartContractId != nil {
		toSerialize["smartContractId"] = o.SmartContractId
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorSmartContractRequestSchema struct {
	value *MonitorSmartContractRequestSchema
	isSet bool
}

func (v NullableMonitorSmartContractRequestSchema) Get() *MonitorSmartContractRequestSchema {
	return v.value
}

func (v *NullableMonitorSmartContractRequestSchema) Set(val *MonitorSmartContractRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorSmartContractRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorSmartContractRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorSmartContractRequestSchema(val *MonitorSmartContractRequestSchema) *NullableMonitorSmartContractRequestSchema {
	return &NullableMonitorSmartContractRequestSchema{value: val, isSet: true}
}

func (v NullableMonitorSmartContractRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorSmartContractRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


