/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AutoExecuteSearchBlockResponseSchema struct for AutoExecuteSearchBlockResponseSchema
type AutoExecuteSearchBlockResponseSchema struct {
	PrepareAndExecuteOverledgerErrorResponse *PrepareAndExecuteOverledgerErrorResponse `json:"prepareAndExecuteOverledgerErrorResponse,omitempty"`
	ExecutionBlockSearchResponse *ExecuteSearchBlockResponse `json:"executionBlockSearchResponse,omitempty"`
	PreparationBlockSearchResponse *PrepareSearchResponseSchema `json:"preparationBlockSearchResponse,omitempty"`
}

// NewAutoExecuteSearchBlockResponseSchema instantiates a new AutoExecuteSearchBlockResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoExecuteSearchBlockResponseSchema() *AutoExecuteSearchBlockResponseSchema {
	this := AutoExecuteSearchBlockResponseSchema{}
	return &this
}

// NewAutoExecuteSearchBlockResponseSchemaWithDefaults instantiates a new AutoExecuteSearchBlockResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoExecuteSearchBlockResponseSchemaWithDefaults() *AutoExecuteSearchBlockResponseSchema {
	this := AutoExecuteSearchBlockResponseSchema{}
	return &this
}

// GetPrepareAndExecuteOverledgerErrorResponse returns the PrepareAndExecuteOverledgerErrorResponse field value if set, zero value otherwise.
func (o *AutoExecuteSearchBlockResponseSchema) GetPrepareAndExecuteOverledgerErrorResponse() PrepareAndExecuteOverledgerErrorResponse {
	if o == nil || o.PrepareAndExecuteOverledgerErrorResponse == nil {
		var ret PrepareAndExecuteOverledgerErrorResponse
		return ret
	}
	return *o.PrepareAndExecuteOverledgerErrorResponse
}

// GetPrepareAndExecuteOverledgerErrorResponseOk returns a tuple with the PrepareAndExecuteOverledgerErrorResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoExecuteSearchBlockResponseSchema) GetPrepareAndExecuteOverledgerErrorResponseOk() (*PrepareAndExecuteOverledgerErrorResponse, bool) {
	if o == nil || o.PrepareAndExecuteOverledgerErrorResponse == nil {
		return nil, false
	}
	return o.PrepareAndExecuteOverledgerErrorResponse, true
}

// HasPrepareAndExecuteOverledgerErrorResponse returns a boolean if a field has been set.
func (o *AutoExecuteSearchBlockResponseSchema) HasPrepareAndExecuteOverledgerErrorResponse() bool {
	if o != nil && o.PrepareAndExecuteOverledgerErrorResponse != nil {
		return true
	}

	return false
}

// SetPrepareAndExecuteOverledgerErrorResponse gets a reference to the given PrepareAndExecuteOverledgerErrorResponse and assigns it to the PrepareAndExecuteOverledgerErrorResponse field.
func (o *AutoExecuteSearchBlockResponseSchema) SetPrepareAndExecuteOverledgerErrorResponse(v PrepareAndExecuteOverledgerErrorResponse) {
	o.PrepareAndExecuteOverledgerErrorResponse = &v
}

// GetExecutionBlockSearchResponse returns the ExecutionBlockSearchResponse field value if set, zero value otherwise.
func (o *AutoExecuteSearchBlockResponseSchema) GetExecutionBlockSearchResponse() ExecuteSearchBlockResponse {
	if o == nil || o.ExecutionBlockSearchResponse == nil {
		var ret ExecuteSearchBlockResponse
		return ret
	}
	return *o.ExecutionBlockSearchResponse
}

// GetExecutionBlockSearchResponseOk returns a tuple with the ExecutionBlockSearchResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoExecuteSearchBlockResponseSchema) GetExecutionBlockSearchResponseOk() (*ExecuteSearchBlockResponse, bool) {
	if o == nil || o.ExecutionBlockSearchResponse == nil {
		return nil, false
	}
	return o.ExecutionBlockSearchResponse, true
}

// HasExecutionBlockSearchResponse returns a boolean if a field has been set.
func (o *AutoExecuteSearchBlockResponseSchema) HasExecutionBlockSearchResponse() bool {
	if o != nil && o.ExecutionBlockSearchResponse != nil {
		return true
	}

	return false
}

// SetExecutionBlockSearchResponse gets a reference to the given ExecuteSearchBlockResponse and assigns it to the ExecutionBlockSearchResponse field.
func (o *AutoExecuteSearchBlockResponseSchema) SetExecutionBlockSearchResponse(v ExecuteSearchBlockResponse) {
	o.ExecutionBlockSearchResponse = &v
}

// GetPreparationBlockSearchResponse returns the PreparationBlockSearchResponse field value if set, zero value otherwise.
func (o *AutoExecuteSearchBlockResponseSchema) GetPreparationBlockSearchResponse() PrepareSearchResponseSchema {
	if o == nil || o.PreparationBlockSearchResponse == nil {
		var ret PrepareSearchResponseSchema
		return ret
	}
	return *o.PreparationBlockSearchResponse
}

// GetPreparationBlockSearchResponseOk returns a tuple with the PreparationBlockSearchResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoExecuteSearchBlockResponseSchema) GetPreparationBlockSearchResponseOk() (*PrepareSearchResponseSchema, bool) {
	if o == nil || o.PreparationBlockSearchResponse == nil {
		return nil, false
	}
	return o.PreparationBlockSearchResponse, true
}

// HasPreparationBlockSearchResponse returns a boolean if a field has been set.
func (o *AutoExecuteSearchBlockResponseSchema) HasPreparationBlockSearchResponse() bool {
	if o != nil && o.PreparationBlockSearchResponse != nil {
		return true
	}

	return false
}

// SetPreparationBlockSearchResponse gets a reference to the given PrepareSearchResponseSchema and assigns it to the PreparationBlockSearchResponse field.
func (o *AutoExecuteSearchBlockResponseSchema) SetPreparationBlockSearchResponse(v PrepareSearchResponseSchema) {
	o.PreparationBlockSearchResponse = &v
}

func (o AutoExecuteSearchBlockResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrepareAndExecuteOverledgerErrorResponse != nil {
		toSerialize["prepareAndExecuteOverledgerErrorResponse"] = o.PrepareAndExecuteOverledgerErrorResponse
	}
	if o.ExecutionBlockSearchResponse != nil {
		toSerialize["executionBlockSearchResponse"] = o.ExecutionBlockSearchResponse
	}
	if o.PreparationBlockSearchResponse != nil {
		toSerialize["preparationBlockSearchResponse"] = o.PreparationBlockSearchResponse
	}
	return json.Marshal(toSerialize)
}

type NullableAutoExecuteSearchBlockResponseSchema struct {
	value *AutoExecuteSearchBlockResponseSchema
	isSet bool
}

func (v NullableAutoExecuteSearchBlockResponseSchema) Get() *AutoExecuteSearchBlockResponseSchema {
	return v.value
}

func (v *NullableAutoExecuteSearchBlockResponseSchema) Set(val *AutoExecuteSearchBlockResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoExecuteSearchBlockResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoExecuteSearchBlockResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoExecuteSearchBlockResponseSchema(val *AutoExecuteSearchBlockResponseSchema) *NullableAutoExecuteSearchBlockResponseSchema {
	return &NullableAutoExecuteSearchBlockResponseSchema{value: val, isSet: true}
}

func (v NullableAutoExecuteSearchBlockResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoExecuteSearchBlockResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


