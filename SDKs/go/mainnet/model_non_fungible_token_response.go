/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonFungibleTokenResponse struct for NonFungibleTokenResponse
type NonFungibleTokenResponse struct {
	TokenName *string `json:"tokenName,omitempty"`
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	Location *Location `json:"location,omitempty"`
	Functions *[]Function `json:"functions,omitempty"`
	ContractType *string `json:"contractType,omitempty"`
	SmartContractId *string `json:"smartContractId,omitempty"`
}

// NewNonFungibleTokenResponse instantiates a new NonFungibleTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonFungibleTokenResponse() *NonFungibleTokenResponse {
	this := NonFungibleTokenResponse{}
	return &this
}

// NewNonFungibleTokenResponseWithDefaults instantiates a new NonFungibleTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonFungibleTokenResponseWithDefaults() *NonFungibleTokenResponse {
	this := NonFungibleTokenResponse{}
	return &this
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetTokenName() string {
	if o == nil || o.TokenName == nil {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetTokenNameOk() (*string, bool) {
	if o == nil || o.TokenName == nil {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasTokenName() bool {
	if o != nil && o.TokenName != nil {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *NonFungibleTokenResponse) SetTokenName(v string) {
	o.TokenName = &v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || o.DocumentationUrl == nil {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl != nil {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *NonFungibleTokenResponse) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *NonFungibleTokenResponse) SetLocation(v Location) {
	o.Location = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetFunctions() []Function {
	if o == nil || o.Functions == nil {
		var ret []Function
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetFunctionsOk() (*[]Function, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []Function and assigns it to the Functions field.
func (o *NonFungibleTokenResponse) SetFunctions(v []Function) {
	o.Functions = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetContractType() string {
	if o == nil || o.ContractType == nil {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetContractTypeOk() (*string, bool) {
	if o == nil || o.ContractType == nil {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasContractType() bool {
	if o != nil && o.ContractType != nil {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *NonFungibleTokenResponse) SetContractType(v string) {
	o.ContractType = &v
}

// GetSmartContractId returns the SmartContractId field value if set, zero value otherwise.
func (o *NonFungibleTokenResponse) GetSmartContractId() string {
	if o == nil || o.SmartContractId == nil {
		var ret string
		return ret
	}
	return *o.SmartContractId
}

// GetSmartContractIdOk returns a tuple with the SmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonFungibleTokenResponse) GetSmartContractIdOk() (*string, bool) {
	if o == nil || o.SmartContractId == nil {
		return nil, false
	}
	return o.SmartContractId, true
}

// HasSmartContractId returns a boolean if a field has been set.
func (o *NonFungibleTokenResponse) HasSmartContractId() bool {
	if o != nil && o.SmartContractId != nil {
		return true
	}

	return false
}

// SetSmartContractId gets a reference to the given string and assigns it to the SmartContractId field.
func (o *NonFungibleTokenResponse) SetSmartContractId(v string) {
	o.SmartContractId = &v
}

func (o NonFungibleTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenName != nil {
		toSerialize["tokenName"] = o.TokenName
	}
	if o.DocumentationUrl != nil {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.ContractType != nil {
		toSerialize["contractType"] = o.ContractType
	}
	if o.SmartContractId != nil {
		toSerialize["smartContractId"] = o.SmartContractId
	}
	return json.Marshal(toSerialize)
}

type NullableNonFungibleTokenResponse struct {
	value *NonFungibleTokenResponse
	isSet bool
}

func (v NullableNonFungibleTokenResponse) Get() *NonFungibleTokenResponse {
	return v.value
}

func (v *NullableNonFungibleTokenResponse) Set(val *NonFungibleTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNonFungibleTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNonFungibleTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonFungibleTokenResponse(val *NonFungibleTokenResponse) *NullableNonFungibleTokenResponse {
	return &NullableNonFungibleTokenResponse{value: val, isSet: true}
}

func (v NullableNonFungibleTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonFungibleTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


