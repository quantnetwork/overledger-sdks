/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Vout struct for Vout
type Vout struct {
	ScriptPubKey *ScriptPubKey `json:"scriptPubKey,omitempty"`
	Value *float32 `json:"value,omitempty"`
	N *float32 `json:"n,omitempty"`
}

// NewVout instantiates a new Vout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVout() *Vout {
	this := Vout{}
	return &this
}

// NewVoutWithDefaults instantiates a new Vout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoutWithDefaults() *Vout {
	this := Vout{}
	return &this
}

// GetScriptPubKey returns the ScriptPubKey field value if set, zero value otherwise.
func (o *Vout) GetScriptPubKey() ScriptPubKey {
	if o == nil || o.ScriptPubKey == nil {
		var ret ScriptPubKey
		return ret
	}
	return *o.ScriptPubKey
}

// GetScriptPubKeyOk returns a tuple with the ScriptPubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vout) GetScriptPubKeyOk() (*ScriptPubKey, bool) {
	if o == nil || o.ScriptPubKey == nil {
		return nil, false
	}
	return o.ScriptPubKey, true
}

// HasScriptPubKey returns a boolean if a field has been set.
func (o *Vout) HasScriptPubKey() bool {
	if o != nil && o.ScriptPubKey != nil {
		return true
	}

	return false
}

// SetScriptPubKey gets a reference to the given ScriptPubKey and assigns it to the ScriptPubKey field.
func (o *Vout) SetScriptPubKey(v ScriptPubKey) {
	o.ScriptPubKey = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Vout) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vout) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Vout) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *Vout) SetValue(v float32) {
	o.Value = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *Vout) GetN() float32 {
	if o == nil || o.N == nil {
		var ret float32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vout) GetNOk() (*float32, bool) {
	if o == nil || o.N == nil {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *Vout) HasN() bool {
	if o != nil && o.N != nil {
		return true
	}

	return false
}

// SetN gets a reference to the given float32 and assigns it to the N field.
func (o *Vout) SetN(v float32) {
	o.N = &v
}

func (o Vout) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScriptPubKey != nil {
		toSerialize["scriptPubKey"] = o.ScriptPubKey
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.N != nil {
		toSerialize["n"] = o.N
	}
	return json.Marshal(toSerialize)
}

type NullableVout struct {
	value *Vout
	isSet bool
}

func (v NullableVout) Get() *Vout {
	return v.value
}

func (v *NullableVout) Set(val *Vout) {
	v.value = val
	v.isSet = true
}

func (v NullableVout) IsSet() bool {
	return v.isSet
}

func (v *NullableVout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVout(val *Vout) *NullableVout {
	return &NullableVout{value: val, isSet: true}
}

func (v NullableVout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


