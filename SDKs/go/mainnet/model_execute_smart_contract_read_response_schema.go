/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteSmartContractReadResponseSchema struct for ExecuteSmartContractReadResponseSchema
type ExecuteSmartContractReadResponseSchema struct {
	SmartContract *SmartContractReadSchema `json:"smartContract,omitempty"`
	Location *Location `json:"location,omitempty"`
}

// NewExecuteSmartContractReadResponseSchema instantiates a new ExecuteSmartContractReadResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteSmartContractReadResponseSchema() *ExecuteSmartContractReadResponseSchema {
	this := ExecuteSmartContractReadResponseSchema{}
	return &this
}

// NewExecuteSmartContractReadResponseSchemaWithDefaults instantiates a new ExecuteSmartContractReadResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteSmartContractReadResponseSchemaWithDefaults() *ExecuteSmartContractReadResponseSchema {
	this := ExecuteSmartContractReadResponseSchema{}
	return &this
}

// GetSmartContract returns the SmartContract field value if set, zero value otherwise.
func (o *ExecuteSmartContractReadResponseSchema) GetSmartContract() SmartContractReadSchema {
	if o == nil || o.SmartContract == nil {
		var ret SmartContractReadSchema
		return ret
	}
	return *o.SmartContract
}

// GetSmartContractOk returns a tuple with the SmartContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSmartContractReadResponseSchema) GetSmartContractOk() (*SmartContractReadSchema, bool) {
	if o == nil || o.SmartContract == nil {
		return nil, false
	}
	return o.SmartContract, true
}

// HasSmartContract returns a boolean if a field has been set.
func (o *ExecuteSmartContractReadResponseSchema) HasSmartContract() bool {
	if o != nil && o.SmartContract != nil {
		return true
	}

	return false
}

// SetSmartContract gets a reference to the given SmartContractReadSchema and assigns it to the SmartContract field.
func (o *ExecuteSmartContractReadResponseSchema) SetSmartContract(v SmartContractReadSchema) {
	o.SmartContract = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ExecuteSmartContractReadResponseSchema) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSmartContractReadResponseSchema) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ExecuteSmartContractReadResponseSchema) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ExecuteSmartContractReadResponseSchema) SetLocation(v Location) {
	o.Location = &v
}

func (o ExecuteSmartContractReadResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SmartContract != nil {
		toSerialize["smartContract"] = o.SmartContract
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteSmartContractReadResponseSchema struct {
	value *ExecuteSmartContractReadResponseSchema
	isSet bool
}

func (v NullableExecuteSmartContractReadResponseSchema) Get() *ExecuteSmartContractReadResponseSchema {
	return v.value
}

func (v *NullableExecuteSmartContractReadResponseSchema) Set(val *ExecuteSmartContractReadResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteSmartContractReadResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteSmartContractReadResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteSmartContractReadResponseSchema(val *ExecuteSmartContractReadResponseSchema) *NullableExecuteSmartContractReadResponseSchema {
	return &NullableExecuteSmartContractReadResponseSchema{value: val, isSet: true}
}

func (v NullableExecuteSmartContractReadResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteSmartContractReadResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


