/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ResourceMonitoringDetails struct for ResourceMonitoringDetails
type ResourceMonitoringDetails struct {
	ResourceMonitoringId *string `json:"resourceMonitoringId,omitempty"`
	Location *Location `json:"location,omitempty"`
	Type *string `json:"type,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// NewResourceMonitoringDetails instantiates a new ResourceMonitoringDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMonitoringDetails() *ResourceMonitoringDetails {
	this := ResourceMonitoringDetails{}
	return &this
}

// NewResourceMonitoringDetailsWithDefaults instantiates a new ResourceMonitoringDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMonitoringDetailsWithDefaults() *ResourceMonitoringDetails {
	this := ResourceMonitoringDetails{}
	return &this
}

// GetResourceMonitoringId returns the ResourceMonitoringId field value if set, zero value otherwise.
func (o *ResourceMonitoringDetails) GetResourceMonitoringId() string {
	if o == nil || o.ResourceMonitoringId == nil {
		var ret string
		return ret
	}
	return *o.ResourceMonitoringId
}

// GetResourceMonitoringIdOk returns a tuple with the ResourceMonitoringId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringDetails) GetResourceMonitoringIdOk() (*string, bool) {
	if o == nil || o.ResourceMonitoringId == nil {
		return nil, false
	}
	return o.ResourceMonitoringId, true
}

// HasResourceMonitoringId returns a boolean if a field has been set.
func (o *ResourceMonitoringDetails) HasResourceMonitoringId() bool {
	if o != nil && o.ResourceMonitoringId != nil {
		return true
	}

	return false
}

// SetResourceMonitoringId gets a reference to the given string and assigns it to the ResourceMonitoringId field.
func (o *ResourceMonitoringDetails) SetResourceMonitoringId(v string) {
	o.ResourceMonitoringId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ResourceMonitoringDetails) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringDetails) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ResourceMonitoringDetails) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ResourceMonitoringDetails) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceMonitoringDetails) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringDetails) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceMonitoringDetails) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceMonitoringDetails) SetType(v string) {
	o.Type = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ResourceMonitoringDetails) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringDetails) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ResourceMonitoringDetails) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ResourceMonitoringDetails) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResourceMonitoringDetails) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceMonitoringDetails) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResourceMonitoringDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *ResourceMonitoringDetails) SetStatus(v Status) {
	o.Status = &v
}

func (o ResourceMonitoringDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceMonitoringId != nil {
		toSerialize["resourceMonitoringId"] = o.ResourceMonitoringId
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableResourceMonitoringDetails struct {
	value *ResourceMonitoringDetails
	isSet bool
}

func (v NullableResourceMonitoringDetails) Get() *ResourceMonitoringDetails {
	return v.value
}

func (v *NullableResourceMonitoringDetails) Set(val *ResourceMonitoringDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMonitoringDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMonitoringDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMonitoringDetails(val *ResourceMonitoringDetails) *NullableResourceMonitoringDetails {
	return &NullableResourceMonitoringDetails{value: val, isSet: true}
}

func (v NullableResourceMonitoringDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceMonitoringDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


