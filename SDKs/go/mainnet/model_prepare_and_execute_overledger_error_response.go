/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrepareAndExecuteOverledgerErrorResponse struct for PrepareAndExecuteOverledgerErrorResponse
type PrepareAndExecuteOverledgerErrorResponse struct {
	Code *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Category *string `json:"category,omitempty"`
}

// NewPrepareAndExecuteOverledgerErrorResponse instantiates a new PrepareAndExecuteOverledgerErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareAndExecuteOverledgerErrorResponse() *PrepareAndExecuteOverledgerErrorResponse {
	this := PrepareAndExecuteOverledgerErrorResponse{}
	return &this
}

// NewPrepareAndExecuteOverledgerErrorResponseWithDefaults instantiates a new PrepareAndExecuteOverledgerErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareAndExecuteOverledgerErrorResponseWithDefaults() *PrepareAndExecuteOverledgerErrorResponse {
	this := PrepareAndExecuteOverledgerErrorResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PrepareAndExecuteOverledgerErrorResponse) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PrepareAndExecuteOverledgerErrorResponse) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PrepareAndExecuteOverledgerErrorResponse) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *PrepareAndExecuteOverledgerErrorResponse) SetCategory(v string) {
	o.Category = &v
}

func (o PrepareAndExecuteOverledgerErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareAndExecuteOverledgerErrorResponse struct {
	value *PrepareAndExecuteOverledgerErrorResponse
	isSet bool
}

func (v NullablePrepareAndExecuteOverledgerErrorResponse) Get() *PrepareAndExecuteOverledgerErrorResponse {
	return v.value
}

func (v *NullablePrepareAndExecuteOverledgerErrorResponse) Set(val *PrepareAndExecuteOverledgerErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareAndExecuteOverledgerErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareAndExecuteOverledgerErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareAndExecuteOverledgerErrorResponse(val *PrepareAndExecuteOverledgerErrorResponse) *NullablePrepareAndExecuteOverledgerErrorResponse {
	return &NullablePrepareAndExecuteOverledgerErrorResponse{value: val, isSet: true}
}

func (v NullablePrepareAndExecuteOverledgerErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareAndExecuteOverledgerErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


