/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Block struct for Block
type Block struct {
	BlockId *string `json:"blockId,omitempty"`
	Number *int32 `json:"number,omitempty"`
	TransactionIds *[]string `json:"transactionIds,omitempty"`
	Size *[]BlockSize `json:"size,omitempty"`
	Hashes *[]BlockHash `json:"hashes,omitempty"`
	LinkedBlocks *LinkedBlocks `json:"linkedBlocks,omitempty"`
	NumberOfTransactions *int32 `json:"numberOfTransactions,omitempty"`
	Message *string `json:"message,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	NativeData *map[string]interface{} `json:"nativeData,omitempty"`
}

// NewBlock instantiates a new Block object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlock() *Block {
	this := Block{}
	return &this
}

// NewBlockWithDefaults instantiates a new Block object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWithDefaults() *Block {
	this := Block{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *Block) GetBlockId() string {
	if o == nil || o.BlockId == nil {
		var ret string
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetBlockIdOk() (*string, bool) {
	if o == nil || o.BlockId == nil {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *Block) HasBlockId() bool {
	if o != nil && o.BlockId != nil {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given string and assigns it to the BlockId field.
func (o *Block) SetBlockId(v string) {
	o.BlockId = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Block) GetNumber() int32 {
	if o == nil || o.Number == nil {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetNumberOk() (*int32, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Block) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *Block) SetNumber(v int32) {
	o.Number = &v
}

// GetTransactionIds returns the TransactionIds field value if set, zero value otherwise.
func (o *Block) GetTransactionIds() []string {
	if o == nil || o.TransactionIds == nil {
		var ret []string
		return ret
	}
	return *o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetTransactionIdsOk() (*[]string, bool) {
	if o == nil || o.TransactionIds == nil {
		return nil, false
	}
	return o.TransactionIds, true
}

// HasTransactionIds returns a boolean if a field has been set.
func (o *Block) HasTransactionIds() bool {
	if o != nil && o.TransactionIds != nil {
		return true
	}

	return false
}

// SetTransactionIds gets a reference to the given []string and assigns it to the TransactionIds field.
func (o *Block) SetTransactionIds(v []string) {
	o.TransactionIds = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Block) GetSize() []BlockSize {
	if o == nil || o.Size == nil {
		var ret []BlockSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetSizeOk() (*[]BlockSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Block) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given []BlockSize and assigns it to the Size field.
func (o *Block) SetSize(v []BlockSize) {
	o.Size = &v
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *Block) GetHashes() []BlockHash {
	if o == nil || o.Hashes == nil {
		var ret []BlockHash
		return ret
	}
	return *o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHashesOk() (*[]BlockHash, bool) {
	if o == nil || o.Hashes == nil {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *Block) HasHashes() bool {
	if o != nil && o.Hashes != nil {
		return true
	}

	return false
}

// SetHashes gets a reference to the given []BlockHash and assigns it to the Hashes field.
func (o *Block) SetHashes(v []BlockHash) {
	o.Hashes = &v
}

// GetLinkedBlocks returns the LinkedBlocks field value if set, zero value otherwise.
func (o *Block) GetLinkedBlocks() LinkedBlocks {
	if o == nil || o.LinkedBlocks == nil {
		var ret LinkedBlocks
		return ret
	}
	return *o.LinkedBlocks
}

// GetLinkedBlocksOk returns a tuple with the LinkedBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetLinkedBlocksOk() (*LinkedBlocks, bool) {
	if o == nil || o.LinkedBlocks == nil {
		return nil, false
	}
	return o.LinkedBlocks, true
}

// HasLinkedBlocks returns a boolean if a field has been set.
func (o *Block) HasLinkedBlocks() bool {
	if o != nil && o.LinkedBlocks != nil {
		return true
	}

	return false
}

// SetLinkedBlocks gets a reference to the given LinkedBlocks and assigns it to the LinkedBlocks field.
func (o *Block) SetLinkedBlocks(v LinkedBlocks) {
	o.LinkedBlocks = &v
}

// GetNumberOfTransactions returns the NumberOfTransactions field value if set, zero value otherwise.
func (o *Block) GetNumberOfTransactions() int32 {
	if o == nil || o.NumberOfTransactions == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfTransactions
}

// GetNumberOfTransactionsOk returns a tuple with the NumberOfTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetNumberOfTransactionsOk() (*int32, bool) {
	if o == nil || o.NumberOfTransactions == nil {
		return nil, false
	}
	return o.NumberOfTransactions, true
}

// HasNumberOfTransactions returns a boolean if a field has been set.
func (o *Block) HasNumberOfTransactions() bool {
	if o != nil && o.NumberOfTransactions != nil {
		return true
	}

	return false
}

// SetNumberOfTransactions gets a reference to the given int32 and assigns it to the NumberOfTransactions field.
func (o *Block) SetNumberOfTransactions(v int32) {
	o.NumberOfTransactions = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Block) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Block) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Block) SetMessage(v string) {
	o.Message = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Block) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Block) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *Block) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetNativeData returns the NativeData field value if set, zero value otherwise.
func (o *Block) GetNativeData() map[string]interface{} {
	if o == nil || o.NativeData == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NativeData
}

// GetNativeDataOk returns a tuple with the NativeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetNativeDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.NativeData == nil {
		return nil, false
	}
	return o.NativeData, true
}

// HasNativeData returns a boolean if a field has been set.
func (o *Block) HasNativeData() bool {
	if o != nil && o.NativeData != nil {
		return true
	}

	return false
}

// SetNativeData gets a reference to the given map[string]interface{} and assigns it to the NativeData field.
func (o *Block) SetNativeData(v map[string]interface{}) {
	o.NativeData = &v
}

func (o Block) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlockId != nil {
		toSerialize["blockId"] = o.BlockId
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.TransactionIds != nil {
		toSerialize["transactionIds"] = o.TransactionIds
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Hashes != nil {
		toSerialize["hashes"] = o.Hashes
	}
	if o.LinkedBlocks != nil {
		toSerialize["linkedBlocks"] = o.LinkedBlocks
	}
	if o.NumberOfTransactions != nil {
		toSerialize["numberOfTransactions"] = o.NumberOfTransactions
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.NativeData != nil {
		toSerialize["nativeData"] = o.NativeData
	}
	return json.Marshal(toSerialize)
}

type NullableBlock struct {
	value *Block
	isSet bool
}

func (v NullableBlock) Get() *Block {
	return v.value
}

func (v *NullableBlock) Set(val *Block) {
	v.value = val
	v.isSet = true
}

func (v NullableBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlock(val *Block) *NullableBlock {
	return &NullableBlock{value: val, isSet: true}
}

func (v NullableBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


