/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateSmartContractMonitoringSchema struct for CreateSmartContractMonitoringSchema
type CreateSmartContractMonitoringSchema struct {
	ResourceMonitoring *ResourceMonitoringDetails `json:"resourceMonitoring,omitempty"`
	SubscriptionDetails *ResourceMonitoringSubscriptionDetails `json:"subscriptionDetails,omitempty"`
	Subscription *ResourceMonitoringSubscription `json:"subscription,omitempty"`
}

// NewCreateSmartContractMonitoringSchema instantiates a new CreateSmartContractMonitoringSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSmartContractMonitoringSchema() *CreateSmartContractMonitoringSchema {
	this := CreateSmartContractMonitoringSchema{}
	return &this
}

// NewCreateSmartContractMonitoringSchemaWithDefaults instantiates a new CreateSmartContractMonitoringSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSmartContractMonitoringSchemaWithDefaults() *CreateSmartContractMonitoringSchema {
	this := CreateSmartContractMonitoringSchema{}
	return &this
}

// GetResourceMonitoring returns the ResourceMonitoring field value if set, zero value otherwise.
func (o *CreateSmartContractMonitoringSchema) GetResourceMonitoring() ResourceMonitoringDetails {
	if o == nil || o.ResourceMonitoring == nil {
		var ret ResourceMonitoringDetails
		return ret
	}
	return *o.ResourceMonitoring
}

// GetResourceMonitoringOk returns a tuple with the ResourceMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSmartContractMonitoringSchema) GetResourceMonitoringOk() (*ResourceMonitoringDetails, bool) {
	if o == nil || o.ResourceMonitoring == nil {
		return nil, false
	}
	return o.ResourceMonitoring, true
}

// HasResourceMonitoring returns a boolean if a field has been set.
func (o *CreateSmartContractMonitoringSchema) HasResourceMonitoring() bool {
	if o != nil && o.ResourceMonitoring != nil {
		return true
	}

	return false
}

// SetResourceMonitoring gets a reference to the given ResourceMonitoringDetails and assigns it to the ResourceMonitoring field.
func (o *CreateSmartContractMonitoringSchema) SetResourceMonitoring(v ResourceMonitoringDetails) {
	o.ResourceMonitoring = &v
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *CreateSmartContractMonitoringSchema) GetSubscriptionDetails() ResourceMonitoringSubscriptionDetails {
	if o == nil || o.SubscriptionDetails == nil {
		var ret ResourceMonitoringSubscriptionDetails
		return ret
	}
	return *o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSmartContractMonitoringSchema) GetSubscriptionDetailsOk() (*ResourceMonitoringSubscriptionDetails, bool) {
	if o == nil || o.SubscriptionDetails == nil {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *CreateSmartContractMonitoringSchema) HasSubscriptionDetails() bool {
	if o != nil && o.SubscriptionDetails != nil {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given ResourceMonitoringSubscriptionDetails and assigns it to the SubscriptionDetails field.
func (o *CreateSmartContractMonitoringSchema) SetSubscriptionDetails(v ResourceMonitoringSubscriptionDetails) {
	o.SubscriptionDetails = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *CreateSmartContractMonitoringSchema) GetSubscription() ResourceMonitoringSubscription {
	if o == nil || o.Subscription == nil {
		var ret ResourceMonitoringSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSmartContractMonitoringSchema) GetSubscriptionOk() (*ResourceMonitoringSubscription, bool) {
	if o == nil || o.Subscription == nil {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *CreateSmartContractMonitoringSchema) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ResourceMonitoringSubscription and assigns it to the Subscription field.
func (o *CreateSmartContractMonitoringSchema) SetSubscription(v ResourceMonitoringSubscription) {
	o.Subscription = &v
}

func (o CreateSmartContractMonitoringSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceMonitoring != nil {
		toSerialize["resourceMonitoring"] = o.ResourceMonitoring
	}
	if o.SubscriptionDetails != nil {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSmartContractMonitoringSchema struct {
	value *CreateSmartContractMonitoringSchema
	isSet bool
}

func (v NullableCreateSmartContractMonitoringSchema) Get() *CreateSmartContractMonitoringSchema {
	return v.value
}

func (v *NullableCreateSmartContractMonitoringSchema) Set(val *CreateSmartContractMonitoringSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSmartContractMonitoringSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSmartContractMonitoringSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSmartContractMonitoringSchema(val *CreateSmartContractMonitoringSchema) *NullableCreateSmartContractMonitoringSchema {
	return &NullableCreateSmartContractMonitoringSchema{value: val, isSet: true}
}

func (v NullableCreateSmartContractMonitoringSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSmartContractMonitoringSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


