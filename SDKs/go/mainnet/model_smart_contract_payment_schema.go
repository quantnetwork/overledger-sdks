/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractPaymentSchema struct for SmartContractPaymentSchema
type SmartContractPaymentSchema struct {
	Amount *string `json:"amount,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewSmartContractPaymentSchema instantiates a new SmartContractPaymentSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractPaymentSchema() *SmartContractPaymentSchema {
	this := SmartContractPaymentSchema{}
	return &this
}

// NewSmartContractPaymentSchemaWithDefaults instantiates a new SmartContractPaymentSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractPaymentSchemaWithDefaults() *SmartContractPaymentSchema {
	this := SmartContractPaymentSchema{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SmartContractPaymentSchema) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractPaymentSchema) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SmartContractPaymentSchema) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *SmartContractPaymentSchema) SetAmount(v string) {
	o.Amount = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SmartContractPaymentSchema) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractPaymentSchema) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SmartContractPaymentSchema) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *SmartContractPaymentSchema) SetUnit(v string) {
	o.Unit = &v
}

func (o SmartContractPaymentSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractPaymentSchema struct {
	value *SmartContractPaymentSchema
	isSet bool
}

func (v NullableSmartContractPaymentSchema) Get() *SmartContractPaymentSchema {
	return v.value
}

func (v *NullableSmartContractPaymentSchema) Set(val *SmartContractPaymentSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractPaymentSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractPaymentSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractPaymentSchema(val *SmartContractPaymentSchema) *NullableSmartContractPaymentSchema {
	return &NullableSmartContractPaymentSchema{value: val, isSet: true}
}

func (v NullableSmartContractPaymentSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractPaymentSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


