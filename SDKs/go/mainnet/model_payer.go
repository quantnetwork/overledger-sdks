/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Payer Where is this transaction coming from
type Payer struct {
	PayerId *string `json:"payerId,omitempty"`
}

// NewPayer instantiates a new Payer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayer() *Payer {
	this := Payer{}
	return &this
}

// NewPayerWithDefaults instantiates a new Payer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayerWithDefaults() *Payer {
	this := Payer{}
	return &this
}

// GetPayerId returns the PayerId field value if set, zero value otherwise.
func (o *Payer) GetPayerId() string {
	if o == nil || o.PayerId == nil {
		var ret string
		return ret
	}
	return *o.PayerId
}

// GetPayerIdOk returns a tuple with the PayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payer) GetPayerIdOk() (*string, bool) {
	if o == nil || o.PayerId == nil {
		return nil, false
	}
	return o.PayerId, true
}

// HasPayerId returns a boolean if a field has been set.
func (o *Payer) HasPayerId() bool {
	if o != nil && o.PayerId != nil {
		return true
	}

	return false
}

// SetPayerId gets a reference to the given string and assigns it to the PayerId field.
func (o *Payer) SetPayerId(v string) {
	o.PayerId = &v
}

func (o Payer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PayerId != nil {
		toSerialize["payerId"] = o.PayerId
	}
	return json.Marshal(toSerialize)
}

type NullablePayer struct {
	value *Payer
	isSet bool
}

func (v NullablePayer) Get() *Payer {
	return v.value
}

func (v *NullablePayer) Set(val *Payer) {
	v.value = val
	v.isSet = true
}

func (v NullablePayer) IsSet() bool {
	return v.isSet
}

func (v *NullablePayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayer(val *Payer) *NullablePayer {
	return &NullablePayer{value: val, isSet: true}
}

func (v NullablePayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


