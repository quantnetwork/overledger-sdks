/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateWebhookSubscriptionRequestSchema struct for UpdateWebhookSubscriptionRequestSchema
type UpdateWebhookSubscriptionRequestSchema struct {
	StatusUpdate *WebhookStatusUpdateSchema `json:"statusUpdate,omitempty"`
	CallbackUrl *string `json:"callbackUrl,omitempty"`
}

// NewUpdateWebhookSubscriptionRequestSchema instantiates a new UpdateWebhookSubscriptionRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookSubscriptionRequestSchema() *UpdateWebhookSubscriptionRequestSchema {
	this := UpdateWebhookSubscriptionRequestSchema{}
	return &this
}

// NewUpdateWebhookSubscriptionRequestSchemaWithDefaults instantiates a new UpdateWebhookSubscriptionRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookSubscriptionRequestSchemaWithDefaults() *UpdateWebhookSubscriptionRequestSchema {
	this := UpdateWebhookSubscriptionRequestSchema{}
	return &this
}

// GetStatusUpdate returns the StatusUpdate field value if set, zero value otherwise.
func (o *UpdateWebhookSubscriptionRequestSchema) GetStatusUpdate() WebhookStatusUpdateSchema {
	if o == nil || o.StatusUpdate == nil {
		var ret WebhookStatusUpdateSchema
		return ret
	}
	return *o.StatusUpdate
}

// GetStatusUpdateOk returns a tuple with the StatusUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookSubscriptionRequestSchema) GetStatusUpdateOk() (*WebhookStatusUpdateSchema, bool) {
	if o == nil || o.StatusUpdate == nil {
		return nil, false
	}
	return o.StatusUpdate, true
}

// HasStatusUpdate returns a boolean if a field has been set.
func (o *UpdateWebhookSubscriptionRequestSchema) HasStatusUpdate() bool {
	if o != nil && o.StatusUpdate != nil {
		return true
	}

	return false
}

// SetStatusUpdate gets a reference to the given WebhookStatusUpdateSchema and assigns it to the StatusUpdate field.
func (o *UpdateWebhookSubscriptionRequestSchema) SetStatusUpdate(v WebhookStatusUpdateSchema) {
	o.StatusUpdate = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *UpdateWebhookSubscriptionRequestSchema) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookSubscriptionRequestSchema) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *UpdateWebhookSubscriptionRequestSchema) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *UpdateWebhookSubscriptionRequestSchema) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

func (o UpdateWebhookSubscriptionRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StatusUpdate != nil {
		toSerialize["statusUpdate"] = o.StatusUpdate
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateWebhookSubscriptionRequestSchema struct {
	value *UpdateWebhookSubscriptionRequestSchema
	isSet bool
}

func (v NullableUpdateWebhookSubscriptionRequestSchema) Get() *UpdateWebhookSubscriptionRequestSchema {
	return v.value
}

func (v *NullableUpdateWebhookSubscriptionRequestSchema) Set(val *UpdateWebhookSubscriptionRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookSubscriptionRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookSubscriptionRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookSubscriptionRequestSchema(val *UpdateWebhookSubscriptionRequestSchema) *NullableUpdateWebhookSubscriptionRequestSchema {
	return &NullableUpdateWebhookSubscriptionRequestSchema{value: val, isSet: true}
}

func (v NullableUpdateWebhookSubscriptionRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookSubscriptionRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


