/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractTag struct for SmartContractTag
type SmartContractTag struct {
	Name *string `json:"name,omitempty"`
	FunctionName *string `json:"functionName,omitempty"`
	EventName *string `json:"eventName,omitempty"`
}

// NewSmartContractTag instantiates a new SmartContractTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractTag() *SmartContractTag {
	this := SmartContractTag{}
	return &this
}

// NewSmartContractTagWithDefaults instantiates a new SmartContractTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractTagWithDefaults() *SmartContractTag {
	this := SmartContractTag{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartContractTag) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractTag) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartContractTag) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartContractTag) SetName(v string) {
	o.Name = &v
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *SmartContractTag) GetFunctionName() string {
	if o == nil || o.FunctionName == nil {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractTag) GetFunctionNameOk() (*string, bool) {
	if o == nil || o.FunctionName == nil {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *SmartContractTag) HasFunctionName() bool {
	if o != nil && o.FunctionName != nil {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *SmartContractTag) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *SmartContractTag) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractTag) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *SmartContractTag) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *SmartContractTag) SetEventName(v string) {
	o.EventName = &v
}

func (o SmartContractTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.FunctionName != nil {
		toSerialize["functionName"] = o.FunctionName
	}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractTag struct {
	value *SmartContractTag
	isSet bool
}

func (v NullableSmartContractTag) Get() *SmartContractTag {
	return v.value
}

func (v *NullableSmartContractTag) Set(val *SmartContractTag) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractTag) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractTag(val *SmartContractTag) *NullableSmartContractTag {
	return &NullableSmartContractTag{value: val, isSet: true}
}

func (v NullableSmartContractTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


