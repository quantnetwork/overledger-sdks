/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateWebhookSubscriptionRequestSchema struct for CreateWebhookSubscriptionRequestSchema
type CreateWebhookSubscriptionRequestSchema struct {
	Type *string `json:"type,omitempty"`
	Ids *[]string `json:"ids,omitempty"`
	CallbackUrl *string `json:"callbackUrl,omitempty"`
}

// NewCreateWebhookSubscriptionRequestSchema instantiates a new CreateWebhookSubscriptionRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebhookSubscriptionRequestSchema() *CreateWebhookSubscriptionRequestSchema {
	this := CreateWebhookSubscriptionRequestSchema{}
	return &this
}

// NewCreateWebhookSubscriptionRequestSchemaWithDefaults instantiates a new CreateWebhookSubscriptionRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebhookSubscriptionRequestSchemaWithDefaults() *CreateWebhookSubscriptionRequestSchema {
	this := CreateWebhookSubscriptionRequestSchema{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateWebhookSubscriptionRequestSchema) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWebhookSubscriptionRequestSchema) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateWebhookSubscriptionRequestSchema) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateWebhookSubscriptionRequestSchema) SetType(v string) {
	o.Type = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *CreateWebhookSubscriptionRequestSchema) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return *o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWebhookSubscriptionRequestSchema) GetIdsOk() (*[]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *CreateWebhookSubscriptionRequestSchema) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *CreateWebhookSubscriptionRequestSchema) SetIds(v []string) {
	o.Ids = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *CreateWebhookSubscriptionRequestSchema) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWebhookSubscriptionRequestSchema) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateWebhookSubscriptionRequestSchema) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *CreateWebhookSubscriptionRequestSchema) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

func (o CreateWebhookSubscriptionRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	return json.Marshal(toSerialize)
}

type NullableCreateWebhookSubscriptionRequestSchema struct {
	value *CreateWebhookSubscriptionRequestSchema
	isSet bool
}

func (v NullableCreateWebhookSubscriptionRequestSchema) Get() *CreateWebhookSubscriptionRequestSchema {
	return v.value
}

func (v *NullableCreateWebhookSubscriptionRequestSchema) Set(val *CreateWebhookSubscriptionRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebhookSubscriptionRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebhookSubscriptionRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebhookSubscriptionRequestSchema(val *CreateWebhookSubscriptionRequestSchema) *NullableCreateWebhookSubscriptionRequestSchema {
	return &NullableCreateWebhookSubscriptionRequestSchema{value: val, isSet: true}
}

func (v NullableCreateWebhookSubscriptionRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebhookSubscriptionRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


