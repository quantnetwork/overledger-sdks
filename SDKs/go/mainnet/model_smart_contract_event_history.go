/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SmartContractEventHistory struct for SmartContractEventHistory
type SmartContractEventHistory struct {
	EventId *string `json:"eventId,omitempty"`
	EventName *string `json:"eventName,omitempty"`
	EventParameters *string `json:"eventParameters,omitempty"`
	TransactionId *string `json:"transactionId,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewSmartContractEventHistory instantiates a new SmartContractEventHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractEventHistory() *SmartContractEventHistory {
	this := SmartContractEventHistory{}
	return &this
}

// NewSmartContractEventHistoryWithDefaults instantiates a new SmartContractEventHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractEventHistoryWithDefaults() *SmartContractEventHistory {
	this := SmartContractEventHistory{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *SmartContractEventHistory) GetEventId() string {
	if o == nil || o.EventId == nil {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractEventHistory) GetEventIdOk() (*string, bool) {
	if o == nil || o.EventId == nil {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *SmartContractEventHistory) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *SmartContractEventHistory) SetEventId(v string) {
	o.EventId = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *SmartContractEventHistory) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractEventHistory) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *SmartContractEventHistory) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *SmartContractEventHistory) SetEventName(v string) {
	o.EventName = &v
}

// GetEventParameters returns the EventParameters field value if set, zero value otherwise.
func (o *SmartContractEventHistory) GetEventParameters() string {
	if o == nil || o.EventParameters == nil {
		var ret string
		return ret
	}
	return *o.EventParameters
}

// GetEventParametersOk returns a tuple with the EventParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractEventHistory) GetEventParametersOk() (*string, bool) {
	if o == nil || o.EventParameters == nil {
		return nil, false
	}
	return o.EventParameters, true
}

// HasEventParameters returns a boolean if a field has been set.
func (o *SmartContractEventHistory) HasEventParameters() bool {
	if o != nil && o.EventParameters != nil {
		return true
	}

	return false
}

// SetEventParameters gets a reference to the given string and assigns it to the EventParameters field.
func (o *SmartContractEventHistory) SetEventParameters(v string) {
	o.EventParameters = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *SmartContractEventHistory) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractEventHistory) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *SmartContractEventHistory) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *SmartContractEventHistory) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SmartContractEventHistory) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractEventHistory) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SmartContractEventHistory) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *SmartContractEventHistory) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o SmartContractEventHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventId != nil {
		toSerialize["eventId"] = o.EventId
	}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	if o.EventParameters != nil {
		toSerialize["eventParameters"] = o.EventParameters
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractEventHistory struct {
	value *SmartContractEventHistory
	isSet bool
}

func (v NullableSmartContractEventHistory) Get() *SmartContractEventHistory {
	return v.value
}

func (v *NullableSmartContractEventHistory) Set(val *SmartContractEventHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractEventHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractEventHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractEventHistory(val *SmartContractEventHistory) *NullableSmartContractEventHistory {
	return &NullableSmartContractEventHistory{value: val, isSet: true}
}

func (v NullableSmartContractEventHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractEventHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


