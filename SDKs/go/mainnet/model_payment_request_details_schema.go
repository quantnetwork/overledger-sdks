/*
Quant Overledger API

Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PaymentRequestDetailsSchema The payload request
type PaymentRequestDetailsSchema struct {
	// List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
	Destination []DestinationPaymentSchema `json:"destination"`
	// Any text-based element of the data payload
	Message *string `json:"message,omitempty"`
	// The method of signing used to submit the transaction
	OverledgerSigningType *string `json:"overledgerSigningType,omitempty"`
	// List of where this transaction is coming from
	Origin []OriginPaymentSchema `json:"origin"`
}

// NewPaymentRequestDetailsSchema instantiates a new PaymentRequestDetailsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequestDetailsSchema(destination []DestinationPaymentSchema, origin []OriginPaymentSchema) *PaymentRequestDetailsSchema {
	this := PaymentRequestDetailsSchema{}
	this.Destination = destination
	this.Origin = origin
	return &this
}

// NewPaymentRequestDetailsSchemaWithDefaults instantiates a new PaymentRequestDetailsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestDetailsSchemaWithDefaults() *PaymentRequestDetailsSchema {
	this := PaymentRequestDetailsSchema{}
	return &this
}

// GetDestination returns the Destination field value
func (o *PaymentRequestDetailsSchema) GetDestination() []DestinationPaymentSchema {
	if o == nil {
		var ret []DestinationPaymentSchema
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetDestinationOk() (*[]DestinationPaymentSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *PaymentRequestDetailsSchema) SetDestination(v []DestinationPaymentSchema) {
	o.Destination = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PaymentRequestDetailsSchema) SetMessage(v string) {
	o.Message = &v
}

// GetOverledgerSigningType returns the OverledgerSigningType field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetOverledgerSigningType() string {
	if o == nil || o.OverledgerSigningType == nil {
		var ret string
		return ret
	}
	return *o.OverledgerSigningType
}

// GetOverledgerSigningTypeOk returns a tuple with the OverledgerSigningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetOverledgerSigningTypeOk() (*string, bool) {
	if o == nil || o.OverledgerSigningType == nil {
		return nil, false
	}
	return o.OverledgerSigningType, true
}

// HasOverledgerSigningType returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasOverledgerSigningType() bool {
	if o != nil && o.OverledgerSigningType != nil {
		return true
	}

	return false
}

// SetOverledgerSigningType gets a reference to the given string and assigns it to the OverledgerSigningType field.
func (o *PaymentRequestDetailsSchema) SetOverledgerSigningType(v string) {
	o.OverledgerSigningType = &v
}

// GetOrigin returns the Origin field value
func (o *PaymentRequestDetailsSchema) GetOrigin() []OriginPaymentSchema {
	if o == nil {
		var ret []OriginPaymentSchema
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetOriginOk() (*[]OriginPaymentSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *PaymentRequestDetailsSchema) SetOrigin(v []OriginPaymentSchema) {
	o.Origin = v
}

func (o PaymentRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destination"] = o.Destination
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.OverledgerSigningType != nil {
		toSerialize["overledgerSigningType"] = o.OverledgerSigningType
	}
	if true {
		toSerialize["origin"] = o.Origin
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentRequestDetailsSchema struct {
	value *PaymentRequestDetailsSchema
	isSet bool
}

func (v NullablePaymentRequestDetailsSchema) Get() *PaymentRequestDetailsSchema {
	return v.value
}

func (v *NullablePaymentRequestDetailsSchema) Set(val *PaymentRequestDetailsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequestDetailsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequestDetailsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequestDetailsSchema(val *PaymentRequestDetailsSchema) *NullablePaymentRequestDetailsSchema {
	return &NullablePaymentRequestDetailsSchema{value: val, isSet: true}
}

func (v NullablePaymentRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequestDetailsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


