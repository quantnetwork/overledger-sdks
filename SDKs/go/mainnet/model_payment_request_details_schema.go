/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PaymentRequestDetailsSchema struct for PaymentRequestDetailsSchema
type PaymentRequestDetailsSchema struct {
	OverledgerSigningType *string `json:"overledgerSigningType,omitempty"`
	// Where is this transaction coming from
	Origin *[]OriginPaymentSchema `json:"origin,omitempty"`
	// The Destination of this transaction
	Destination *[]DestinationPaymentSchema `json:"destination,omitempty"`
	// Any text-based element of the data payload
	Message *string `json:"message,omitempty"`
}

// NewPaymentRequestDetailsSchema instantiates a new PaymentRequestDetailsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequestDetailsSchema() *PaymentRequestDetailsSchema {
	this := PaymentRequestDetailsSchema{}
	return &this
}

// NewPaymentRequestDetailsSchemaWithDefaults instantiates a new PaymentRequestDetailsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestDetailsSchemaWithDefaults() *PaymentRequestDetailsSchema {
	this := PaymentRequestDetailsSchema{}
	return &this
}

// GetOverledgerSigningType returns the OverledgerSigningType field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetOverledgerSigningType() string {
	if o == nil || o.OverledgerSigningType == nil {
		var ret string
		return ret
	}
	return *o.OverledgerSigningType
}

// GetOverledgerSigningTypeOk returns a tuple with the OverledgerSigningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetOverledgerSigningTypeOk() (*string, bool) {
	if o == nil || o.OverledgerSigningType == nil {
		return nil, false
	}
	return o.OverledgerSigningType, true
}

// HasOverledgerSigningType returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasOverledgerSigningType() bool {
	if o != nil && o.OverledgerSigningType != nil {
		return true
	}

	return false
}

// SetOverledgerSigningType gets a reference to the given string and assigns it to the OverledgerSigningType field.
func (o *PaymentRequestDetailsSchema) SetOverledgerSigningType(v string) {
	o.OverledgerSigningType = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetOrigin() []OriginPaymentSchema {
	if o == nil || o.Origin == nil {
		var ret []OriginPaymentSchema
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetOriginOk() (*[]OriginPaymentSchema, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given []OriginPaymentSchema and assigns it to the Origin field.
func (o *PaymentRequestDetailsSchema) SetOrigin(v []OriginPaymentSchema) {
	o.Origin = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetDestination() []DestinationPaymentSchema {
	if o == nil || o.Destination == nil {
		var ret []DestinationPaymentSchema
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetDestinationOk() (*[]DestinationPaymentSchema, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []DestinationPaymentSchema and assigns it to the Destination field.
func (o *PaymentRequestDetailsSchema) SetDestination(v []DestinationPaymentSchema) {
	o.Destination = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PaymentRequestDetailsSchema) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestDetailsSchema) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PaymentRequestDetailsSchema) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PaymentRequestDetailsSchema) SetMessage(v string) {
	o.Message = &v
}

func (o PaymentRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OverledgerSigningType != nil {
		toSerialize["overledgerSigningType"] = o.OverledgerSigningType
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentRequestDetailsSchema struct {
	value *PaymentRequestDetailsSchema
	isSet bool
}

func (v NullablePaymentRequestDetailsSchema) Get() *PaymentRequestDetailsSchema {
	return v.value
}

func (v *NullablePaymentRequestDetailsSchema) Set(val *PaymentRequestDetailsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequestDetailsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequestDetailsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequestDetailsSchema(val *PaymentRequestDetailsSchema) *NullablePaymentRequestDetailsSchema {
	return &NullablePaymentRequestDetailsSchema{value: val, isSet: true}
}

func (v NullablePaymentRequestDetailsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequestDetailsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


