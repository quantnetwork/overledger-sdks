/*
Quant Overledger API

Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrepareTransactionSmartContractInvokeRequestSchema struct for PrepareTransactionSmartContractInvokeRequestSchema
type PrepareTransactionSmartContractInvokeRequestSchema struct {
	Urgency *string `json:"urgency,omitempty"`
	RequestDetails *SmartContractInvokeRequestDetailsSchema `json:"requestDetails,omitempty"`
	Location *Location `json:"location,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewPrepareTransactionSmartContractInvokeRequestSchema instantiates a new PrepareTransactionSmartContractInvokeRequestSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareTransactionSmartContractInvokeRequestSchema() *PrepareTransactionSmartContractInvokeRequestSchema {
	this := PrepareTransactionSmartContractInvokeRequestSchema{}
	return &this
}

// NewPrepareTransactionSmartContractInvokeRequestSchemaWithDefaults instantiates a new PrepareTransactionSmartContractInvokeRequestSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareTransactionSmartContractInvokeRequestSchemaWithDefaults() *PrepareTransactionSmartContractInvokeRequestSchema {
	this := PrepareTransactionSmartContractInvokeRequestSchema{}
	return &this
}

// GetUrgency returns the Urgency field value if set, zero value otherwise.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetUrgency() string {
	if o == nil || o.Urgency == nil {
		var ret string
		return ret
	}
	return *o.Urgency
}

// GetUrgencyOk returns a tuple with the Urgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetUrgencyOk() (*string, bool) {
	if o == nil || o.Urgency == nil {
		return nil, false
	}
	return o.Urgency, true
}

// HasUrgency returns a boolean if a field has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) HasUrgency() bool {
	if o != nil && o.Urgency != nil {
		return true
	}

	return false
}

// SetUrgency gets a reference to the given string and assigns it to the Urgency field.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) SetUrgency(v string) {
	o.Urgency = &v
}

// GetRequestDetails returns the RequestDetails field value if set, zero value otherwise.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetRequestDetails() SmartContractInvokeRequestDetailsSchema {
	if o == nil || o.RequestDetails == nil {
		var ret SmartContractInvokeRequestDetailsSchema
		return ret
	}
	return *o.RequestDetails
}

// GetRequestDetailsOk returns a tuple with the RequestDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetRequestDetailsOk() (*SmartContractInvokeRequestDetailsSchema, bool) {
	if o == nil || o.RequestDetails == nil {
		return nil, false
	}
	return o.RequestDetails, true
}

// HasRequestDetails returns a boolean if a field has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) HasRequestDetails() bool {
	if o != nil && o.RequestDetails != nil {
		return true
	}

	return false
}

// SetRequestDetails gets a reference to the given SmartContractInvokeRequestDetailsSchema and assigns it to the RequestDetails field.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) SetRequestDetails(v SmartContractInvokeRequestDetailsSchema) {
	o.RequestDetails = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PrepareTransactionSmartContractInvokeRequestSchema) SetType(v string) {
	o.Type = &v
}

func (o PrepareTransactionSmartContractInvokeRequestSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Urgency != nil {
		toSerialize["urgency"] = o.Urgency
	}
	if o.RequestDetails != nil {
		toSerialize["requestDetails"] = o.RequestDetails
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePrepareTransactionSmartContractInvokeRequestSchema struct {
	value *PrepareTransactionSmartContractInvokeRequestSchema
	isSet bool
}

func (v NullablePrepareTransactionSmartContractInvokeRequestSchema) Get() *PrepareTransactionSmartContractInvokeRequestSchema {
	return v.value
}

func (v *NullablePrepareTransactionSmartContractInvokeRequestSchema) Set(val *PrepareTransactionSmartContractInvokeRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareTransactionSmartContractInvokeRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareTransactionSmartContractInvokeRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareTransactionSmartContractInvokeRequestSchema(val *PrepareTransactionSmartContractInvokeRequestSchema) *NullablePrepareTransactionSmartContractInvokeRequestSchema {
	return &NullablePrepareTransactionSmartContractInvokeRequestSchema{value: val, isSet: true}
}

func (v NullablePrepareTransactionSmartContractInvokeRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareTransactionSmartContractInvokeRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


