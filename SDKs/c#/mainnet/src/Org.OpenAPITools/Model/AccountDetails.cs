/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Account Details of the tokens
    /// </summary>
    [DataContract]
    public partial class AccountDetails :  IEquatable<AccountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetails" /> class.
        /// </summary>
        /// <param name="parentAccountId">parentAccountId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="unit">unit.</param>
        /// <param name="owningInstitutionId">owningInstitutionId.</param>
        /// <param name="accountType">accountType.</param>
        public AccountDetails(string parentAccountId = default(string), string accountId = default(string), string unit = default(string), string owningInstitutionId = default(string), string accountType = default(string))
        {
            this.ParentAccountId = parentAccountId;
            this.AccountId = accountId;
            this.Unit = unit;
            this.OwningInstitutionId = owningInstitutionId;
            this.AccountType = accountType;
        }

        /// <summary>
        /// Gets or Sets ParentAccountId
        /// </summary>
        [DataMember(Name="parentAccountId", EmitDefaultValue=false)]
        public string ParentAccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets OwningInstitutionId
        /// </summary>
        [DataMember(Name="owningInstitutionId", EmitDefaultValue=false)]
        public string OwningInstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetails {\n");
            sb.Append("  ParentAccountId: ").Append(ParentAccountId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  OwningInstitutionId: ").Append(OwningInstitutionId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetails);
        }

        /// <summary>
        /// Returns true if AccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParentAccountId == input.ParentAccountId ||
                    (this.ParentAccountId != null &&
                    this.ParentAccountId.Equals(input.ParentAccountId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.OwningInstitutionId == input.OwningInstitutionId ||
                    (this.OwningInstitutionId != null &&
                    this.OwningInstitutionId.Equals(input.OwningInstitutionId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParentAccountId != null)
                    hashCode = hashCode * 59 + this.ParentAccountId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.OwningInstitutionId != null)
                    hashCode = hashCode * 59 + this.OwningInstitutionId.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ParentAccountId (string) maxLength
            if(this.ParentAccountId != null && this.ParentAccountId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentAccountId, length must be less than 500.", new [] { "ParentAccountId" });
            }

            // ParentAccountId (string) minLength
            if(this.ParentAccountId != null && this.ParentAccountId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentAccountId, length must be greater than 0.", new [] { "ParentAccountId" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 500.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 0.", new [] { "AccountId" });
            }

            // Unit (string) maxLength
            if(this.Unit != null && this.Unit.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be less than 11.", new [] { "Unit" });
            }

            // Unit (string) minLength
            if(this.Unit != null && this.Unit.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be greater than 0.", new [] { "Unit" });
            }

            // OwningInstitutionId (string) maxLength
            if(this.OwningInstitutionId != null && this.OwningInstitutionId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwningInstitutionId, length must be less than 500.", new [] { "OwningInstitutionId" });
            }

            // OwningInstitutionId (string) minLength
            if(this.OwningInstitutionId != null && this.OwningInstitutionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwningInstitutionId, length must be greater than 0.", new [] { "OwningInstitutionId" });
            }

            // AccountType (string) maxLength
            if(this.AccountType != null && this.AccountType.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be less than 10.", new [] { "AccountType" });
            }

            // AccountType (string) minLength
            if(this.AccountType != null && this.AccountType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be greater than 0.", new [] { "AccountType" });
            }

            // AccountType (string) pattern
            Regex regexAccountType = new Regex(@"^[a-zA-Z]{1,10}$", RegexOptions.CultureInvariant);
            if (false == regexAccountType.Match(this.AccountType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, must match a pattern of " + regexAccountType, new [] { "AccountType" });
            }

            yield break;
        }
    }

}
