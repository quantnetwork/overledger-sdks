/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Computer program storage in a DLT system where the outcome is recorded on the distributed ledger
    /// </summary>
    [DataContract]
    public partial class SmartContract :  IEquatable<SmartContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartContract" /> class.
        /// </summary>
        /// <param name="detail">detail.</param>
        /// <param name="type">Information on the object type.</param>
        /// <param name="smartContractId">smartContractId.</param>
        /// <param name="function">function.</param>
        /// <param name="extraFields">extraFields.</param>
        public SmartContract(string detail = default(string), string type = default(string), string smartContractId = default(string), Function function = default(Function), Object extraFields = default(Object))
        {
            this.Detail = detail;
            this.Type = type;
            this.SmartContractId = smartContractId;
            this.Function = function;
            this.ExtraFields = extraFields;
        }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// Information on the object type
        /// </summary>
        /// <value>Information on the object type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SmartContractId
        /// </summary>
        [DataMember(Name="smartContractId", EmitDefaultValue=false)]
        public string SmartContractId { get; set; }

        /// <summary>
        /// Gets or Sets Function
        /// </summary>
        [DataMember(Name="function", EmitDefaultValue=false)]
        public Function Function { get; set; }

        /// <summary>
        /// Gets or Sets ExtraFields
        /// </summary>
        [DataMember(Name="extraFields", EmitDefaultValue=false)]
        public Object ExtraFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmartContract {\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SmartContractId: ").Append(SmartContractId).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("  ExtraFields: ").Append(ExtraFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmartContract);
        }

        /// <summary>
        /// Returns true if SmartContract instances are equal
        /// </summary>
        /// <param name="input">Instance of SmartContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmartContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SmartContractId == input.SmartContractId ||
                    (this.SmartContractId != null &&
                    this.SmartContractId.Equals(input.SmartContractId))
                ) && 
                (
                    this.Function == input.Function ||
                    (this.Function != null &&
                    this.Function.Equals(input.Function))
                ) && 
                (
                    this.ExtraFields == input.ExtraFields ||
                    (this.ExtraFields != null &&
                    this.ExtraFields.Equals(input.ExtraFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SmartContractId != null)
                    hashCode = hashCode * 59 + this.SmartContractId.GetHashCode();
                if (this.Function != null)
                    hashCode = hashCode * 59 + this.Function.GetHashCode();
                if (this.ExtraFields != null)
                    hashCode = hashCode * 59 + this.ExtraFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Detail (string) maxLength
            if(this.Detail != null && this.Detail.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Detail, length must be less than 20.", new [] { "Detail" });
            }

            // Detail (string) minLength
            if(this.Detail != null && this.Detail.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Detail, length must be greater than 0.", new [] { "Detail" });
            }

            // Detail (string) pattern
            Regex regexDetail = new Regex(@"^[A-Za-z0-9]{1,20}$", RegexOptions.CultureInvariant);
            if (false == regexDetail.Match(this.Detail).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Detail, must match a pattern of " + regexDetail, new [] { "Detail" });
            }

            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 20.", new [] { "Type" });
            }

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 0.", new [] { "Type" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^[A-Za-z0-9]{1,20}$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // SmartContractId (string) maxLength
            if(this.SmartContractId != null && this.SmartContractId.Length > 44)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmartContractId, length must be less than 44.", new [] { "SmartContractId" });
            }

            // SmartContractId (string) minLength
            if(this.SmartContractId != null && this.SmartContractId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmartContractId, length must be greater than 0.", new [] { "SmartContractId" });
            }

            yield break;
        }
    }

}
