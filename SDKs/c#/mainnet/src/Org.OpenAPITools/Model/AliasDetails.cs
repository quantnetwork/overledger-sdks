/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Alias Details of an account
    /// </summary>
    [DataContract]
    public partial class AliasDetails :  IEquatable<AliasDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasDetails" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="unit">unit.</param>
        /// <param name="disposableAlias">disposableAlias.</param>
        /// <param name="aliasHash">aliasHash.</param>
        /// <param name="aliasType">aliasType.</param>
        /// <param name="esipId">esipId.</param>
        public AliasDetails(string accountId = default(string), string unit = default(string), bool disposableAlias = default(bool), string aliasHash = default(string), string aliasType = default(string), string esipId = default(string))
        {
            this.AccountId = accountId;
            this.Unit = unit;
            this.DisposableAlias = disposableAlias;
            this.AliasHash = aliasHash;
            this.AliasType = aliasType;
            this.EsipId = esipId;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets DisposableAlias
        /// </summary>
        [DataMember(Name="disposableAlias", EmitDefaultValue=false)]
        public bool DisposableAlias { get; set; }

        /// <summary>
        /// Gets or Sets AliasHash
        /// </summary>
        [DataMember(Name="aliasHash", EmitDefaultValue=false)]
        public string AliasHash { get; set; }

        /// <summary>
        /// Gets or Sets AliasType
        /// </summary>
        [DataMember(Name="aliasType", EmitDefaultValue=false)]
        public string AliasType { get; set; }

        /// <summary>
        /// Gets or Sets EsipId
        /// </summary>
        [DataMember(Name="esipId", EmitDefaultValue=false)]
        public string EsipId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AliasDetails {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  DisposableAlias: ").Append(DisposableAlias).Append("\n");
            sb.Append("  AliasHash: ").Append(AliasHash).Append("\n");
            sb.Append("  AliasType: ").Append(AliasType).Append("\n");
            sb.Append("  EsipId: ").Append(EsipId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AliasDetails);
        }

        /// <summary>
        /// Returns true if AliasDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AliasDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AliasDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.DisposableAlias == input.DisposableAlias ||
                    (this.DisposableAlias != null &&
                    this.DisposableAlias.Equals(input.DisposableAlias))
                ) && 
                (
                    this.AliasHash == input.AliasHash ||
                    (this.AliasHash != null &&
                    this.AliasHash.Equals(input.AliasHash))
                ) && 
                (
                    this.AliasType == input.AliasType ||
                    (this.AliasType != null &&
                    this.AliasType.Equals(input.AliasType))
                ) && 
                (
                    this.EsipId == input.EsipId ||
                    (this.EsipId != null &&
                    this.EsipId.Equals(input.EsipId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.DisposableAlias != null)
                    hashCode = hashCode * 59 + this.DisposableAlias.GetHashCode();
                if (this.AliasHash != null)
                    hashCode = hashCode * 59 + this.AliasHash.GetHashCode();
                if (this.AliasType != null)
                    hashCode = hashCode * 59 + this.AliasType.GetHashCode();
                if (this.EsipId != null)
                    hashCode = hashCode * 59 + this.EsipId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 500.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 0.", new [] { "AccountId" });
            }

            // Unit (string) maxLength
            if(this.Unit != null && this.Unit.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be less than 11.", new [] { "Unit" });
            }

            // Unit (string) minLength
            if(this.Unit != null && this.Unit.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be greater than 0.", new [] { "Unit" });
            }

            // AliasHash (string) maxLength
            if(this.AliasHash != null && this.AliasHash.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AliasHash, length must be less than 500.", new [] { "AliasHash" });
            }

            // AliasHash (string) minLength
            if(this.AliasHash != null && this.AliasHash.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AliasHash, length must be greater than 0.", new [] { "AliasHash" });
            }

            // AliasType (string) maxLength
            if(this.AliasType != null && this.AliasType.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AliasType, length must be less than 50.", new [] { "AliasType" });
            }

            // AliasType (string) minLength
            if(this.AliasType != null && this.AliasType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AliasType, length must be greater than 0.", new [] { "AliasType" });
            }

            // EsipId (string) maxLength
            if(this.EsipId != null && this.EsipId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EsipId, length must be less than 500.", new [] { "EsipId" });
            }

            // EsipId (string) minLength
            if(this.EsipId != null && this.EsipId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EsipId, length must be greater than 0.", new [] { "EsipId" });
            }

            yield break;
        }
    }

}
