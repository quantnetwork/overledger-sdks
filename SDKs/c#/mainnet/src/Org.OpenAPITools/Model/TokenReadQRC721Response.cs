/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TokenReadQRC721Response
    /// </summary>
    [DataContract]
    public partial class TokenReadQRC721Response :  IEquatable<TokenReadQRC721Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenReadQRC721Response" /> class.
        /// </summary>
        /// <param name="tokenName">Name of the token.</param>
        /// <param name="responseDetails">responseDetails.</param>
        /// <param name="location">location.</param>
        /// <param name="requestId">The ID assigned to a preparation request in Overledger.</param>
        public TokenReadQRC721Response(string tokenName = default(string), TokenReadResponseDetails responseDetails = default(TokenReadResponseDetails), Location location = default(Location), string requestId = default(string))
        {
            this.TokenName = tokenName;
            this.ResponseDetails = responseDetails;
            this.Location = location;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Name of the token
        /// </summary>
        /// <value>Name of the token</value>
        [DataMember(Name="tokenName", EmitDefaultValue=false)]
        public string TokenName { get; set; }

        /// <summary>
        /// Gets or Sets ResponseDetails
        /// </summary>
        [DataMember(Name="responseDetails", EmitDefaultValue=false)]
        public TokenReadResponseDetails ResponseDetails { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// The ID assigned to a preparation request in Overledger
        /// </summary>
        /// <value>The ID assigned to a preparation request in Overledger</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenReadQRC721Response {\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  ResponseDetails: ").Append(ResponseDetails).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenReadQRC721Response);
        }

        /// <summary>
        /// Returns true if TokenReadQRC721Response instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenReadQRC721Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenReadQRC721Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.ResponseDetails == input.ResponseDetails ||
                    (this.ResponseDetails != null &&
                    this.ResponseDetails.Equals(input.ResponseDetails))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                if (this.ResponseDetails != null)
                    hashCode = hashCode * 59 + this.ResponseDetails.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TokenName (string) maxLength
            if(this.TokenName != null && this.TokenName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be less than 100.", new [] { "TokenName" });
            }

            // TokenName (string) minLength
            if(this.TokenName != null && this.TokenName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be greater than 0.", new [] { "TokenName" });
            }

            // TokenName (string) pattern
            Regex regexTokenName = new Regex(@"^[A-Za-z0-9 ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexTokenName.Match(this.TokenName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, must match a pattern of " + regexTokenName, new [] { "TokenName" });
            }

            // RequestId (string) maxLength
            if(this.RequestId != null && this.RequestId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 36.", new [] { "RequestId" });
            }

            // RequestId (string) minLength
            if(this.RequestId != null && this.RequestId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be greater than 0.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            yield break;
        }
    }

}
