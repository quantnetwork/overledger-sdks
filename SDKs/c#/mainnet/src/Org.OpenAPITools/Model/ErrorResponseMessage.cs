/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ErrorResponseMessage
    /// </summary>
    [DataContract]
    public partial class ErrorResponseMessage :  IEquatable<ErrorResponseMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponseMessage" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="errorMessageExtraDetails">errorMessageExtraDetails.</param>
        /// <param name="subCode">subCode.</param>
        /// <param name="logTraceId">logTraceId.</param>
        /// <param name="type">type.</param>
        /// <param name="title">title.</param>
        /// <param name="message">message.</param>
        public ErrorResponseMessage(int code = default(int), Object errorMessageExtraDetails = default(Object), int subCode = default(int), string logTraceId = default(string), string type = default(string), string title = default(string), string message = default(string))
        {
            this.Code = code;
            this.ErrorMessageExtraDetails = errorMessageExtraDetails;
            this.SubCode = subCode;
            this.LogTraceId = logTraceId;
            this.Type = type;
            this.Title = title;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int Code { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessageExtraDetails
        /// </summary>
        [DataMember(Name="errorMessageExtraDetails", EmitDefaultValue=false)]
        public Object ErrorMessageExtraDetails { get; set; }

        /// <summary>
        /// Gets or Sets SubCode
        /// </summary>
        [DataMember(Name="subCode", EmitDefaultValue=false)]
        public int SubCode { get; set; }

        /// <summary>
        /// Gets or Sets LogTraceId
        /// </summary>
        [DataMember(Name="logTraceId", EmitDefaultValue=false)]
        public string LogTraceId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorResponseMessage {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ErrorMessageExtraDetails: ").Append(ErrorMessageExtraDetails).Append("\n");
            sb.Append("  SubCode: ").Append(SubCode).Append("\n");
            sb.Append("  LogTraceId: ").Append(LogTraceId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorResponseMessage);
        }

        /// <summary>
        /// Returns true if ErrorResponseMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorResponseMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorResponseMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ErrorMessageExtraDetails == input.ErrorMessageExtraDetails ||
                    (this.ErrorMessageExtraDetails != null &&
                    this.ErrorMessageExtraDetails.Equals(input.ErrorMessageExtraDetails))
                ) && 
                (
                    this.SubCode == input.SubCode ||
                    (this.SubCode != null &&
                    this.SubCode.Equals(input.SubCode))
                ) && 
                (
                    this.LogTraceId == input.LogTraceId ||
                    (this.LogTraceId != null &&
                    this.LogTraceId.Equals(input.LogTraceId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ErrorMessageExtraDetails != null)
                    hashCode = hashCode * 59 + this.ErrorMessageExtraDetails.GetHashCode();
                if (this.SubCode != null)
                    hashCode = hashCode * 59 + this.SubCode.GetHashCode();
                if (this.LogTraceId != null)
                    hashCode = hashCode * 59 + this.LogTraceId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
