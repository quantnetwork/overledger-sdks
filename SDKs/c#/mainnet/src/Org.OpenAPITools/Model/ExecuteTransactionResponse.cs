/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExecuteTransactionResponse
    /// </summary>
    [DataContract]
    public partial class ExecuteTransactionResponse :  IEquatable<ExecuteTransactionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteTransactionResponse" /> class.
        /// </summary>
        /// <param name="urgency">urgency.</param>
        /// <param name="requestId">The ID assigned to a preparation request in Overledger.</param>
        /// <param name="overledgerTransactionId">overledgerTransactionId.</param>
        /// <param name="location">location.</param>
        /// <param name="type">The type of the transaction executed.</param>
        /// <param name="transactionId">The ID assigned by Overledger to a transaction submitted to a DLT via Overledger.</param>
        /// <param name="status">status.</param>
        public ExecuteTransactionResponse(string urgency = default(string), string requestId = default(string), string overledgerTransactionId = default(string), Location location = default(Location), string type = default(string), string transactionId = default(string), Status status = default(Status))
        {
            this.Urgency = urgency;
            this.RequestId = requestId;
            this.OverledgerTransactionId = overledgerTransactionId;
            this.Location = location;
            this.Type = type;
            this.TransactionId = transactionId;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Urgency
        /// </summary>
        [DataMember(Name="urgency", EmitDefaultValue=false)]
        public string Urgency { get; set; }

        /// <summary>
        /// The ID assigned to a preparation request in Overledger
        /// </summary>
        /// <value>The ID assigned to a preparation request in Overledger</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets OverledgerTransactionId
        /// </summary>
        [DataMember(Name="overledgerTransactionId", EmitDefaultValue=false)]
        public string OverledgerTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// The type of the transaction executed
        /// </summary>
        /// <value>The type of the transaction executed</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The ID assigned by Overledger to a transaction submitted to a DLT via Overledger
        /// </summary>
        /// <value>The ID assigned by Overledger to a transaction submitted to a DLT via Overledger</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public Status Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecuteTransactionResponse {\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  OverledgerTransactionId: ").Append(OverledgerTransactionId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecuteTransactionResponse);
        }

        /// <summary>
        /// Returns true if ExecuteTransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecuteTransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecuteTransactionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Urgency == input.Urgency ||
                    (this.Urgency != null &&
                    this.Urgency.Equals(input.Urgency))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.OverledgerTransactionId == input.OverledgerTransactionId ||
                    (this.OverledgerTransactionId != null &&
                    this.OverledgerTransactionId.Equals(input.OverledgerTransactionId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Urgency != null)
                    hashCode = hashCode * 59 + this.Urgency.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.OverledgerTransactionId != null)
                    hashCode = hashCode * 59 + this.OverledgerTransactionId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Urgency (string) maxLength
            if(this.Urgency != null && this.Urgency.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Urgency, length must be less than 50.", new [] { "Urgency" });
            }

            // Urgency (string) minLength
            if(this.Urgency != null && this.Urgency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Urgency, length must be greater than 0.", new [] { "Urgency" });
            }

            // Urgency (string) pattern
            Regex regexUrgency = new Regex(@"^[a-zA-Z0-9-_ ]{1,50}$", RegexOptions.CultureInvariant);
            if (false == regexUrgency.Match(this.Urgency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Urgency, must match a pattern of " + regexUrgency, new [] { "Urgency" });
            }

            // RequestId (string) maxLength
            if(this.RequestId != null && this.RequestId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 36.", new [] { "RequestId" });
            }

            // RequestId (string) minLength
            if(this.RequestId != null && this.RequestId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be greater than 0.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // OverledgerTransactionId (string) maxLength
            if(this.OverledgerTransactionId != null && this.OverledgerTransactionId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerTransactionId, length must be less than 36.", new [] { "OverledgerTransactionId" });
            }

            // OverledgerTransactionId (string) minLength
            if(this.OverledgerTransactionId != null && this.OverledgerTransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerTransactionId, length must be greater than 0.", new [] { "OverledgerTransactionId" });
            }

            // OverledgerTransactionId (string) pattern
            Regex regexOverledgerTransactionId = new Regex(@"^[a-zA-Z0-9\\-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexOverledgerTransactionId.Match(this.OverledgerTransactionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerTransactionId, must match a pattern of " + regexOverledgerTransactionId, new [] { "OverledgerTransactionId" });
            }

            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 50.", new [] { "Type" });
            }

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 0.", new [] { "Type" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^[a-zA-Z0-9-_ ]{1,50}$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // TransactionId (string) maxLength
            if(this.TransactionId != null && this.TransactionId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 100.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if(this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // TransactionId (string) pattern
            Regex regexTransactionId = new Regex(@"^[a-zA-Z0-9-]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexTransactionId.Match(this.TransactionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, must match a pattern of " + regexTransactionId, new [] { "TransactionId" });
            }

            yield break;
        }
    }

}
