/*
 * Quant Overledger API
 *
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressSearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>AutoExecuteSearchAddressBalanceResponseSchema</returns>
        AutoExecuteSearchAddressBalanceResponseSchema AutoExecuteSearchAddressBalanceRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of AutoExecuteSearchAddressBalanceResponseSchema</returns>
        ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema> AutoExecuteSearchAddressBalanceRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);
        /// <summary>
        /// Execute a search for an address balance on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ExecuteSearchBalanceResponse</returns>
        ExecuteSearchBalanceResponse ExecutePreparedSearchRequestAddressBalance (string authorization, string requestId);

        /// <summary>
        /// Execute a search for an address balance on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of ExecuteSearchBalanceResponse</returns>
        ApiResponse<ExecuteSearchBalanceResponse> ExecutePreparedSearchRequestAddressBalanceWithHttpInfo (string authorization, string requestId);
        /// <summary>
        /// Execute a search for an address sequence on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ExecuteSearchSequenceResponse</returns>
        ExecuteSearchSequenceResponse ExecutePreparedSearchRequestAddressSequence (string authorization, string requestId);

        /// <summary>
        /// Execute a search for an address sequence on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of ExecuteSearchSequenceResponse</returns>
        ApiResponse<ExecuteSearchSequenceResponse> ExecutePreparedSearchRequestAddressSequenceWithHttpInfo (string authorization, string requestId);
        /// <summary>
        /// Prepare Search for an Address Balance.
        /// </summary>
        /// <remarks>
        /// Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>PrepareSearchResponseSchema</returns>
        PrepareSearchResponseSchema PrepareAddressBalanceSearchRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);

        /// <summary>
        /// Prepare Search for an Address Balance.
        /// </summary>
        /// <remarks>
        /// Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of PrepareSearchResponseSchema</returns>
        ApiResponse<PrepareSearchResponseSchema> PrepareAddressBalanceSearchRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);
        /// <summary>
        /// Prepare Search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>PrepareSearchResponseSchema</returns>
        PrepareSearchResponseSchema PrepareAddressSequenceSearchRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);

        /// <summary>
        /// Prepare Search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of PrepareSearchResponseSchema</returns>
        ApiResponse<PrepareSearchResponseSchema> PrepareAddressSequenceSearchRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);
        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>AutoExecSearchAddressSequenceResponseSchema</returns>
        AutoExecSearchAddressSequenceResponseSchema PrepareAddressSequenceSearchRequest1 (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of AutoExecSearchAddressSequenceResponseSchema</returns>
        ApiResponse<AutoExecSearchAddressSequenceResponseSchema> PrepareAddressSequenceSearchRequest1WithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoExecuteSearchAddressBalanceResponseSchema</returns>
        System.Threading.Tasks.Task<AutoExecuteSearchAddressBalanceResponseSchema> AutoExecuteSearchAddressBalanceRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoExecuteSearchAddressBalanceResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema>> AutoExecuteSearchAddressBalanceRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute a search for an address balance on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExecuteSearchBalanceResponse</returns>
        System.Threading.Tasks.Task<ExecuteSearchBalanceResponse> ExecutePreparedSearchRequestAddressBalanceAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute a search for an address balance on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExecuteSearchBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteSearchBalanceResponse>> ExecutePreparedSearchRequestAddressBalanceWithHttpInfoAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute a search for an address sequence on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExecuteSearchSequenceResponse</returns>
        System.Threading.Tasks.Task<ExecuteSearchSequenceResponse> ExecutePreparedSearchRequestAddressSequenceAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute a search for an address sequence on a DLT
        /// </summary>
        /// <remarks>
        /// Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExecuteSearchSequenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteSearchSequenceResponse>> ExecutePreparedSearchRequestAddressSequenceWithHttpInfoAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Prepare Search for an Address Balance.
        /// </summary>
        /// <remarks>
        /// Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PrepareSearchResponseSchema</returns>
        System.Threading.Tasks.Task<PrepareSearchResponseSchema> PrepareAddressBalanceSearchRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Prepare Search for an Address Balance.
        /// </summary>
        /// <remarks>
        /// Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PrepareSearchResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareSearchResponseSchema>> PrepareAddressBalanceSearchRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Prepare Search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PrepareSearchResponseSchema</returns>
        System.Threading.Tasks.Task<PrepareSearchResponseSchema> PrepareAddressSequenceSearchRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Prepare Search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PrepareSearchResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareSearchResponseSchema>> PrepareAddressSequenceSearchRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoExecSearchAddressSequenceResponseSchema</returns>
        System.Threading.Tasks.Task<AutoExecSearchAddressSequenceResponseSchema> PrepareAddressSequenceSearchRequest1Async (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence.
        /// </summary>
        /// <remarks>
        /// Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoExecSearchAddressSequenceResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoExecSearchAddressSequenceResponseSchema>> PrepareAddressSequenceSearchRequest1WithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressSearchApi : IAddressSearchApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressSearchApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSearchApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddressSearchApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressSearchApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT. Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>AutoExecuteSearchAddressBalanceResponseSchema</returns>
        public AutoExecuteSearchAddressBalanceResponseSchema AutoExecuteSearchAddressBalanceRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
             ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema> localVarResponse = AutoExecuteSearchAddressBalanceRequestWithHttpInfo(authorization, addressId, prepareSearchSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT. Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of AutoExecuteSearchAddressBalanceResponseSchema</returns>
        public ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema> AutoExecuteSearchAddressBalanceRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");

            var localVarPath = "/v2/autoexecution/search/address/balance/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoExecuteSearchAddressBalanceRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoExecuteSearchAddressBalanceResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoExecuteSearchAddressBalanceResponseSchema)));
        }

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT. Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoExecuteSearchAddressBalanceResponseSchema</returns>
        public async System.Threading.Tasks.Task<AutoExecuteSearchAddressBalanceResponseSchema> AutoExecuteSearchAddressBalanceRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema> localVarResponse = await AutoExecuteSearchAddressBalanceRequestWithHttpInfoAsync(authorization, addressId, prepareSearchSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare and automatically execute a search for an address balance on a DLT. Generates a request ID and automatically executes the address balance search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoExecuteSearchAddressBalanceResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema>> AutoExecuteSearchAddressBalanceRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->AutoExecuteSearchAddressBalanceRequest");

            var localVarPath = "/v2/autoexecution/search/address/balance/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoExecuteSearchAddressBalanceRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoExecuteSearchAddressBalanceResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoExecuteSearchAddressBalanceResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoExecuteSearchAddressBalanceResponseSchema)));
        }

        /// <summary>
        /// Execute a search for an address balance on a DLT Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ExecuteSearchBalanceResponse</returns>
        public ExecuteSearchBalanceResponse ExecutePreparedSearchRequestAddressBalance (string authorization, string requestId)
        {
             ApiResponse<ExecuteSearchBalanceResponse> localVarResponse = ExecutePreparedSearchRequestAddressBalanceWithHttpInfo(authorization, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a search for an address balance on a DLT Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of ExecuteSearchBalanceResponse</returns>
        public ApiResponse<ExecuteSearchBalanceResponse> ExecutePreparedSearchRequestAddressBalanceWithHttpInfo (string authorization, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressBalance");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressBalance");

            var localVarPath = "/v2/execution/search/address/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePreparedSearchRequestAddressBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteSearchBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecuteSearchBalanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteSearchBalanceResponse)));
        }

        /// <summary>
        /// Execute a search for an address balance on a DLT Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExecuteSearchBalanceResponse</returns>
        public async System.Threading.Tasks.Task<ExecuteSearchBalanceResponse> ExecutePreparedSearchRequestAddressBalanceAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExecuteSearchBalanceResponse> localVarResponse = await ExecutePreparedSearchRequestAddressBalanceWithHttpInfoAsync(authorization, requestId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute a search for an address balance on a DLT Takes a request ID, searches for the address and retrieves the balance on the requested DLT. This API is only applicable for account based DLTs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExecuteSearchBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteSearchBalanceResponse>> ExecutePreparedSearchRequestAddressBalanceWithHttpInfoAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressBalance");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressBalance");

            var localVarPath = "/v2/execution/search/address/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePreparedSearchRequestAddressBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteSearchBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecuteSearchBalanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteSearchBalanceResponse)));
        }

        /// <summary>
        /// Execute a search for an address sequence on a DLT Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ExecuteSearchSequenceResponse</returns>
        public ExecuteSearchSequenceResponse ExecutePreparedSearchRequestAddressSequence (string authorization, string requestId)
        {
             ApiResponse<ExecuteSearchSequenceResponse> localVarResponse = ExecutePreparedSearchRequestAddressSequenceWithHttpInfo(authorization, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a search for an address sequence on a DLT Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of ExecuteSearchSequenceResponse</returns>
        public ApiResponse<ExecuteSearchSequenceResponse> ExecutePreparedSearchRequestAddressSequenceWithHttpInfo (string authorization, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressSequence");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressSequence");

            var localVarPath = "/v2/execution/search/address/sequence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePreparedSearchRequestAddressSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteSearchSequenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecuteSearchSequenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteSearchSequenceResponse)));
        }

        /// <summary>
        /// Execute a search for an address sequence on a DLT Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExecuteSearchSequenceResponse</returns>
        public async System.Threading.Tasks.Task<ExecuteSearchSequenceResponse> ExecutePreparedSearchRequestAddressSequenceAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExecuteSearchSequenceResponse> localVarResponse = await ExecutePreparedSearchRequestAddressSequenceWithHttpInfoAsync(authorization, requestId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute a search for an address sequence on a DLT Takes a request ID, searches for the address and retrieves the sequence on the requested DLT. This API is only applicable for account based DLT&#39;s
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExecuteSearchSequenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteSearchSequenceResponse>> ExecutePreparedSearchRequestAddressSequenceWithHttpInfoAsync (string authorization, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressSequence");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling AddressSearchApi->ExecutePreparedSearchRequestAddressSequence");

            var localVarPath = "/v2/execution/search/address/sequence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestId", requestId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePreparedSearchRequestAddressSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteSearchSequenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecuteSearchSequenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteSearchSequenceResponse)));
        }

        /// <summary>
        /// Prepare Search for an Address Balance. Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>PrepareSearchResponseSchema</returns>
        public PrepareSearchResponseSchema PrepareAddressBalanceSearchRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
             ApiResponse<PrepareSearchResponseSchema> localVarResponse = PrepareAddressBalanceSearchRequestWithHttpInfo(authorization, addressId, prepareSearchSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare Search for an Address Balance. Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of PrepareSearchResponseSchema</returns>
        public ApiResponse<PrepareSearchResponseSchema> PrepareAddressBalanceSearchRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");

            var localVarPath = "/v2/preparation/search/address/balance/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressBalanceSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareSearchResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareSearchResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareSearchResponseSchema)));
        }

        /// <summary>
        /// Prepare Search for an Address Balance. Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PrepareSearchResponseSchema</returns>
        public async System.Threading.Tasks.Task<PrepareSearchResponseSchema> PrepareAddressBalanceSearchRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PrepareSearchResponseSchema> localVarResponse = await PrepareAddressBalanceSearchRequestWithHttpInfoAsync(authorization, addressId, prepareSearchSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare Search for an Address Balance. Perform an address balance search on the requested DLT. Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PrepareSearchResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrepareSearchResponseSchema>> PrepareAddressBalanceSearchRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressBalanceSearchRequest");

            var localVarPath = "/v2/preparation/search/address/balance/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressBalanceSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareSearchResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareSearchResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareSearchResponseSchema)));
        }

        /// <summary>
        /// Prepare Search for an Address Sequence. Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>PrepareSearchResponseSchema</returns>
        public PrepareSearchResponseSchema PrepareAddressSequenceSearchRequest (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
             ApiResponse<PrepareSearchResponseSchema> localVarResponse = PrepareAddressSequenceSearchRequestWithHttpInfo(authorization, addressId, prepareSearchSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare Search for an Address Sequence. Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of PrepareSearchResponseSchema</returns>
        public ApiResponse<PrepareSearchResponseSchema> PrepareAddressSequenceSearchRequestWithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");

            var localVarPath = "/v2/preparation/search/address/sequence/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressSequenceSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareSearchResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareSearchResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareSearchResponseSchema)));
        }

        /// <summary>
        /// Prepare Search for an Address Sequence. Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PrepareSearchResponseSchema</returns>
        public async System.Threading.Tasks.Task<PrepareSearchResponseSchema> PrepareAddressSequenceSearchRequestAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PrepareSearchResponseSchema> localVarResponse = await PrepareAddressSequenceSearchRequestWithHttpInfoAsync(authorization, addressId, prepareSearchSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare Search for an Address Sequence. Perform an address sequence search on the requested DLT.Returns a request ID to execute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PrepareSearchResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrepareSearchResponseSchema>> PrepareAddressSequenceSearchRequestWithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest");

            var localVarPath = "/v2/preparation/search/address/sequence/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressSequenceSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareSearchResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareSearchResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareSearchResponseSchema)));
        }

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence. Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>AutoExecSearchAddressSequenceResponseSchema</returns>
        public AutoExecSearchAddressSequenceResponseSchema PrepareAddressSequenceSearchRequest1 (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
             ApiResponse<AutoExecSearchAddressSequenceResponseSchema> localVarResponse = PrepareAddressSequenceSearchRequest1WithHttpInfo(authorization, addressId, prepareSearchSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence. Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <returns>ApiResponse of AutoExecSearchAddressSequenceResponseSchema</returns>
        public ApiResponse<AutoExecSearchAddressSequenceResponseSchema> PrepareAddressSequenceSearchRequest1WithHttpInfo (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");

            var localVarPath = "/v2/autoexecution/search/address/sequence/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressSequenceSearchRequest1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoExecSearchAddressSequenceResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoExecSearchAddressSequenceResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoExecSearchAddressSequenceResponseSchema)));
        }

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence. Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoExecSearchAddressSequenceResponseSchema</returns>
        public async System.Threading.Tasks.Task<AutoExecSearchAddressSequenceResponseSchema> PrepareAddressSequenceSearchRequest1Async (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoExecSearchAddressSequenceResponseSchema> localVarResponse = await PrepareAddressSequenceSearchRequest1WithHttpInfoAsync(authorization, addressId, prepareSearchSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare and automatically execute a search for an Address Sequence. Generates a request ID and automatically executes the address sequence search on the requested DLT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="addressId"></param>
        /// <param name="prepareSearchSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoExecSearchAddressSequenceResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoExecSearchAddressSequenceResponseSchema>> PrepareAddressSequenceSearchRequest1WithHttpInfoAsync (string authorization, string addressId, PrepareSearchSchema prepareSearchSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");
            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new ApiException(400, "Missing required parameter 'addressId' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");
            // verify the required parameter 'prepareSearchSchema' is set
            if (prepareSearchSchema == null)
                throw new ApiException(400, "Missing required parameter 'prepareSearchSchema' when calling AddressSearchApi->PrepareAddressSequenceSearchRequest1");

            var localVarPath = "/v2/autoexecution/search/address/sequence/{addressId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressId != null) localVarPathParams.Add("addressId", this.Configuration.ApiClient.ParameterToString(addressId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (prepareSearchSchema != null && prepareSearchSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prepareSearchSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prepareSearchSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareAddressSequenceSearchRequest1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoExecSearchAddressSequenceResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoExecSearchAddressSequenceResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoExecSearchAddressSequenceResponseSchema)));
        }

    }
}
