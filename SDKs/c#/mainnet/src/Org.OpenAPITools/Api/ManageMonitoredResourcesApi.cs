/*
 * Quant Overledger API
 *
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageMonitoredResourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Stop monitoring a smart contract
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>SmartContractMonitoringSchema</returns>
        SmartContractMonitoringSchema DeleteEventMonitoring (string authorization, string resourceMonitoringId);

        /// <summary>
        /// Stop monitoring a smart contract
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of SmartContractMonitoringSchema</returns>
        ApiResponse<SmartContractMonitoringSchema> DeleteEventMonitoringWithHttpInfo (string authorization, string resourceMonitoringId);
        /// <summary>
        /// Stop monitoring an address
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>DeleteResourceMonitoringAddressSchema</returns>
        DeleteResourceMonitoringAddressSchema DeleteResourceMonitoringAddress (string authorization, string resourceMonitoringId);

        /// <summary>
        /// Stop monitoring an address
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of DeleteResourceMonitoringAddressSchema</returns>
        ApiResponse<DeleteResourceMonitoringAddressSchema> DeleteResourceMonitoringAddressWithHttpInfo (string authorization, string resourceMonitoringId);
        /// <summary>
        /// Retrieve a list of addresses being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        List<ResourceMonitoringAddressSchema> GetListOfAddresses (string authorization);

        /// <summary>
        /// Retrieve a list of addresses being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        ApiResponse<List<ResourceMonitoringAddressSchema>> GetListOfAddressesWithHttpInfo (string authorization);
        /// <summary>
        /// Retrieve a list of all resources being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;SmartContractMonitoringSchema&gt;</returns>
        List<SmartContractMonitoringSchema> GetListOfResources (string authorization);

        /// <summary>
        /// Retrieve a list of all resources being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;SmartContractMonitoringSchema&gt;</returns>
        ApiResponse<List<SmartContractMonitoringSchema>> GetListOfResourcesWithHttpInfo (string authorization);
        /// <summary>
        /// Retrieve a list of smart contracts being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;SmartContractMonitoringSchema&gt;</returns>
        List<SmartContractMonitoringSchema> GetListOfSmartContractEvents (string authorization);

        /// <summary>
        /// Retrieve a list of smart contracts being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;SmartContractMonitoringSchema&gt;</returns>
        ApiResponse<List<SmartContractMonitoringSchema>> GetListOfSmartContractEventsWithHttpInfo (string authorization);
        /// <summary>
        /// Retrieve recorded updates for a specific monitored address
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>AddressMonitoringDetailsSchema</returns>
        AddressMonitoringDetailsSchema GetMonitoredAddress (string authorization, string resourceMonitoringId);

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of AddressMonitoringDetailsSchema</returns>
        ApiResponse<AddressMonitoringDetailsSchema> GetMonitoredAddressWithHttpInfo (string authorization, string resourceMonitoringId);
        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>SmartContractMonitoringDetailsSchema</returns>
        SmartContractMonitoringDetailsSchema GetMonitoredSmartContractEventDetails (string authorization, string resourceMonitoringId);

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of SmartContractMonitoringDetailsSchema</returns>
        ApiResponse<SmartContractMonitoringDetailsSchema> GetMonitoredSmartContractEventDetailsWithHttpInfo (string authorization, string resourceMonitoringId);
        /// <summary>
        /// Update the monitoring status of a smart contract
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>SmartContractMonitoringSchema</returns>
        SmartContractMonitoringSchema UpdateEventMonitoring (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema);

        /// <summary>
        /// Update the monitoring status of a smart contract
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>ApiResponse of SmartContractMonitoringSchema</returns>
        ApiResponse<SmartContractMonitoringSchema> UpdateEventMonitoringWithHttpInfo (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema);
        /// <summary>
        /// Update the monitoring status of an address
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>UpdateAddressMonitoringSchema</returns>
        UpdateAddressMonitoringSchema UpdateResourceMonitoringAddress (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema);

        /// <summary>
        /// Update the monitoring status of an address
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>ApiResponse of UpdateAddressMonitoringSchema</returns>
        ApiResponse<UpdateAddressMonitoringSchema> UpdateResourceMonitoringAddressWithHttpInfo (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Stop monitoring a smart contract
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringSchema</returns>
        System.Threading.Tasks.Task<SmartContractMonitoringSchema> DeleteEventMonitoringAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop monitoring a smart contract
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringSchema>> DeleteEventMonitoringWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stop monitoring an address
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteResourceMonitoringAddressSchema</returns>
        System.Threading.Tasks.Task<DeleteResourceMonitoringAddressSchema> DeleteResourceMonitoringAddressAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop monitoring an address
        /// </summary>
        /// <remarks>
        /// Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteResourceMonitoringAddressSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResourceMonitoringAddressSchema>> DeleteResourceMonitoringAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of addresses being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceMonitoringAddressSchema>> GetListOfAddressesAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of addresses being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ResourceMonitoringAddressSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceMonitoringAddressSchema>>> GetListOfAddressesWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of all resources being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SmartContractMonitoringSchema&gt;</returns>
        System.Threading.Tasks.Task<List<SmartContractMonitoringSchema>> GetListOfResourcesAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of all resources being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SmartContractMonitoringSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmartContractMonitoringSchema>>> GetListOfResourcesWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of smart contracts being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SmartContractMonitoringSchema&gt;</returns>
        System.Threading.Tasks.Task<List<SmartContractMonitoringSchema>> GetListOfSmartContractEventsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of smart contracts being monitored
        /// </summary>
        /// <remarks>
        /// Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SmartContractMonitoringSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmartContractMonitoringSchema>>> GetListOfSmartContractEventsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve recorded updates for a specific monitored address
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressMonitoringDetailsSchema</returns>
        System.Threading.Tasks.Task<AddressMonitoringDetailsSchema> GetMonitoredAddressAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressMonitoringDetailsSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressMonitoringDetailsSchema>> GetMonitoredAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringDetailsSchema</returns>
        System.Threading.Tasks.Task<SmartContractMonitoringDetailsSchema> GetMonitoredSmartContractEventDetailsAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract
        /// </summary>
        /// <remarks>
        /// Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringDetailsSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringDetailsSchema>> GetMonitoredSmartContractEventDetailsWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the monitoring status of a smart contract
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringSchema</returns>
        System.Threading.Tasks.Task<SmartContractMonitoringSchema> UpdateEventMonitoringAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the monitoring status of a smart contract
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringSchema>> UpdateEventMonitoringWithHttpInfoAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the monitoring status of an address
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAddressMonitoringSchema</returns>
        System.Threading.Tasks.Task<UpdateAddressMonitoringSchema> UpdateResourceMonitoringAddressAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the monitoring status of an address
        /// </summary>
        /// <remarks>
        /// Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAddressMonitoringSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAddressMonitoringSchema>> UpdateResourceMonitoringAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageMonitoredResourcesApi : IManageMonitoredResourcesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageMonitoredResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageMonitoredResourcesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageMonitoredResourcesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ManageMonitoredResourcesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageMonitoredResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageMonitoredResourcesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Stop monitoring a smart contract Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>SmartContractMonitoringSchema</returns>
        public SmartContractMonitoringSchema DeleteEventMonitoring (string authorization, string resourceMonitoringId)
        {
             ApiResponse<SmartContractMonitoringSchema> localVarResponse = DeleteEventMonitoringWithHttpInfo(authorization, resourceMonitoringId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop monitoring a smart contract Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of SmartContractMonitoringSchema</returns>
        public ApiResponse<SmartContractMonitoringSchema> DeleteEventMonitoringWithHttpInfo (string authorization, string resourceMonitoringId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->DeleteEventMonitoring");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->DeleteEventMonitoring");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringSchema)));
        }

        /// <summary>
        /// Stop monitoring a smart contract Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringSchema</returns>
        public async System.Threading.Tasks.Task<SmartContractMonitoringSchema> DeleteEventMonitoringAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SmartContractMonitoringSchema> localVarResponse = await DeleteEventMonitoringWithHttpInfoAsync(authorization, resourceMonitoringId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop monitoring a smart contract Deletes the tracking record in Overledger to stop Overledger from recording updates for a smart contract based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringSchema>> DeleteEventMonitoringWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->DeleteEventMonitoring");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->DeleteEventMonitoring");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringSchema)));
        }

        /// <summary>
        /// Stop monitoring an address Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>DeleteResourceMonitoringAddressSchema</returns>
        public DeleteResourceMonitoringAddressSchema DeleteResourceMonitoringAddress (string authorization, string resourceMonitoringId)
        {
             ApiResponse<DeleteResourceMonitoringAddressSchema> localVarResponse = DeleteResourceMonitoringAddressWithHttpInfo(authorization, resourceMonitoringId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop monitoring an address Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of DeleteResourceMonitoringAddressSchema</returns>
        public ApiResponse<DeleteResourceMonitoringAddressSchema> DeleteResourceMonitoringAddressWithHttpInfo (string authorization, string resourceMonitoringId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->DeleteResourceMonitoringAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->DeleteResourceMonitoringAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceMonitoringAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResourceMonitoringAddressSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResourceMonitoringAddressSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResourceMonitoringAddressSchema)));
        }

        /// <summary>
        /// Stop monitoring an address Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteResourceMonitoringAddressSchema</returns>
        public async System.Threading.Tasks.Task<DeleteResourceMonitoringAddressSchema> DeleteResourceMonitoringAddressAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteResourceMonitoringAddressSchema> localVarResponse = await DeleteResourceMonitoringAddressWithHttpInfoAsync(authorization, resourceMonitoringId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop monitoring an address Deletes the tracking record in Overledger to stop Overledger from recording updates for an address based on the given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteResourceMonitoringAddressSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResourceMonitoringAddressSchema>> DeleteResourceMonitoringAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->DeleteResourceMonitoringAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->DeleteResourceMonitoringAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceMonitoringAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResourceMonitoringAddressSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResourceMonitoringAddressSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResourceMonitoringAddressSchema)));
        }

        /// <summary>
        /// Retrieve a list of addresses being monitored Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        public List<ResourceMonitoringAddressSchema> GetListOfAddresses (string authorization)
        {
             ApiResponse<List<ResourceMonitoringAddressSchema>> localVarResponse = GetListOfAddressesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of addresses being monitored Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        public ApiResponse<List<ResourceMonitoringAddressSchema>> GetListOfAddressesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfAddresses");

            var localVarPath = "/v2/resourcemonitoring/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceMonitoringAddressSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ResourceMonitoringAddressSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceMonitoringAddressSchema>)));
        }

        /// <summary>
        /// Retrieve a list of addresses being monitored Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ResourceMonitoringAddressSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceMonitoringAddressSchema>> GetListOfAddressesAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ResourceMonitoringAddressSchema>> localVarResponse = await GetListOfAddressesWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of addresses being monitored Returns a list of addresses being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ResourceMonitoringAddressSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceMonitoringAddressSchema>>> GetListOfAddressesWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfAddresses");

            var localVarPath = "/v2/resourcemonitoring/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceMonitoringAddressSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ResourceMonitoringAddressSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceMonitoringAddressSchema>)));
        }

        /// <summary>
        /// Retrieve a list of all resources being monitored Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;SmartContractMonitoringSchema&gt;</returns>
        public List<SmartContractMonitoringSchema> GetListOfResources (string authorization)
        {
             ApiResponse<List<SmartContractMonitoringSchema>> localVarResponse = GetListOfResourcesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all resources being monitored Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;SmartContractMonitoringSchema&gt;</returns>
        public ApiResponse<List<SmartContractMonitoringSchema>> GetListOfResourcesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfResources");

            var localVarPath = "/v2/resourcemonitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmartContractMonitoringSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmartContractMonitoringSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmartContractMonitoringSchema>)));
        }

        /// <summary>
        /// Retrieve a list of all resources being monitored Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SmartContractMonitoringSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmartContractMonitoringSchema>> GetListOfResourcesAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SmartContractMonitoringSchema>> localVarResponse = await GetListOfResourcesWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of all resources being monitored Returns a list of all of the resources being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SmartContractMonitoringSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SmartContractMonitoringSchema>>> GetListOfResourcesWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfResources");

            var localVarPath = "/v2/resourcemonitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmartContractMonitoringSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmartContractMonitoringSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmartContractMonitoringSchema>)));
        }

        /// <summary>
        /// Retrieve a list of smart contracts being monitored Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;SmartContractMonitoringSchema&gt;</returns>
        public List<SmartContractMonitoringSchema> GetListOfSmartContractEvents (string authorization)
        {
             ApiResponse<List<SmartContractMonitoringSchema>> localVarResponse = GetListOfSmartContractEventsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of smart contracts being monitored Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;SmartContractMonitoringSchema&gt;</returns>
        public ApiResponse<List<SmartContractMonitoringSchema>> GetListOfSmartContractEventsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfSmartContractEvents");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfSmartContractEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmartContractMonitoringSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmartContractMonitoringSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmartContractMonitoringSchema>)));
        }

        /// <summary>
        /// Retrieve a list of smart contracts being monitored Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SmartContractMonitoringSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmartContractMonitoringSchema>> GetListOfSmartContractEventsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SmartContractMonitoringSchema>> localVarResponse = await GetListOfSmartContractEventsWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of smart contracts being monitored Returns a list of smart contracts being monitored for your application and the corresponding Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SmartContractMonitoringSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SmartContractMonitoringSchema>>> GetListOfSmartContractEventsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetListOfSmartContractEvents");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfSmartContractEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmartContractMonitoringSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmartContractMonitoringSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmartContractMonitoringSchema>)));
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>AddressMonitoringDetailsSchema</returns>
        public AddressMonitoringDetailsSchema GetMonitoredAddress (string authorization, string resourceMonitoringId)
        {
             ApiResponse<AddressMonitoringDetailsSchema> localVarResponse = GetMonitoredAddressWithHttpInfo(authorization, resourceMonitoringId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of AddressMonitoringDetailsSchema</returns>
        public ApiResponse<AddressMonitoringDetailsSchema> GetMonitoredAddressWithHttpInfo (string authorization, string resourceMonitoringId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetMonitoredAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->GetMonitoredAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMonitoredAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressMonitoringDetailsSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressMonitoringDetailsSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressMonitoringDetailsSchema)));
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressMonitoringDetailsSchema</returns>
        public async System.Threading.Tasks.Task<AddressMonitoringDetailsSchema> GetMonitoredAddressAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressMonitoringDetailsSchema> localVarResponse = await GetMonitoredAddressWithHttpInfoAsync(authorization, resourceMonitoringId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored address Returns the update information recorded in Overledger for an address being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressMonitoringDetailsSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressMonitoringDetailsSchema>> GetMonitoredAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetMonitoredAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->GetMonitoredAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMonitoredAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressMonitoringDetailsSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressMonitoringDetailsSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressMonitoringDetailsSchema)));
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>SmartContractMonitoringDetailsSchema</returns>
        public SmartContractMonitoringDetailsSchema GetMonitoredSmartContractEventDetails (string authorization, string resourceMonitoringId)
        {
             ApiResponse<SmartContractMonitoringDetailsSchema> localVarResponse = GetMonitoredSmartContractEventDetailsWithHttpInfo(authorization, resourceMonitoringId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <returns>ApiResponse of SmartContractMonitoringDetailsSchema</returns>
        public ApiResponse<SmartContractMonitoringDetailsSchema> GetMonitoredSmartContractEventDetailsWithHttpInfo (string authorization, string resourceMonitoringId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetMonitoredSmartContractEventDetails");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->GetMonitoredSmartContractEventDetails");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMonitoredSmartContractEventDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringDetailsSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringDetailsSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringDetailsSchema)));
        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringDetailsSchema</returns>
        public async System.Threading.Tasks.Task<SmartContractMonitoringDetailsSchema> GetMonitoredSmartContractEventDetailsAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SmartContractMonitoringDetailsSchema> localVarResponse = await GetMonitoredSmartContractEventDetailsWithHttpInfoAsync(authorization, resourceMonitoringId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve recorded updates for a specific monitored smart contract Returns the update information recorded in Overledger for asmart contract being monitored by your application for a given Resource Monitoring ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringDetailsSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringDetailsSchema>> GetMonitoredSmartContractEventDetailsWithHttpInfoAsync (string authorization, string resourceMonitoringId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->GetMonitoredSmartContractEventDetails");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->GetMonitoredSmartContractEventDetails");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMonitoredSmartContractEventDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringDetailsSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringDetailsSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringDetailsSchema)));
        }

        /// <summary>
        /// Update the monitoring status of a smart contract Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>SmartContractMonitoringSchema</returns>
        public SmartContractMonitoringSchema UpdateEventMonitoring (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema)
        {
             ApiResponse<SmartContractMonitoringSchema> localVarResponse = UpdateEventMonitoringWithHttpInfo(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the monitoring status of a smart contract Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>ApiResponse of SmartContractMonitoringSchema</returns>
        public ApiResponse<SmartContractMonitoringSchema> UpdateEventMonitoringWithHttpInfo (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");
            // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
            if (statusUpdateMonitoringRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateMonitoringRequestSchema' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (statusUpdateMonitoringRequestSchema != null && statusUpdateMonitoringRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusUpdateMonitoringRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusUpdateMonitoringRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringSchema)));
        }

        /// <summary>
        /// Update the monitoring status of a smart contract Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SmartContractMonitoringSchema</returns>
        public async System.Threading.Tasks.Task<SmartContractMonitoringSchema> UpdateEventMonitoringAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SmartContractMonitoringSchema> localVarResponse = await UpdateEventMonitoringWithHttpInfoAsync(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the monitoring status of a smart contract Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to be inactive will pause Overledger recording updates for the requested smart contract
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SmartContractMonitoringSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmartContractMonitoringSchema>> UpdateEventMonitoringWithHttpInfoAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");
            // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
            if (statusUpdateMonitoringRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateMonitoringRequestSchema' when calling ManageMonitoredResourcesApi->UpdateEventMonitoring");

            var localVarPath = "/v2/resourcemonitoring/smartcontractevent/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (statusUpdateMonitoringRequestSchema != null && statusUpdateMonitoringRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusUpdateMonitoringRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusUpdateMonitoringRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmartContractMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SmartContractMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmartContractMonitoringSchema)));
        }

        /// <summary>
        /// Update the monitoring status of an address Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>UpdateAddressMonitoringSchema</returns>
        public UpdateAddressMonitoringSchema UpdateResourceMonitoringAddress (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema)
        {
             ApiResponse<UpdateAddressMonitoringSchema> localVarResponse = UpdateResourceMonitoringAddressWithHttpInfo(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the monitoring status of an address Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <returns>ApiResponse of UpdateAddressMonitoringSchema</returns>
        public ApiResponse<UpdateAddressMonitoringSchema> UpdateResourceMonitoringAddressWithHttpInfo (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");
            // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
            if (statusUpdateMonitoringRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateMonitoringRequestSchema' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (statusUpdateMonitoringRequestSchema != null && statusUpdateMonitoringRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusUpdateMonitoringRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusUpdateMonitoringRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResourceMonitoringAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAddressMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAddressMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAddressMonitoringSchema)));
        }

        /// <summary>
        /// Update the monitoring status of an address Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAddressMonitoringSchema</returns>
        public async System.Threading.Tasks.Task<UpdateAddressMonitoringSchema> UpdateResourceMonitoringAddressAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAddressMonitoringSchema> localVarResponse = await UpdateResourceMonitoringAddressWithHttpInfoAsync(authorization, resourceMonitoringId, statusUpdateMonitoringRequestSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the monitoring status of an address Updates the resource monitoring status to be either active or inactive for the given Resource Monitoring ID. Updating the status to beinactive will pause Overledger recording updates for the requested address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="resourceMonitoringId"></param>
        /// <param name="statusUpdateMonitoringRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAddressMonitoringSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAddressMonitoringSchema>> UpdateResourceMonitoringAddressWithHttpInfoAsync (string authorization, string resourceMonitoringId, StatusUpdateMonitoringRequestSchema statusUpdateMonitoringRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");
            // verify the required parameter 'resourceMonitoringId' is set
            if (resourceMonitoringId == null)
                throw new ApiException(400, "Missing required parameter 'resourceMonitoringId' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");
            // verify the required parameter 'statusUpdateMonitoringRequestSchema' is set
            if (statusUpdateMonitoringRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'statusUpdateMonitoringRequestSchema' when calling ManageMonitoredResourcesApi->UpdateResourceMonitoringAddress");

            var localVarPath = "/v2/resourcemonitoring/address/{resourceMonitoringId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceMonitoringId != null) localVarPathParams.Add("resourceMonitoringId", this.Configuration.ApiClient.ParameterToString(resourceMonitoringId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (statusUpdateMonitoringRequestSchema != null && statusUpdateMonitoringRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusUpdateMonitoringRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusUpdateMonitoringRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResourceMonitoringAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAddressMonitoringSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAddressMonitoringSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAddressMonitoringSchema)));
        }

    }
}
