/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Lock Details of the tokens
    /// </summary>
    [DataContract]
    public partial class LockDetails :  IEquatable<LockDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LockDetails" /> class.
        /// </summary>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="lockId">lockId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="unit">unit.</param>
        /// <param name="accountOwningInstitutionId">accountOwningInstitutionId.</param>
        /// <param name="lockDescription">lockDescription.</param>
        /// <param name="payeeId">payeeId.</param>
        /// <param name="secret">secret.</param>
        /// <param name="hash">hash.</param>
        /// <param name="payeeOwningInstitutionId">payeeOwningInstitutionId.</param>
        /// <param name="lockOwningInstitutionId">lockOwningInstitutionId.</param>
        public LockDetails(string expiryDate = default(string), Guid lockId = default(Guid), string accountId = default(string), string amount = default(string), string unit = default(string), string accountOwningInstitutionId = default(string), string lockDescription = default(string), string payeeId = default(string), string secret = default(string), string hash = default(string), string payeeOwningInstitutionId = default(string), string lockOwningInstitutionId = default(string))
        {
            this.ExpiryDate = expiryDate;
            this.LockId = lockId;
            this.AccountId = accountId;
            this.Amount = amount;
            this.Unit = unit;
            this.AccountOwningInstitutionId = accountOwningInstitutionId;
            this.LockDescription = lockDescription;
            this.PayeeId = payeeId;
            this.Secret = secret;
            this.Hash = hash;
            this.PayeeOwningInstitutionId = payeeOwningInstitutionId;
            this.LockOwningInstitutionId = lockOwningInstitutionId;
        }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets LockId
        /// </summary>
        [DataMember(Name="lockId", EmitDefaultValue=false)]
        public Guid LockId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets AccountOwningInstitutionId
        /// </summary>
        [DataMember(Name="accountOwningInstitutionId", EmitDefaultValue=false)]
        public string AccountOwningInstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets LockDescription
        /// </summary>
        [DataMember(Name="lockDescription", EmitDefaultValue=false)]
        public string LockDescription { get; set; }

        /// <summary>
        /// Gets or Sets PayeeId
        /// </summary>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets PayeeOwningInstitutionId
        /// </summary>
        [DataMember(Name="payeeOwningInstitutionId", EmitDefaultValue=false)]
        public string PayeeOwningInstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets LockOwningInstitutionId
        /// </summary>
        [DataMember(Name="lockOwningInstitutionId", EmitDefaultValue=false)]
        public string LockOwningInstitutionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LockDetails {\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  LockId: ").Append(LockId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  AccountOwningInstitutionId: ").Append(AccountOwningInstitutionId).Append("\n");
            sb.Append("  LockDescription: ").Append(LockDescription).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  PayeeOwningInstitutionId: ").Append(PayeeOwningInstitutionId).Append("\n");
            sb.Append("  LockOwningInstitutionId: ").Append(LockOwningInstitutionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LockDetails);
        }

        /// <summary>
        /// Returns true if LockDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of LockDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LockDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.LockId == input.LockId ||
                    (this.LockId != null &&
                    this.LockId.Equals(input.LockId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.AccountOwningInstitutionId == input.AccountOwningInstitutionId ||
                    (this.AccountOwningInstitutionId != null &&
                    this.AccountOwningInstitutionId.Equals(input.AccountOwningInstitutionId))
                ) && 
                (
                    this.LockDescription == input.LockDescription ||
                    (this.LockDescription != null &&
                    this.LockDescription.Equals(input.LockDescription))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.PayeeOwningInstitutionId == input.PayeeOwningInstitutionId ||
                    (this.PayeeOwningInstitutionId != null &&
                    this.PayeeOwningInstitutionId.Equals(input.PayeeOwningInstitutionId))
                ) && 
                (
                    this.LockOwningInstitutionId == input.LockOwningInstitutionId ||
                    (this.LockOwningInstitutionId != null &&
                    this.LockOwningInstitutionId.Equals(input.LockOwningInstitutionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.LockId != null)
                    hashCode = hashCode * 59 + this.LockId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.AccountOwningInstitutionId != null)
                    hashCode = hashCode * 59 + this.AccountOwningInstitutionId.GetHashCode();
                if (this.LockDescription != null)
                    hashCode = hashCode * 59 + this.LockDescription.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.PayeeOwningInstitutionId != null)
                    hashCode = hashCode * 59 + this.PayeeOwningInstitutionId.GetHashCode();
                if (this.LockOwningInstitutionId != null)
                    hashCode = hashCode * 59 + this.LockOwningInstitutionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpiryDate (string) maxLength
            if(this.ExpiryDate != null && this.ExpiryDate.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, length must be less than 50.", new [] { "ExpiryDate" });
            }

            // ExpiryDate (string) minLength
            if(this.ExpiryDate != null && this.ExpiryDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, length must be greater than 0.", new [] { "ExpiryDate" });
            }

            // ExpiryDate (string) pattern
            Regex regexExpiryDate = new Regex(@"^[a-zA-Z_0-9.,:\\- ]{1,50}", RegexOptions.CultureInvariant);
            if (false == regexExpiryDate.Match(this.ExpiryDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, must match a pattern of " + regexExpiryDate, new [] { "ExpiryDate" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 500.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 0.", new [] { "AccountId" });
            }

            // Amount (string) maxLength
            if(this.Amount != null && this.Amount.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be less than 100.", new [] { "Amount" });
            }

            // Amount (string) minLength
            if(this.Amount != null && this.Amount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be greater than 0.", new [] { "Amount" });
            }

            // Amount (string) pattern
            Regex regexAmount = new Regex(@"^[A-Za-z0-9. ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexAmount.Match(this.Amount).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must match a pattern of " + regexAmount, new [] { "Amount" });
            }

            // Unit (string) maxLength
            if(this.Unit != null && this.Unit.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be less than 11.", new [] { "Unit" });
            }

            // Unit (string) minLength
            if(this.Unit != null && this.Unit.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be greater than 0.", new [] { "Unit" });
            }

            // AccountOwningInstitutionId (string) maxLength
            if(this.AccountOwningInstitutionId != null && this.AccountOwningInstitutionId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountOwningInstitutionId, length must be less than 500.", new [] { "AccountOwningInstitutionId" });
            }

            // AccountOwningInstitutionId (string) minLength
            if(this.AccountOwningInstitutionId != null && this.AccountOwningInstitutionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountOwningInstitutionId, length must be greater than 0.", new [] { "AccountOwningInstitutionId" });
            }

            // LockDescription (string) maxLength
            if(this.LockDescription != null && this.LockDescription.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LockDescription, length must be less than 400.", new [] { "LockDescription" });
            }

            // LockDescription (string) minLength
            if(this.LockDescription != null && this.LockDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LockDescription, length must be greater than 0.", new [] { "LockDescription" });
            }

            // LockDescription (string) pattern
            Regex regexLockDescription = new Regex(@"^[a-zA-Z_0-9.,\\-() ]{1,400}", RegexOptions.CultureInvariant);
            if (false == regexLockDescription.Match(this.LockDescription).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LockDescription, must match a pattern of " + regexLockDescription, new [] { "LockDescription" });
            }

            // PayeeId (string) maxLength
            if(this.PayeeId != null && this.PayeeId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeId, length must be less than 500.", new [] { "PayeeId" });
            }

            // PayeeId (string) minLength
            if(this.PayeeId != null && this.PayeeId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeId, length must be greater than 0.", new [] { "PayeeId" });
            }

            // Secret (string) maxLength
            if(this.Secret != null && this.Secret.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Secret, length must be less than 500.", new [] { "Secret" });
            }

            // Secret (string) minLength
            if(this.Secret != null && this.Secret.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Secret, length must be greater than 0.", new [] { "Secret" });
            }

            // Hash (string) maxLength
            if(this.Hash != null && this.Hash.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be less than 500.", new [] { "Hash" });
            }

            // Hash (string) minLength
            if(this.Hash != null && this.Hash.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be greater than 0.", new [] { "Hash" });
            }

            // Hash (string) pattern
            Regex regexHash = new Regex(@"^[a-zA-Z0-9]{1,500}", RegexOptions.CultureInvariant);
            if (false == regexHash.Match(this.Hash).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, must match a pattern of " + regexHash, new [] { "Hash" });
            }

            // PayeeOwningInstitutionId (string) maxLength
            if(this.PayeeOwningInstitutionId != null && this.PayeeOwningInstitutionId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeOwningInstitutionId, length must be less than 500.", new [] { "PayeeOwningInstitutionId" });
            }

            // PayeeOwningInstitutionId (string) minLength
            if(this.PayeeOwningInstitutionId != null && this.PayeeOwningInstitutionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeOwningInstitutionId, length must be greater than 0.", new [] { "PayeeOwningInstitutionId" });
            }

            // LockOwningInstitutionId (string) maxLength
            if(this.LockOwningInstitutionId != null && this.LockOwningInstitutionId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LockOwningInstitutionId, length must be less than 500.", new [] { "LockOwningInstitutionId" });
            }

            // LockOwningInstitutionId (string) minLength
            if(this.LockOwningInstitutionId != null && this.LockOwningInstitutionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LockOwningInstitutionId, length must be greater than 0.", new [] { "LockOwningInstitutionId" });
            }

            yield break;
        }
    }

}
