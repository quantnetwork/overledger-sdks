/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
    /// </summary>
    [DataContract]
    public partial class DestinationPaymentSchema :  IEquatable<DestinationPaymentSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationPaymentSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DestinationPaymentSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationPaymentSchema" /> class.
        /// </summary>
        /// <param name="destinationId">Unique identifier of the destination/recipient (required).</param>
        /// <param name="payment">payment (required).</param>
        public DestinationPaymentSchema(string destinationId = default(string), PaymentSchema payment = default(PaymentSchema))
        {
            // to ensure "destinationId" is required (not null)
            if (destinationId == null)
            {
                throw new InvalidDataException("destinationId is a required property for DestinationPaymentSchema and cannot be null");
            }
            else
            {
                this.DestinationId = destinationId;
            }

            // to ensure "payment" is required (not null)
            if (payment == null)
            {
                throw new InvalidDataException("payment is a required property for DestinationPaymentSchema and cannot be null");
            }
            else
            {
                this.Payment = payment;
            }

        }

        /// <summary>
        /// Unique identifier of the destination/recipient
        /// </summary>
        /// <value>Unique identifier of the destination/recipient</value>
        [DataMember(Name="destinationId", EmitDefaultValue=true)]
        public string DestinationId { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=true)]
        public PaymentSchema Payment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinationPaymentSchema {\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinationPaymentSchema);
        }

        /// <summary>
        /// Returns true if DestinationPaymentSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinationPaymentSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationPaymentSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationId == input.DestinationId ||
                    (this.DestinationId != null &&
                    this.DestinationId.Equals(input.DestinationId))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationId != null)
                    hashCode = hashCode * 59 + this.DestinationId.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DestinationId (string) maxLength
            if(this.DestinationId != null && this.DestinationId.Length > 66)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestinationId, length must be less than 66.", new [] { "DestinationId" });
            }

            // DestinationId (string) minLength
            if(this.DestinationId != null && this.DestinationId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestinationId, length must be greater than 0.", new [] { "DestinationId" });
            }

            // DestinationId (string) pattern
            Regex regexDestinationId = new Regex(@"^[A-Za-z0-9:]{1,66}", RegexOptions.CultureInvariant);
            if (false == regexDestinationId.Match(this.DestinationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestinationId, must match a pattern of " + regexDestinationId, new [] { "DestinationId" });
            }

            yield break;
        }
    }

}
