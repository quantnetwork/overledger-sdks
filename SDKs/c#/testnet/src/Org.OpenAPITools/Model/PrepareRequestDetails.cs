/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PrepareRequestDetails
    /// </summary>
    [DataContract]
    public partial class PrepareRequestDetails :  IEquatable<PrepareRequestDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareRequestDetails" /> class.
        /// </summary>
        /// <param name="mandate">mandate.</param>
        /// <param name="aliasDetails">aliasDetails.</param>
        /// <param name="pagination">pagination.</param>
        /// <param name="origin">origin.</param>
        /// <param name="destination">destination.</param>
        /// <param name="tokenName">Name of the token.</param>
        /// <param name="blockSearchType">blockSearchType.</param>
        /// <param name="payer">payer.</param>
        /// <param name="collector">collector.</param>
        /// <param name="payee">payee.</param>
        /// <param name="additionalOwner">additionalOwner.</param>
        /// <param name="owner">owner.</param>
        /// <param name="creator">creator.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="tokenId">Unique identifier for the specific token.</param>
        /// <param name="message">message.</param>
        /// <param name="lockDetails">lockDetails.</param>
        /// <param name="blockId">blockId.</param>
        /// <param name="accountId">The unique identifiers of the account.</param>
        /// <param name="tokenUnit">The unit of this token.</param>
        /// <param name="beneficiary">beneficiary.</param>
        /// <param name="sender">sender.</param>
        /// <param name="accountDetails">accountDetails.</param>
        /// <param name="overledgerSigningType">overledgerSigningType.</param>
        /// <param name="totalPaymentAmount">totalPaymentAmount.</param>
        /// <param name="signerAccount">signerAccount.</param>
        public PrepareRequestDetails(List<Mandate> mandate = default(List<Mandate>), AliasDetails aliasDetails = default(AliasDetails), Pagination pagination = default(Pagination), List<Origin> origin = default(List<Origin>), List<Destination> destination = default(List<Destination>), string tokenName = default(string), string blockSearchType = default(string), List<Payer> payer = default(List<Payer>), Collector collector = default(Collector), List<Payee> payee = default(List<Payee>), AdditionalOwner additionalOwner = default(AdditionalOwner), Owner owner = default(Owner), Creator creator = default(Creator), List<Receiver> receiver = default(List<Receiver>), string tokenId = default(string), string message = default(string), LockDetails lockDetails = default(LockDetails), string blockId = default(string), string accountId = default(string), string tokenUnit = default(string), Beneficiary beneficiary = default(Beneficiary), List<Sender> sender = default(List<Sender>), AccountDetails accountDetails = default(AccountDetails), string overledgerSigningType = default(string), Payment totalPaymentAmount = default(Payment), SignerAccount signerAccount = default(SignerAccount))
        {
            this.Mandate = mandate;
            this.AliasDetails = aliasDetails;
            this.Pagination = pagination;
            this.Origin = origin;
            this.Destination = destination;
            this.TokenName = tokenName;
            this.BlockSearchType = blockSearchType;
            this.Payer = payer;
            this.Collector = collector;
            this.Payee = payee;
            this.AdditionalOwner = additionalOwner;
            this.Owner = owner;
            this.Creator = creator;
            this.Receiver = receiver;
            this.TokenId = tokenId;
            this.Message = message;
            this.LockDetails = lockDetails;
            this.BlockId = blockId;
            this.AccountId = accountId;
            this.TokenUnit = tokenUnit;
            this.Beneficiary = beneficiary;
            this.Sender = sender;
            this.AccountDetails = accountDetails;
            this.OverledgerSigningType = overledgerSigningType;
            this.TotalPaymentAmount = totalPaymentAmount;
            this.SignerAccount = signerAccount;
        }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=false)]
        public List<Mandate> Mandate { get; set; }

        /// <summary>
        /// Gets or Sets AliasDetails
        /// </summary>
        [DataMember(Name="aliasDetails", EmitDefaultValue=false)]
        public AliasDetails AliasDetails { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public List<Origin> Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public List<Destination> Destination { get; set; }

        /// <summary>
        /// Name of the token
        /// </summary>
        /// <value>Name of the token</value>
        [DataMember(Name="tokenName", EmitDefaultValue=false)]
        public string TokenName { get; set; }

        /// <summary>
        /// Gets or Sets BlockSearchType
        /// </summary>
        [DataMember(Name="blockSearchType", EmitDefaultValue=false)]
        public string BlockSearchType { get; set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [DataMember(Name="payer", EmitDefaultValue=false)]
        public List<Payer> Payer { get; set; }

        /// <summary>
        /// Gets or Sets Collector
        /// </summary>
        [DataMember(Name="collector", EmitDefaultValue=false)]
        public Collector Collector { get; set; }

        /// <summary>
        /// Gets or Sets Payee
        /// </summary>
        [DataMember(Name="payee", EmitDefaultValue=false)]
        public List<Payee> Payee { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalOwner
        /// </summary>
        [DataMember(Name="additionalOwner", EmitDefaultValue=false)]
        public AdditionalOwner AdditionalOwner { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public Owner Owner { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public Creator Creator { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public List<Receiver> Receiver { get; set; }

        /// <summary>
        /// Unique identifier for the specific token
        /// </summary>
        /// <value>Unique identifier for the specific token</value>
        [DataMember(Name="tokenId", EmitDefaultValue=false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets LockDetails
        /// </summary>
        [DataMember(Name="lockDetails", EmitDefaultValue=false)]
        public LockDetails LockDetails { get; set; }

        /// <summary>
        /// Gets or Sets BlockId
        /// </summary>
        [DataMember(Name="blockId", EmitDefaultValue=false)]
        public string BlockId { get; set; }

        /// <summary>
        /// The unique identifiers of the account
        /// </summary>
        /// <value>The unique identifiers of the account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The unit of this token
        /// </summary>
        /// <value>The unit of this token</value>
        [DataMember(Name="tokenUnit", EmitDefaultValue=false)]
        public string TokenUnit { get; set; }

        /// <summary>
        /// Gets or Sets Beneficiary
        /// </summary>
        [DataMember(Name="beneficiary", EmitDefaultValue=false)]
        public Beneficiary Beneficiary { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public List<Sender> Sender { get; set; }

        /// <summary>
        /// Gets or Sets AccountDetails
        /// </summary>
        [DataMember(Name="accountDetails", EmitDefaultValue=false)]
        public AccountDetails AccountDetails { get; set; }

        /// <summary>
        /// Gets or Sets OverledgerSigningType
        /// </summary>
        [DataMember(Name="overledgerSigningType", EmitDefaultValue=false)]
        public string OverledgerSigningType { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaymentAmount
        /// </summary>
        [DataMember(Name="totalPaymentAmount", EmitDefaultValue=false)]
        public Payment TotalPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets SignerAccount
        /// </summary>
        [DataMember(Name="signerAccount", EmitDefaultValue=false)]
        public SignerAccount SignerAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepareRequestDetails {\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("  AliasDetails: ").Append(AliasDetails).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  BlockSearchType: ").Append(BlockSearchType).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  Collector: ").Append(Collector).Append("\n");
            sb.Append("  Payee: ").Append(Payee).Append("\n");
            sb.Append("  AdditionalOwner: ").Append(AdditionalOwner).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  LockDetails: ").Append(LockDetails).Append("\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  TokenUnit: ").Append(TokenUnit).Append("\n");
            sb.Append("  Beneficiary: ").Append(Beneficiary).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  AccountDetails: ").Append(AccountDetails).Append("\n");
            sb.Append("  OverledgerSigningType: ").Append(OverledgerSigningType).Append("\n");
            sb.Append("  TotalPaymentAmount: ").Append(TotalPaymentAmount).Append("\n");
            sb.Append("  SignerAccount: ").Append(SignerAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareRequestDetails);
        }

        /// <summary>
        /// Returns true if PrepareRequestDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareRequestDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mandate == input.Mandate ||
                    this.Mandate != null &&
                    input.Mandate != null &&
                    this.Mandate.SequenceEqual(input.Mandate)
                ) && 
                (
                    this.AliasDetails == input.AliasDetails ||
                    (this.AliasDetails != null &&
                    this.AliasDetails.Equals(input.AliasDetails))
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) && 
                (
                    this.Origin == input.Origin ||
                    this.Origin != null &&
                    input.Origin != null &&
                    this.Origin.SequenceEqual(input.Origin)
                ) && 
                (
                    this.Destination == input.Destination ||
                    this.Destination != null &&
                    input.Destination != null &&
                    this.Destination.SequenceEqual(input.Destination)
                ) && 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.BlockSearchType == input.BlockSearchType ||
                    (this.BlockSearchType != null &&
                    this.BlockSearchType.Equals(input.BlockSearchType))
                ) && 
                (
                    this.Payer == input.Payer ||
                    this.Payer != null &&
                    input.Payer != null &&
                    this.Payer.SequenceEqual(input.Payer)
                ) && 
                (
                    this.Collector == input.Collector ||
                    (this.Collector != null &&
                    this.Collector.Equals(input.Collector))
                ) && 
                (
                    this.Payee == input.Payee ||
                    this.Payee != null &&
                    input.Payee != null &&
                    this.Payee.SequenceEqual(input.Payee)
                ) && 
                (
                    this.AdditionalOwner == input.AdditionalOwner ||
                    (this.AdditionalOwner != null &&
                    this.AdditionalOwner.Equals(input.AdditionalOwner))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    this.Receiver != null &&
                    input.Receiver != null &&
                    this.Receiver.SequenceEqual(input.Receiver)
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.LockDetails == input.LockDetails ||
                    (this.LockDetails != null &&
                    this.LockDetails.Equals(input.LockDetails))
                ) && 
                (
                    this.BlockId == input.BlockId ||
                    (this.BlockId != null &&
                    this.BlockId.Equals(input.BlockId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.TokenUnit == input.TokenUnit ||
                    (this.TokenUnit != null &&
                    this.TokenUnit.Equals(input.TokenUnit))
                ) && 
                (
                    this.Beneficiary == input.Beneficiary ||
                    (this.Beneficiary != null &&
                    this.Beneficiary.Equals(input.Beneficiary))
                ) && 
                (
                    this.Sender == input.Sender ||
                    this.Sender != null &&
                    input.Sender != null &&
                    this.Sender.SequenceEqual(input.Sender)
                ) && 
                (
                    this.AccountDetails == input.AccountDetails ||
                    (this.AccountDetails != null &&
                    this.AccountDetails.Equals(input.AccountDetails))
                ) && 
                (
                    this.OverledgerSigningType == input.OverledgerSigningType ||
                    (this.OverledgerSigningType != null &&
                    this.OverledgerSigningType.Equals(input.OverledgerSigningType))
                ) && 
                (
                    this.TotalPaymentAmount == input.TotalPaymentAmount ||
                    (this.TotalPaymentAmount != null &&
                    this.TotalPaymentAmount.Equals(input.TotalPaymentAmount))
                ) && 
                (
                    this.SignerAccount == input.SignerAccount ||
                    (this.SignerAccount != null &&
                    this.SignerAccount.Equals(input.SignerAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mandate != null)
                    hashCode = hashCode * 59 + this.Mandate.GetHashCode();
                if (this.AliasDetails != null)
                    hashCode = hashCode * 59 + this.AliasDetails.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                if (this.BlockSearchType != null)
                    hashCode = hashCode * 59 + this.BlockSearchType.GetHashCode();
                if (this.Payer != null)
                    hashCode = hashCode * 59 + this.Payer.GetHashCode();
                if (this.Collector != null)
                    hashCode = hashCode * 59 + this.Collector.GetHashCode();
                if (this.Payee != null)
                    hashCode = hashCode * 59 + this.Payee.GetHashCode();
                if (this.AdditionalOwner != null)
                    hashCode = hashCode * 59 + this.AdditionalOwner.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                if (this.TokenId != null)
                    hashCode = hashCode * 59 + this.TokenId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.LockDetails != null)
                    hashCode = hashCode * 59 + this.LockDetails.GetHashCode();
                if (this.BlockId != null)
                    hashCode = hashCode * 59 + this.BlockId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.TokenUnit != null)
                    hashCode = hashCode * 59 + this.TokenUnit.GetHashCode();
                if (this.Beneficiary != null)
                    hashCode = hashCode * 59 + this.Beneficiary.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.AccountDetails != null)
                    hashCode = hashCode * 59 + this.AccountDetails.GetHashCode();
                if (this.OverledgerSigningType != null)
                    hashCode = hashCode * 59 + this.OverledgerSigningType.GetHashCode();
                if (this.TotalPaymentAmount != null)
                    hashCode = hashCode * 59 + this.TotalPaymentAmount.GetHashCode();
                if (this.SignerAccount != null)
                    hashCode = hashCode * 59 + this.SignerAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {






            // TokenName (string) maxLength
            if(this.TokenName != null && this.TokenName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be less than 100.", new [] { "TokenName" });
            }

            // TokenName (string) minLength
            if(this.TokenName != null && this.TokenName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be greater than 0.", new [] { "TokenName" });
            }

            // TokenName (string) pattern
            Regex regexTokenName = new Regex(@"^[A-Za-z0-9 ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexTokenName.Match(this.TokenName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, must match a pattern of " + regexTokenName, new [] { "TokenName" });
            }

            // BlockSearchType (string) maxLength
            if(this.BlockSearchType != null && this.BlockSearchType.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockSearchType, length must be less than 30.", new [] { "BlockSearchType" });
            }

            // BlockSearchType (string) minLength
            if(this.BlockSearchType != null && this.BlockSearchType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockSearchType, length must be greater than 0.", new [] { "BlockSearchType" });
            }

            // BlockSearchType (string) pattern
            Regex regexBlockSearchType = new Regex(@"^[A-Z0-9_]{1,30}$", RegexOptions.CultureInvariant);
            if (false == regexBlockSearchType.Match(this.BlockSearchType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockSearchType, must match a pattern of " + regexBlockSearchType, new [] { "BlockSearchType" });
            }





            // TokenId (string) maxLength
            if(this.TokenId != null && this.TokenId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, length must be less than 100.", new [] { "TokenId" });
            }

            // TokenId (string) minLength
            if(this.TokenId != null && this.TokenId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, length must be greater than 0.", new [] { "TokenId" });
            }

            // TokenId (string) pattern
            Regex regexTokenId = new Regex(@"^[A-Za-z0-9. ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexTokenId.Match(this.TokenId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, must match a pattern of " + regexTokenId, new [] { "TokenId" });
            }

            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 150.", new [] { "Message" });
            }

            // Message (string) minLength
            if(this.Message != null && this.Message.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be greater than 0.", new [] { "Message" });
            }

            // Message (string) pattern
            Regex regexMessage = new Regex(@"^[\\S\\s]{1,150}$", RegexOptions.CultureInvariant);
            if (false == regexMessage.Match(this.Message).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, must match a pattern of " + regexMessage, new [] { "Message" });
            }

            // BlockId (string) maxLength
            if(this.BlockId != null && this.BlockId.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockId, length must be less than 150.", new [] { "BlockId" });
            }

            // BlockId (string) minLength
            if(this.BlockId != null && this.BlockId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockId, length must be greater than 0.", new [] { "BlockId" });
            }

            // BlockId (string) pattern
            Regex regexBlockId = new Regex(@"^[a-zA-Z0-9]{1,150}$", RegexOptions.CultureInvariant);
            if (false == regexBlockId.Match(this.BlockId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BlockId, must match a pattern of " + regexBlockId, new [] { "BlockId" });
            }

            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 500.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 0.", new [] { "AccountId" });
            }

            // AccountId (string) pattern
            Regex regexAccountId = new Regex(@"^[a-zA-Z0-9:,\/.=\\-\\s]{1,500}", RegexOptions.CultureInvariant);
            if (false == regexAccountId.Match(this.AccountId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, must match a pattern of " + regexAccountId, new [] { "AccountId" });
            }

            // TokenUnit (string) maxLength
            if(this.TokenUnit != null && this.TokenUnit.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenUnit, length must be less than 11.", new [] { "TokenUnit" });
            }

            // TokenUnit (string) minLength
            if(this.TokenUnit != null && this.TokenUnit.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenUnit, length must be greater than 0.", new [] { "TokenUnit" });
            }

            // OverledgerSigningType (string) maxLength
            if(this.OverledgerSigningType != null && this.OverledgerSigningType.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerSigningType, length must be less than 30.", new [] { "OverledgerSigningType" });
            }

            // OverledgerSigningType (string) minLength
            if(this.OverledgerSigningType != null && this.OverledgerSigningType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerSigningType, length must be greater than 0.", new [] { "OverledgerSigningType" });
            }

            // OverledgerSigningType (string) pattern
            Regex regexOverledgerSigningType = new Regex(@"^[A-Za-z- ]{1,30}", RegexOptions.CultureInvariant);
            if (false == regexOverledgerSigningType.Match(this.OverledgerSigningType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverledgerSigningType, must match a pattern of " + regexOverledgerSigningType, new [] { "OverledgerSigningType" });
            }

            yield break;
        }
    }

}
