/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MonitorSmartContractRequestSchema
    /// </summary>
    [DataContract]
    public partial class MonitorSmartContractRequestSchema :  IEquatable<MonitorSmartContractRequestSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorSmartContractRequestSchema" /> class.
        /// </summary>
        /// <param name="eventParams">eventParams.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="location">location.</param>
        /// <param name="callBackURL">callBackURL.</param>
        /// <param name="smartContractId">smartContractId.</param>
        public MonitorSmartContractRequestSchema(List<MonitorSmartContractEventParam> eventParams = default(List<MonitorSmartContractEventParam>), string eventName = default(string), Location location = default(Location), string callBackURL = default(string), string smartContractId = default(string))
        {
            this.EventParams = eventParams;
            this.EventName = eventName;
            this.Location = location;
            this.CallBackURL = callBackURL;
            this.SmartContractId = smartContractId;
        }

        /// <summary>
        /// Gets or Sets EventParams
        /// </summary>
        [DataMember(Name="eventParams", EmitDefaultValue=false)]
        public List<MonitorSmartContractEventParam> EventParams { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets CallBackURL
        /// </summary>
        [DataMember(Name="callBackURL", EmitDefaultValue=false)]
        public string CallBackURL { get; set; }

        /// <summary>
        /// Gets or Sets SmartContractId
        /// </summary>
        [DataMember(Name="smartContractId", EmitDefaultValue=false)]
        public string SmartContractId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonitorSmartContractRequestSchema {\n");
            sb.Append("  EventParams: ").Append(EventParams).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CallBackURL: ").Append(CallBackURL).Append("\n");
            sb.Append("  SmartContractId: ").Append(SmartContractId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitorSmartContractRequestSchema);
        }

        /// <summary>
        /// Returns true if MonitorSmartContractRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitorSmartContractRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitorSmartContractRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventParams == input.EventParams ||
                    this.EventParams != null &&
                    input.EventParams != null &&
                    this.EventParams.SequenceEqual(input.EventParams)
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.CallBackURL == input.CallBackURL ||
                    (this.CallBackURL != null &&
                    this.CallBackURL.Equals(input.CallBackURL))
                ) && 
                (
                    this.SmartContractId == input.SmartContractId ||
                    (this.SmartContractId != null &&
                    this.SmartContractId.Equals(input.SmartContractId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventParams != null)
                    hashCode = hashCode * 59 + this.EventParams.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.CallBackURL != null)
                    hashCode = hashCode * 59 + this.CallBackURL.GetHashCode();
                if (this.SmartContractId != null)
                    hashCode = hashCode * 59 + this.SmartContractId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EventName (string) maxLength
            if(this.EventName != null && this.EventName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be less than 100.", new [] { "EventName" });
            }

            // EventName (string) minLength
            if(this.EventName != null && this.EventName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be greater than 0.", new [] { "EventName" });
            }

            // EventName (string) pattern
            Regex regexEventName = new Regex(@"^[a-zA-Z0-9 ]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexEventName.Match(this.EventName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, must match a pattern of " + regexEventName, new [] { "EventName" });
            }

            // CallBackURL (string) maxLength
            if(this.CallBackURL != null && this.CallBackURL.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallBackURL, length must be less than 300.", new [] { "CallBackURL" });
            }

            // CallBackURL (string) minLength
            if(this.CallBackURL != null && this.CallBackURL.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallBackURL, length must be greater than 0.", new [] { "CallBackURL" });
            }

            // CallBackURL (string) pattern
            Regex regexCallBackURL = new Regex(@"^http[\\S\\s]{1,300}$", RegexOptions.CultureInvariant);
            if (false == regexCallBackURL.Match(this.CallBackURL).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallBackURL, must match a pattern of " + regexCallBackURL, new [] { "CallBackURL" });
            }

            // SmartContractId (string) maxLength
            if(this.SmartContractId != null && this.SmartContractId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmartContractId, length must be less than 100.", new [] { "SmartContractId" });
            }

            // SmartContractId (string) minLength
            if(this.SmartContractId != null && this.SmartContractId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmartContractId, length must be greater than 0.", new [] { "SmartContractId" });
            }

            // SmartContractId (string) pattern
            Regex regexSmartContractId = new Regex(@"^[a-zA-Z0-9-]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexSmartContractId.Match(this.SmartContractId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmartContractId, must match a pattern of " + regexSmartContractId, new [] { "SmartContractId" });
            }

            yield break;
        }
    }

}
