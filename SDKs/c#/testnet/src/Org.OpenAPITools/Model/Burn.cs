/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Burn
    /// </summary>
    [DataContract]
    public partial class Burn :  IEquatable<Burn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Burn" /> class.
        /// </summary>
        /// <param name="tokenName">Name of the token.</param>
        /// <param name="amount">The amount of a currency.</param>
        /// <param name="unit">The unit of this currency/token.</param>
        /// <param name="metadata">(Optional) String of metadata.</param>
        /// <param name="tokenId">Unique identifier for the specific token.</param>
        public Burn(string tokenName = default(string), string amount = default(string), string unit = default(string), string metadata = default(string), string tokenId = default(string))
        {
            this.TokenName = tokenName;
            this.Amount = amount;
            this.Unit = unit;
            this.Metadata = metadata;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Name of the token
        /// </summary>
        /// <value>Name of the token</value>
        [DataMember(Name="tokenName", EmitDefaultValue=false)]
        public string TokenName { get; set; }

        /// <summary>
        /// The amount of a currency
        /// </summary>
        /// <value>The amount of a currency</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// The unit of this currency/token
        /// </summary>
        /// <value>The unit of this currency/token</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// (Optional) String of metadata
        /// </summary>
        /// <value>(Optional) String of metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Unique identifier for the specific token
        /// </summary>
        /// <value>Unique identifier for the specific token</value>
        [DataMember(Name="tokenId", EmitDefaultValue=false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Burn {\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Burn);
        }

        /// <summary>
        /// Returns true if Burn instances are equal
        /// </summary>
        /// <param name="input">Instance of Burn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Burn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.TokenId != null)
                    hashCode = hashCode * 59 + this.TokenId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TokenName (string) maxLength
            if(this.TokenName != null && this.TokenName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be less than 100.", new [] { "TokenName" });
            }

            // TokenName (string) minLength
            if(this.TokenName != null && this.TokenName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, length must be greater than 0.", new [] { "TokenName" });
            }

            // TokenName (string) pattern
            Regex regexTokenName = new Regex(@"^[A-Za-z0-9 ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexTokenName.Match(this.TokenName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenName, must match a pattern of " + regexTokenName, new [] { "TokenName" });
            }

            // Amount (string) maxLength
            if(this.Amount != null && this.Amount.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be less than 100.", new [] { "Amount" });
            }

            // Amount (string) minLength
            if(this.Amount != null && this.Amount.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be greater than 0.", new [] { "Amount" });
            }

            // Amount (string) pattern
            Regex regexAmount = new Regex(@"^[A-Za-z0-9. ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexAmount.Match(this.Amount).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must match a pattern of " + regexAmount, new [] { "Amount" });
            }

            // Unit (string) maxLength
            if(this.Unit != null && this.Unit.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be less than 11.", new [] { "Unit" });
            }

            // Unit (string) minLength
            if(this.Unit != null && this.Unit.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, length must be greater than 0.", new [] { "Unit" });
            }

            // Metadata (string) maxLength
            if(this.Metadata != null && this.Metadata.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Metadata, length must be less than 150.", new [] { "Metadata" });
            }

            // Metadata (string) minLength
            if(this.Metadata != null && this.Metadata.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Metadata, length must be greater than 0.", new [] { "Metadata" });
            }

            // Metadata (string) pattern
            Regex regexMetadata = new Regex(@"^[\\S\\s]{1,150}$", RegexOptions.CultureInvariant);
            if (false == regexMetadata.Match(this.Metadata).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Metadata, must match a pattern of " + regexMetadata, new [] { "Metadata" });
            }

            // TokenId (string) maxLength
            if(this.TokenId != null && this.TokenId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, length must be less than 100.", new [] { "TokenId" });
            }

            // TokenId (string) minLength
            if(this.TokenId != null && this.TokenId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, length must be greater than 0.", new [] { "TokenId" });
            }

            // TokenId (string) pattern
            Regex regexTokenId = new Regex(@"^[A-Za-z0-9. ]{1,100}", RegexOptions.CultureInvariant);
            if (false == regexTokenId.Match(this.TokenId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, must match a pattern of " + regexTokenId, new [] { "TokenId" });
            }

            yield break;
        }
    }

}
