/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SmartContractEventHistory
    /// </summary>
    [DataContract]
    public partial class SmartContractEventHistory :  IEquatable<SmartContractEventHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartContractEventHistory" /> class.
        /// </summary>
        /// <param name="eventId">eventId.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="eventParameters">eventParameters.</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="timestamp">timestamp.</param>
        public SmartContractEventHistory(string eventId = default(string), string eventName = default(string), string eventParameters = default(string), string transactionId = default(string), DateTime timestamp = default(DateTime))
        {
            this.EventId = eventId;
            this.EventName = eventName;
            this.EventParameters = eventParameters;
            this.TransactionId = transactionId;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets EventParameters
        /// </summary>
        [DataMember(Name="eventParameters", EmitDefaultValue=false)]
        public string EventParameters { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmartContractEventHistory {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventParameters: ").Append(EventParameters).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmartContractEventHistory);
        }

        /// <summary>
        /// Returns true if SmartContractEventHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of SmartContractEventHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmartContractEventHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventParameters == input.EventParameters ||
                    (this.EventParameters != null &&
                    this.EventParameters.Equals(input.EventParameters))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventParameters != null)
                    hashCode = hashCode * 59 + this.EventParameters.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EventId (string) maxLength
            if(this.EventId != null && this.EventId.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventId, length must be less than 200.", new [] { "EventId" });
            }

            // EventId (string) minLength
            if(this.EventId != null && this.EventId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventId, length must be greater than 0.", new [] { "EventId" });
            }

            // EventId (string) pattern
            Regex regexEventId = new Regex(@"^[a-zA-Z0-9,_ ]{1,200}$", RegexOptions.CultureInvariant);
            if (false == regexEventId.Match(this.EventId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventId, must match a pattern of " + regexEventId, new [] { "EventId" });
            }

            // EventName (string) maxLength
            if(this.EventName != null && this.EventName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be less than 100.", new [] { "EventName" });
            }

            // EventName (string) minLength
            if(this.EventName != null && this.EventName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be greater than 0.", new [] { "EventName" });
            }

            // EventName (string) pattern
            Regex regexEventName = new Regex(@"^[a-zA-Z0-9 ]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexEventName.Match(this.EventName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, must match a pattern of " + regexEventName, new [] { "EventName" });
            }

            // EventParameters (string) maxLength
            if(this.EventParameters != null && this.EventParameters.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventParameters, length must be less than 100.", new [] { "EventParameters" });
            }

            // EventParameters (string) minLength
            if(this.EventParameters != null && this.EventParameters.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventParameters, length must be greater than 0.", new [] { "EventParameters" });
            }

            // EventParameters (string) pattern
            Regex regexEventParameters = new Regex(@"^[a-zA-Z0-9,_ ]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexEventParameters.Match(this.EventParameters).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventParameters, must match a pattern of " + regexEventParameters, new [] { "EventParameters" });
            }

            // TransactionId (string) maxLength
            if(this.TransactionId != null && this.TransactionId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 100.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if(this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // TransactionId (string) pattern
            Regex regexTransactionId = new Regex(@"^[a-zA-Z0-9-]{1,100}$", RegexOptions.CultureInvariant);
            if (false == regexTransactionId.Match(this.TransactionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, must match a pattern of " + regexTransactionId, new [] { "TransactionId" });
            }

            yield break;
        }
    }

}
