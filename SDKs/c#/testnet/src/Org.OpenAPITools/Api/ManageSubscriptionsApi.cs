/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageSubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove a subscription created by your application
        /// </summary>
        /// <remarks>
        /// Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <returns>WebhookSubscriptionStatusUpdateResponse</returns>
        WebhookSubscriptionStatusUpdateResponse DeleteSubscription (string authorization, string subscriptionId);

        /// <summary>
        /// Remove a subscription created by your application
        /// </summary>
        /// <remarks>
        /// Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of WebhookSubscriptionStatusUpdateResponse</returns>
        ApiResponse<WebhookSubscriptionStatusUpdateResponse> DeleteSubscriptionWithHttpInfo (string authorization, string subscriptionId);
        /// <summary>
        /// Retrieve a list of subscriptions created by your application
        /// </summary>
        /// <remarks>
        /// Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        List<ListWebhookSubscriptionResponseSchema> ListSubscriptions (string authorization);

        /// <summary>
        /// Retrieve a list of subscriptions created by your application
        /// </summary>
        /// <remarks>
        /// Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        ApiResponse<List<ListWebhookSubscriptionResponseSchema>> ListSubscriptionsWithHttpInfo (string authorization);
        /// <summary>
        /// Update a specific subscription created by your application
        /// </summary>
        /// <remarks>
        /// Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <returns>WebhookSubscriptionStatusUpdateResponse</returns>
        WebhookSubscriptionStatusUpdateResponse UpdateSubscription (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema);

        /// <summary>
        /// Update a specific subscription created by your application
        /// </summary>
        /// <remarks>
        /// Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <returns>ApiResponse of WebhookSubscriptionStatusUpdateResponse</returns>
        ApiResponse<WebhookSubscriptionStatusUpdateResponse> UpdateSubscriptionWithHttpInfo (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove a subscription created by your application
        /// </summary>
        /// <remarks>
        /// Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookSubscriptionStatusUpdateResponse</returns>
        System.Threading.Tasks.Task<WebhookSubscriptionStatusUpdateResponse> DeleteSubscriptionAsync (string authorization, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a subscription created by your application
        /// </summary>
        /// <remarks>
        /// Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionStatusUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSubscriptionStatusUpdateResponse>> DeleteSubscriptionWithHttpInfoAsync (string authorization, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of subscriptions created by your application
        /// </summary>
        /// <remarks>
        /// Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        System.Threading.Tasks.Task<List<ListWebhookSubscriptionResponseSchema>> ListSubscriptionsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of subscriptions created by your application
        /// </summary>
        /// <remarks>
        /// Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ListWebhookSubscriptionResponseSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListWebhookSubscriptionResponseSchema>>> ListSubscriptionsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a specific subscription created by your application
        /// </summary>
        /// <remarks>
        /// Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookSubscriptionStatusUpdateResponse</returns>
        System.Threading.Tasks.Task<WebhookSubscriptionStatusUpdateResponse> UpdateSubscriptionAsync (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a specific subscription created by your application
        /// </summary>
        /// <remarks>
        /// Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionStatusUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSubscriptionStatusUpdateResponse>> UpdateSubscriptionWithHttpInfoAsync (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageSubscriptionsApi : IManageSubscriptionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageSubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageSubscriptionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageSubscriptionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ManageSubscriptionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageSubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageSubscriptionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove a subscription created by your application Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <returns>WebhookSubscriptionStatusUpdateResponse</returns>
        public WebhookSubscriptionStatusUpdateResponse DeleteSubscription (string authorization, string subscriptionId)
        {
             ApiResponse<WebhookSubscriptionStatusUpdateResponse> localVarResponse = DeleteSubscriptionWithHttpInfo(authorization, subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a subscription created by your application Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <returns>ApiResponse of WebhookSubscriptionStatusUpdateResponse</returns>
        public ApiResponse<WebhookSubscriptionStatusUpdateResponse> DeleteSubscriptionWithHttpInfo (string authorization, string subscriptionId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->DeleteSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling ManageSubscriptionsApi->DeleteSubscription");

            var localVarPath = "/v2/webhook/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSubscriptionStatusUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSubscriptionStatusUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSubscriptionStatusUpdateResponse)));
        }

        /// <summary>
        /// Remove a subscription created by your application Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookSubscriptionStatusUpdateResponse</returns>
        public async System.Threading.Tasks.Task<WebhookSubscriptionStatusUpdateResponse> DeleteSubscriptionAsync (string authorization, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookSubscriptionStatusUpdateResponse> localVarResponse = await DeleteSubscriptionWithHttpInfoAsync(authorization, subscriptionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a subscription created by your application Deletes a subscription created by your application based onthe given Subscription ID. Deleting a subscription will stop updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionStatusUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSubscriptionStatusUpdateResponse>> DeleteSubscriptionWithHttpInfoAsync (string authorization, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->DeleteSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling ManageSubscriptionsApi->DeleteSubscription");

            var localVarPath = "/v2/webhook/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSubscriptionStatusUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSubscriptionStatusUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSubscriptionStatusUpdateResponse)));
        }

        /// <summary>
        /// Retrieve a list of subscriptions created by your application Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        public List<ListWebhookSubscriptionResponseSchema> ListSubscriptions (string authorization)
        {
             ApiResponse<List<ListWebhookSubscriptionResponseSchema>> localVarResponse = ListSubscriptionsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of subscriptions created by your application Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        public ApiResponse<List<ListWebhookSubscriptionResponseSchema>> ListSubscriptionsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->ListSubscriptions");

            var localVarPath = "/v2/webhook/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListWebhookSubscriptionResponseSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListWebhookSubscriptionResponseSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListWebhookSubscriptionResponseSchema>)));
        }

        /// <summary>
        /// Retrieve a list of subscriptions created by your application Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ListWebhookSubscriptionResponseSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListWebhookSubscriptionResponseSchema>> ListSubscriptionsAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ListWebhookSubscriptionResponseSchema>> localVarResponse = await ListSubscriptionsWithHttpInfoAsync(authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of subscriptions created by your application Returns a list of active or paused subscriptions and the corresponding Subscription IDs that were created by your application
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ListWebhookSubscriptionResponseSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ListWebhookSubscriptionResponseSchema>>> ListSubscriptionsWithHttpInfoAsync (string authorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->ListSubscriptions");

            var localVarPath = "/v2/webhook/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListWebhookSubscriptionResponseSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListWebhookSubscriptionResponseSchema>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListWebhookSubscriptionResponseSchema>)));
        }

        /// <summary>
        /// Update a specific subscription created by your application Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <returns>WebhookSubscriptionStatusUpdateResponse</returns>
        public WebhookSubscriptionStatusUpdateResponse UpdateSubscription (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema)
        {
             ApiResponse<WebhookSubscriptionStatusUpdateResponse> localVarResponse = UpdateSubscriptionWithHttpInfo(authorization, subscriptionId, updateWebhookSubscriptionRequestSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific subscription created by your application Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <returns>ApiResponse of WebhookSubscriptionStatusUpdateResponse</returns>
        public ApiResponse<WebhookSubscriptionStatusUpdateResponse> UpdateSubscriptionWithHttpInfo (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling ManageSubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'updateWebhookSubscriptionRequestSchema' is set
            if (updateWebhookSubscriptionRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookSubscriptionRequestSchema' when calling ManageSubscriptionsApi->UpdateSubscription");

            var localVarPath = "/v2/webhook/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateWebhookSubscriptionRequestSchema != null && updateWebhookSubscriptionRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWebhookSubscriptionRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookSubscriptionRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSubscriptionStatusUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSubscriptionStatusUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSubscriptionStatusUpdateResponse)));
        }

        /// <summary>
        /// Update a specific subscription created by your application Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookSubscriptionStatusUpdateResponse</returns>
        public async System.Threading.Tasks.Task<WebhookSubscriptionStatusUpdateResponse> UpdateSubscriptionAsync (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookSubscriptionStatusUpdateResponse> localVarResponse = await UpdateSubscriptionWithHttpInfoAsync(authorization, subscriptionId, updateWebhookSubscriptionRequestSchema, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific subscription created by your application Updates the subscription callback URL and/or the subscription status to be either active or track only for the given Subscription ID. Updating the status to be track only will pause updates being sent to the requested callback URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateWebhookSubscriptionRequestSchema"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionStatusUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSubscriptionStatusUpdateResponse>> UpdateSubscriptionWithHttpInfoAsync (string authorization, string subscriptionId, UpdateWebhookSubscriptionRequestSchema updateWebhookSubscriptionRequestSchema, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ManageSubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling ManageSubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'updateWebhookSubscriptionRequestSchema' is set
            if (updateWebhookSubscriptionRequestSchema == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookSubscriptionRequestSchema' when calling ManageSubscriptionsApi->UpdateSubscription");

            var localVarPath = "/v2/webhook/subscription/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateWebhookSubscriptionRequestSchema != null && updateWebhookSubscriptionRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWebhookSubscriptionRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookSubscriptionRequestSchema; // byte array
            }

            // authentication (OAuth2_Security_Scheme) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSubscriptionStatusUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSubscriptionStatusUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSubscriptionStatusUpdateResponse)));
        }

    }
}
