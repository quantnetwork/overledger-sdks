/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SmartContract : Computer program storage in a DLT system where the outcome is recorded on the distributed ledger



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SmartContract {
    #[serde(rename = "function", skip_serializing_if = "Option::is_none")]
    pub function: Option<Box<crate::models::Function>>,
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    /// Information on the object type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "smartContractId", skip_serializing_if = "Option::is_none")]
    pub smart_contract_id: Option<String>,
    #[serde(rename = "extraFields", skip_serializing_if = "Option::is_none")]
    pub extra_fields: Option<serde_json::Value>,
}

impl SmartContract {
    /// Computer program storage in a DLT system where the outcome is recorded on the distributed ledger
    pub fn new() -> SmartContract {
        SmartContract {
            function: None,
            detail: None,
            _type: None,
            smart_contract_id: None,
            extra_fields: None,
        }
    }
}


