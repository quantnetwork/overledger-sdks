/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AccountDetails : Account Details of the tokens



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccountDetails {
    #[serde(rename = "parentAccountId", skip_serializing_if = "Option::is_none")]
    pub parent_account_id: Option<String>,
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "owningInstitutionId", skip_serializing_if = "Option::is_none")]
    pub owning_institution_id: Option<String>,
    #[serde(rename = "accountType", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<String>,
}

impl AccountDetails {
    /// Account Details of the tokens
    pub fn new() -> AccountDetails {
        AccountDetails {
            parent_account_id: None,
            account_id: None,
            unit: None,
            owning_institution_id: None,
            account_type: None,
        }
    }
}


