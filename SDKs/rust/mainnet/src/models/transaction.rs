/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Transaction : Smallest unit of a work process related to interactions with distributed ledgers



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Transaction {
    /// The signatures of this transaction
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<Vec<String>>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Vec<crate::models::Origin>>,
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<Box<crate::models::Fee>>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<crate::models::Destination>>,
    #[serde(rename = "signed", skip_serializing_if = "Option::is_none")]
    pub signed: Option<String>,
    #[serde(rename = "totalPaymentAmount", skip_serializing_if = "Option::is_none")]
    pub total_payment_amount: Option<Vec<crate::models::Payment>>,
    /// Any text-based element of the data payload
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The unique identifier of the transaction on this DLN
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    #[serde(rename = "encoded", skip_serializing_if = "Option::is_none")]
    pub encoded: Option<Vec<String>>,
    #[serde(rename = "extraFields", skip_serializing_if = "Option::is_none")]
    pub extra_fields: Option<serde_json::Value>,
    #[serde(rename = "nativeData", skip_serializing_if = "Option::is_none")]
    pub native_data: Option<serde_json::Value>,
}

impl Transaction {
    /// Smallest unit of a work process related to interactions with distributed ledgers
    pub fn new() -> Transaction {
        Transaction {
            signature: None,
            origin: None,
            fee: None,
            destination: None,
            signed: None,
            total_payment_amount: None,
            message: None,
            transaction_id: None,
            encoded: None,
            extra_fields: None,
            native_data: None,
        }
    }
}


