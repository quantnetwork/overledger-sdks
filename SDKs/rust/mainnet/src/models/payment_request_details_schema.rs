/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PaymentRequestDetailsSchema : The payload request



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentRequestDetailsSchema {
    /// List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
    #[serde(rename = "destination")]
    pub destination: Vec<crate::models::DestinationPaymentSchema>,
    /// Any text-based element of the data payload
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The method of signing used to submit the transaction
    #[serde(rename = "overledgerSigningType", skip_serializing_if = "Option::is_none")]
    pub overledger_signing_type: Option<OverledgerSigningType>,
    /// List of where this transaction is coming from
    #[serde(rename = "origin")]
    pub origin: Vec<crate::models::OriginPaymentSchema>,
}

impl PaymentRequestDetailsSchema {
    /// The payload request
    pub fn new(destination: Vec<crate::models::DestinationPaymentSchema>, origin: Vec<crate::models::OriginPaymentSchema>) -> PaymentRequestDetailsSchema {
        PaymentRequestDetailsSchema {
            destination,
            message: None,
            overledger_signing_type: None,
            origin,
        }
    }
}

/// The method of signing used to submit the transaction
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OverledgerSigningType {
    #[serde(rename = "overledger-javascript-library")]
    OverledgerJavascriptLibrary,
}

