/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DestinationPaymentSchema : List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinationPaymentSchema {
    /// Unique identifier of the destination/recipient
    #[serde(rename = "destinationId")]
    pub destination_id: String,
    #[serde(rename = "payment")]
    pub payment: Box<crate::models::PaymentSchema>,
}

impl DestinationPaymentSchema {
    /// List of the recipients of this transaction.  **Warning:** Bitcoin transaction fees will be deducted from the last destination provided in the transaction payment request. If the last destination payment value is not enough to cover the fees, your Bitcoin payment transaction will fail
    pub fn new(destination_id: String, payment: crate::models::PaymentSchema) -> DestinationPaymentSchema {
        DestinationPaymentSchema {
            destination_id,
            payment: Box::new(payment),
        }
    }
}


