/*
 * Quant Overledger API
 *
 * Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_all_non_fungible_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllNonFungibleTokensError {
    Status400(crate::models::ErrorResponseMessage),
    Status401(crate::models::ErrorResponseMessage),
    Status500(crate::models::InternalServerErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Retrieves a list of non-fungible tokens supported by Overledger and which API's and functions you can use for each. You can retrieve all non-fungible token types for all locations without providing parameters. If you want to see what tokens are supported for a specific contract type you can pass in either ERC721 or QRC721 as a contract type parameter. You can then filter further by including the resource using technology and network parameters. You can also look for a specific token by passing in the tokenName as a parameter.
pub async fn get_all_non_fungible_tokens(configuration: &configuration::Configuration, authorization: &str, contract_type: Option<&str>, technology: Option<&str>, network: Option<&str>, token_name: Option<&str>) -> Result<crate::models::NonFungibleTokenResponse, Error<GetAllNonFungibleTokensError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/tokenise/tokens/nonfungible", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = contract_type {
        local_var_req_builder = local_var_req_builder.query(&[("contractType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = technology {
        local_var_req_builder = local_var_req_builder.query(&[("technology", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = network {
        local_var_req_builder = local_var_req_builder.query(&[("network", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token_name {
        local_var_req_builder = local_var_req_builder.query(&[("tokenName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllNonFungibleTokensError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

