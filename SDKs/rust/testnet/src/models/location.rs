/*
 * Quant Overledger API
 *
 * Quant's Overledger API allows developers to create applications for multiple DLT's using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps â€“ prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Location : Unique reference to the ledger on a particular ledger network (optionally accessed from a particular node)



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Location {
    /// The technology used by the desired network
    #[serde(rename = "technology")]
    pub technology: String,
    /// The network that the ledger resides on
    #[serde(rename = "network")]
    pub network: String,
}

impl Location {
    /// Unique reference to the ledger on a particular ledger network (optionally accessed from a particular node)
    pub fn new(technology: String, network: String) -> Location {
        Location {
            technology,
            network,
        }
    }
}


